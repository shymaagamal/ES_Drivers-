
TIM1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003260  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00003260  000032f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800078  00800078  0000330c  2**0
                  ALLOC
  3 .stab         00003b40  00000000  00000000  0000330c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000027fb  00000000  00000000  00006e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009647  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009787  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000098f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b540  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c42b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d1d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d338  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d5c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dd93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 38 0f 	jmp	0x1e70	; 0x1e70 <__vector_1>
       8:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__vector_2>
       c:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a1 18 	call	0x3142	; 0x3142 <main>
      8a:	0c 94 2e 19 	jmp	0x325c	; 0x325c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 be 18 	jmp	0x317c	; 0x317c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 be 18 	jmp	0x317c	; 0x317c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 be 18 	jmp	0x317c	; 0x317c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 be 18 	jmp	0x317c	; 0x317c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 be 18 	jmp	0x317c	; 0x317c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 de 18 	jmp	0x31bc	; 0x31bc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIM1_WGMMood>:




void TIM1_WGMMood(WGMMood WGM)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <TIM1_WGMMood+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	89 83       	std	Y+1, r24	; 0x01

switch(WGM)
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	28 2f       	mov	r18, r24
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	3b 83       	std	Y+3, r19	; 0x03
     b5c:	2a 83       	std	Y+2, r18	; 0x02
     b5e:	8a 81       	ldd	r24, Y+2	; 0x02
     b60:	9b 81       	ldd	r25, Y+3	; 0x03
     b62:	87 30       	cpi	r24, 0x07	; 7
     b64:	91 05       	cpc	r25, r1
     b66:	09 f4       	brne	.+2      	; 0xb6a <TIM1_WGMMood+0x24>
     b68:	ad c0       	rjmp	.+346    	; 0xcc4 <TIM1_WGMMood+0x17e>
     b6a:	2a 81       	ldd	r18, Y+2	; 0x02
     b6c:	3b 81       	ldd	r19, Y+3	; 0x03
     b6e:	28 30       	cpi	r18, 0x08	; 8
     b70:	31 05       	cpc	r19, r1
     b72:	4c f5       	brge	.+82     	; 0xbc6 <TIM1_WGMMood+0x80>
     b74:	8a 81       	ldd	r24, Y+2	; 0x02
     b76:	9b 81       	ldd	r25, Y+3	; 0x03
     b78:	83 30       	cpi	r24, 0x03	; 3
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <TIM1_WGMMood+0x3a>
     b7e:	71 c0       	rjmp	.+226    	; 0xc62 <TIM1_WGMMood+0x11c>
     b80:	2a 81       	ldd	r18, Y+2	; 0x02
     b82:	3b 81       	ldd	r19, Y+3	; 0x03
     b84:	24 30       	cpi	r18, 0x04	; 4
     b86:	31 05       	cpc	r19, r1
     b88:	8c f4       	brge	.+34     	; 0xbac <TIM1_WGMMood+0x66>
     b8a:	8a 81       	ldd	r24, Y+2	; 0x02
     b8c:	9b 81       	ldd	r25, Y+3	; 0x03
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	91 05       	cpc	r25, r1
     b92:	09 f4       	brne	.+2      	; 0xb96 <TIM1_WGMMood+0x50>
     b94:	4e c0       	rjmp	.+156    	; 0xc32 <TIM1_WGMMood+0xec>
     b96:	2a 81       	ldd	r18, Y+2	; 0x02
     b98:	3b 81       	ldd	r19, Y+3	; 0x03
     b9a:	22 30       	cpi	r18, 0x02	; 2
     b9c:	31 05       	cpc	r19, r1
     b9e:	0c f0       	brlt	.+2      	; 0xba2 <TIM1_WGMMood+0x5c>
     ba0:	54 c0       	rjmp	.+168    	; 0xc4a <TIM1_WGMMood+0x104>
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	9b 81       	ldd	r25, Y+3	; 0x03
     ba6:	00 97       	sbiw	r24, 0x00	; 0
     ba8:	c9 f1       	breq	.+114    	; 0xc1c <TIM1_WGMMood+0xd6>
     baa:	e8 c0       	rjmp	.+464    	; 0xd7c <TIM1_WGMMood+0x236>
     bac:	2a 81       	ldd	r18, Y+2	; 0x02
     bae:	3b 81       	ldd	r19, Y+3	; 0x03
     bb0:	25 30       	cpi	r18, 0x05	; 5
     bb2:	31 05       	cpc	r19, r1
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <TIM1_WGMMood+0x72>
     bb6:	6c c0       	rjmp	.+216    	; 0xc90 <TIM1_WGMMood+0x14a>
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	9b 81       	ldd	r25, Y+3	; 0x03
     bbc:	86 30       	cpi	r24, 0x06	; 6
     bbe:	91 05       	cpc	r25, r1
     bc0:	0c f0       	brlt	.+2      	; 0xbc4 <TIM1_WGMMood+0x7e>
     bc2:	73 c0       	rjmp	.+230    	; 0xcaa <TIM1_WGMMood+0x164>
     bc4:	59 c0       	rjmp	.+178    	; 0xc78 <TIM1_WGMMood+0x132>
     bc6:	2a 81       	ldd	r18, Y+2	; 0x02
     bc8:	3b 81       	ldd	r19, Y+3	; 0x03
     bca:	2b 30       	cpi	r18, 0x0B	; 11
     bcc:	31 05       	cpc	r19, r1
     bce:	09 f4       	brne	.+2      	; 0xbd2 <TIM1_WGMMood+0x8c>
     bd0:	a7 c0       	rjmp	.+334    	; 0xd20 <TIM1_WGMMood+0x1da>
     bd2:	8a 81       	ldd	r24, Y+2	; 0x02
     bd4:	9b 81       	ldd	r25, Y+3	; 0x03
     bd6:	8c 30       	cpi	r24, 0x0C	; 12
     bd8:	91 05       	cpc	r25, r1
     bda:	6c f4       	brge	.+26     	; 0xbf6 <TIM1_WGMMood+0xb0>
     bdc:	2a 81       	ldd	r18, Y+2	; 0x02
     bde:	3b 81       	ldd	r19, Y+3	; 0x03
     be0:	29 30       	cpi	r18, 0x09	; 9
     be2:	31 05       	cpc	r19, r1
     be4:	09 f4       	brne	.+2      	; 0xbe8 <TIM1_WGMMood+0xa2>
     be6:	86 c0       	rjmp	.+268    	; 0xcf4 <TIM1_WGMMood+0x1ae>
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	9b 81       	ldd	r25, Y+3	; 0x03
     bec:	8a 30       	cpi	r24, 0x0A	; 10
     bee:	91 05       	cpc	r25, r1
     bf0:	0c f0       	brlt	.+2      	; 0xbf4 <TIM1_WGMMood+0xae>
     bf2:	8b c0       	rjmp	.+278    	; 0xd0a <TIM1_WGMMood+0x1c4>
     bf4:	73 c0       	rjmp	.+230    	; 0xcdc <TIM1_WGMMood+0x196>
     bf6:	2a 81       	ldd	r18, Y+2	; 0x02
     bf8:	3b 81       	ldd	r19, Y+3	; 0x03
     bfa:	2d 30       	cpi	r18, 0x0D	; 13
     bfc:	31 05       	cpc	r19, r1
     bfe:	09 f4       	brne	.+2      	; 0xc02 <TIM1_WGMMood+0xbc>
     c00:	a7 c0       	rjmp	.+334    	; 0xd50 <TIM1_WGMMood+0x20a>
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	9b 81       	ldd	r25, Y+3	; 0x03
     c06:	8d 30       	cpi	r24, 0x0D	; 13
     c08:	91 05       	cpc	r25, r1
     c0a:	0c f4       	brge	.+2      	; 0xc0e <TIM1_WGMMood+0xc8>
     c0c:	96 c0       	rjmp	.+300    	; 0xd3a <TIM1_WGMMood+0x1f4>
     c0e:	2a 81       	ldd	r18, Y+2	; 0x02
     c10:	3b 81       	ldd	r19, Y+3	; 0x03
     c12:	2e 30       	cpi	r18, 0x0E	; 14
     c14:	31 05       	cpc	r19, r1
     c16:	09 f4       	brne	.+2      	; 0xc1a <TIM1_WGMMood+0xd4>
     c18:	a7 c0       	rjmp	.+334    	; 0xd68 <TIM1_WGMMood+0x222>
     c1a:	b0 c0       	rjmp	.+352    	; 0xd7c <TIM1_WGMMood+0x236>
{
case TIM1_Normal:
TCCR1A_REG->WGM=0b00;
     c1c:	ef e4       	ldi	r30, 0x4F	; 79
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	8c 7f       	andi	r24, 0xFC	; 252
     c24:	80 83       	st	Z, r24
TCCR1B_REG->WGM=0b00;
     c26:	ee e4       	ldi	r30, 0x4E	; 78
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	87 7e       	andi	r24, 0xE7	; 231
     c2e:	80 83       	st	Z, r24
     c30:	a5 c0       	rjmp	.+330    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_PWMPhaseCorrect8bit:
	TCCR1A_REG->WGM=0b01;
     c32:	ef e4       	ldi	r30, 0x4F	; 79
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	8c 7f       	andi	r24, 0xFC	; 252
     c3a:	81 60       	ori	r24, 0x01	; 1
     c3c:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b00;
     c3e:	ee e4       	ldi	r30, 0x4E	; 78
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	87 7e       	andi	r24, 0xE7	; 231
     c46:	80 83       	st	Z, r24
     c48:	99 c0       	rjmp	.+306    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_PWMPhaseCorrect9bit:
	TCCR1A_REG->WGM=0b10;
     c4a:	ef e4       	ldi	r30, 0x4F	; 79
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	8c 7f       	andi	r24, 0xFC	; 252
     c52:	82 60       	ori	r24, 0x02	; 2
     c54:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b00;
     c56:	ee e4       	ldi	r30, 0x4E	; 78
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	87 7e       	andi	r24, 0xE7	; 231
     c5e:	80 83       	st	Z, r24
     c60:	8d c0       	rjmp	.+282    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_PWMPhaseCorrect10bit:
	TCCR1A_REG->WGM=0b11;
     c62:	ef e4       	ldi	r30, 0x4F	; 79
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	83 60       	ori	r24, 0x03	; 3
     c6a:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b00;
     c6c:	ee e4       	ldi	r30, 0x4E	; 78
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	87 7e       	andi	r24, 0xE7	; 231
     c74:	80 83       	st	Z, r24
     c76:	82 c0       	rjmp	.+260    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_CTC:
	TCCR1A_REG->WGM=0b00;
     c78:	ef e4       	ldi	r30, 0x4F	; 79
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	8c 7f       	andi	r24, 0xFC	; 252
     c80:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b01;
     c82:	ee e4       	ldi	r30, 0x4E	; 78
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	87 7e       	andi	r24, 0xE7	; 231
     c8a:	88 60       	ori	r24, 0x08	; 8
     c8c:	80 83       	st	Z, r24
     c8e:	76 c0       	rjmp	.+236    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_FastPWM8bit:
	TCCR1A_REG->WGM=0b01;
     c90:	ef e4       	ldi	r30, 0x4F	; 79
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	8c 7f       	andi	r24, 0xFC	; 252
     c98:	81 60       	ori	r24, 0x01	; 1
     c9a:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b10;
     c9c:	ee e4       	ldi	r30, 0x4E	; 78
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	87 7e       	andi	r24, 0xE7	; 231
     ca4:	80 61       	ori	r24, 0x10	; 16
     ca6:	80 83       	st	Z, r24
     ca8:	69 c0       	rjmp	.+210    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_FastPWM9bit:
	TCCR1A_REG->WGM=0b10;
     caa:	ef e4       	ldi	r30, 0x4F	; 79
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8c 7f       	andi	r24, 0xFC	; 252
     cb2:	82 60       	ori	r24, 0x02	; 2
     cb4:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b01;
     cb6:	ee e4       	ldi	r30, 0x4E	; 78
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	87 7e       	andi	r24, 0xE7	; 231
     cbe:	88 60       	ori	r24, 0x08	; 8
     cc0:	80 83       	st	Z, r24
     cc2:	5c c0       	rjmp	.+184    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_FastPWM10bit:
	TCCR1A_REG->WGM=0b11;
     cc4:	ef e4       	ldi	r30, 0x4F	; 79
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	83 60       	ori	r24, 0x03	; 3
     ccc:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b01;
     cce:	ee e4       	ldi	r30, 0x4E	; 78
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	87 7e       	andi	r24, 0xE7	; 231
     cd6:	88 60       	ori	r24, 0x08	; 8
     cd8:	80 83       	st	Z, r24
     cda:	50 c0       	rjmp	.+160    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_PWMPhaseandFrequencyCorrect_ICR1_TOP:
	TCCR1A_REG->WGM=0b00;
     cdc:	ef e4       	ldi	r30, 0x4F	; 79
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	8c 7f       	andi	r24, 0xFC	; 252
     ce4:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b10;
     ce6:	ee e4       	ldi	r30, 0x4E	; 78
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	87 7e       	andi	r24, 0xE7	; 231
     cee:	80 61       	ori	r24, 0x10	; 16
     cf0:	80 83       	st	Z, r24
     cf2:	44 c0       	rjmp	.+136    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_PWMPhaseandFrequencyCorrect_OCR1A_TOP:
	TCCR1A_REG->WGM=0b00;
     cf4:	ef e4       	ldi	r30, 0x4F	; 79
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	8c 7f       	andi	r24, 0xFC	; 252
     cfc:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b00;
     cfe:	ee e4       	ldi	r30, 0x4E	; 78
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	87 7e       	andi	r24, 0xE7	; 231
     d06:	80 83       	st	Z, r24
     d08:	39 c0       	rjmp	.+114    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_PWMPhaseCorrect_ICR1_TOP:
	TCCR1A_REG->WGM=0b00;
     d0a:	ef e4       	ldi	r30, 0x4F	; 79
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	8c 7f       	andi	r24, 0xFC	; 252
     d12:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b00;
     d14:	ee e4       	ldi	r30, 0x4E	; 78
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	87 7e       	andi	r24, 0xE7	; 231
     d1c:	80 83       	st	Z, r24
     d1e:	2e c0       	rjmp	.+92     	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_PWMPhaseCorrect_OCR1A_TOP:
	TCCR1A_REG->WGM=0b01;
     d20:	ef e4       	ldi	r30, 0x4F	; 79
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	8c 7f       	andi	r24, 0xFC	; 252
     d28:	81 60       	ori	r24, 0x01	; 1
     d2a:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b10;
     d2c:	ee e4       	ldi	r30, 0x4E	; 78
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	87 7e       	andi	r24, 0xE7	; 231
     d34:	80 61       	ori	r24, 0x10	; 16
     d36:	80 83       	st	Z, r24
     d38:	21 c0       	rjmp	.+66     	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_CTC_ICR1_TOP:
	TCCR1A_REG->WGM=0b00;
     d3a:	ef e4       	ldi	r30, 0x4F	; 79
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8c 7f       	andi	r24, 0xFC	; 252
     d42:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b11;
     d44:	ee e4       	ldi	r30, 0x4E	; 78
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	88 61       	ori	r24, 0x18	; 24
     d4c:	80 83       	st	Z, r24
     d4e:	16 c0       	rjmp	.+44     	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_FASTPWM_ICR1_TOP:
	TCCR1A_REG->WGM=0b10;
     d50:	ef e4       	ldi	r30, 0x4F	; 79
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	8c 7f       	andi	r24, 0xFC	; 252
     d58:	82 60       	ori	r24, 0x02	; 2
     d5a:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b11;
     d5c:	ee e4       	ldi	r30, 0x4E	; 78
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	88 61       	ori	r24, 0x18	; 24
     d64:	80 83       	st	Z, r24
     d66:	0a c0       	rjmp	.+20     	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_FASTPWM_OCR1A_TOP:
	TCCR1A_REG->WGM=0b11;
     d68:	ef e4       	ldi	r30, 0x4F	; 79
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	83 60       	ori	r24, 0x03	; 3
     d70:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b11;
     d72:	ee e4       	ldi	r30, 0x4E	; 78
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	88 61       	ori	r24, 0x18	; 24
     d7a:	80 83       	st	Z, r24
break;
}


}
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <TIM1_FastPWMMood>:
void TIM1_FastPWMMood(COMFastPWM COM)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <TIM1_FastPWMMood+0x6>
     d8e:	0f 92       	push	r0
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	89 83       	std	Y+1, r24	; 0x01
	switch(COM)
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	3b 83       	std	Y+3, r19	; 0x03
     d9e:	2a 83       	std	Y+2, r18	; 0x02
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	9b 81       	ldd	r25, Y+3	; 0x03
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	59 f1       	breq	.+86     	; 0xe00 <TIM1_FastPWMMood+0x78>
     daa:	2a 81       	ldd	r18, Y+2	; 0x02
     dac:	3b 81       	ldd	r19, Y+3	; 0x03
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	2c f4       	brge	.+10     	; 0xdbe <TIM1_FastPWMMood+0x36>
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	9b 81       	ldd	r25, Y+3	; 0x03
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	69 f0       	breq	.+26     	; 0xdd6 <TIM1_FastPWMMood+0x4e>
     dbc:	5f c0       	rjmp	.+190    	; 0xe7c <TIM1_FastPWMMood+0xf4>
     dbe:	2a 81       	ldd	r18, Y+2	; 0x02
     dc0:	3b 81       	ldd	r19, Y+3	; 0x03
     dc2:	22 30       	cpi	r18, 0x02	; 2
     dc4:	31 05       	cpc	r19, r1
     dc6:	89 f1       	breq	.+98     	; 0xe2a <TIM1_FastPWMMood+0xa2>
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	9b 81       	ldd	r25, Y+3	; 0x03
     dcc:	83 30       	cpi	r24, 0x03	; 3
     dce:	91 05       	cpc	r25, r1
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <TIM1_FastPWMMood+0x4c>
     dd2:	40 c0       	rjmp	.+128    	; 0xe54 <TIM1_FastPWMMood+0xcc>
     dd4:	53 c0       	rjmp	.+166    	; 0xe7c <TIM1_FastPWMMood+0xf4>
	{
	case TIM1_NormalFastPWM:
		TCCR1A_REG->COM1A0=0;
     dd6:	ef e4       	ldi	r30, 0x4F	; 79
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	8f 7b       	andi	r24, 0xBF	; 191
     dde:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=0;
     de0:	ef e4       	ldi	r30, 0x4F	; 79
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	8f 7e       	andi	r24, 0xEF	; 239
     de8:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=0;
     dea:	ef e4       	ldi	r30, 0x4F	; 79
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	8f 77       	andi	r24, 0x7F	; 127
     df2:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=0;
     df4:	ef e4       	ldi	r30, 0x4F	; 79
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	8f 7d       	andi	r24, 0xDF	; 223
     dfc:	80 83       	st	Z, r24
     dfe:	3e c0       	rjmp	.+124    	; 0xe7c <TIM1_FastPWMMood+0xf4>
		break;
	case TIM1_Toggle_OC1A_OnCompareMatchFastPWM:
		TCCR1A_REG->COM1A0=1;
     e00:	ef e4       	ldi	r30, 0x4F	; 79
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	80 64       	ori	r24, 0x40	; 64
     e08:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=1;
     e0a:	ef e4       	ldi	r30, 0x4F	; 79
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	80 61       	ori	r24, 0x10	; 16
     e12:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=0;
     e14:	ef e4       	ldi	r30, 0x4F	; 79
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	8f 77       	andi	r24, 0x7F	; 127
     e1c:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=0;
     e1e:	ef e4       	ldi	r30, 0x4F	; 79
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	8f 7d       	andi	r24, 0xDF	; 223
     e26:	80 83       	st	Z, r24
     e28:	29 c0       	rjmp	.+82     	; 0xe7c <TIM1_FastPWMMood+0xf4>
		break;
	case TIM1_ClearOnCompareMatchFastPWM:
		TCCR1A_REG->COM1A0=0;
     e2a:	ef e4       	ldi	r30, 0x4F	; 79
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	8f 7b       	andi	r24, 0xBF	; 191
     e32:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=0;
     e34:	ef e4       	ldi	r30, 0x4F	; 79
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	8f 7e       	andi	r24, 0xEF	; 239
     e3c:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=1;
     e3e:	ef e4       	ldi	r30, 0x4F	; 79
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	80 68       	ori	r24, 0x80	; 128
     e46:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=1;
     e48:	ef e4       	ldi	r30, 0x4F	; 79
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 62       	ori	r24, 0x20	; 32
     e50:	80 83       	st	Z, r24
     e52:	14 c0       	rjmp	.+40     	; 0xe7c <TIM1_FastPWMMood+0xf4>
		break;
	case TIM1_SetOnCompareMatchFastPWM:
		TCCR1A_REG->COM1A0=1;
     e54:	ef e4       	ldi	r30, 0x4F	; 79
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	80 64       	ori	r24, 0x40	; 64
     e5c:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=1;
     e5e:	ef e4       	ldi	r30, 0x4F	; 79
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	80 61       	ori	r24, 0x10	; 16
     e66:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=1;
     e68:	ef e4       	ldi	r30, 0x4F	; 79
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	80 68       	ori	r24, 0x80	; 128
     e70:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=1;
     e72:	ef e4       	ldi	r30, 0x4F	; 79
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 62       	ori	r24, 0x20	; 32
     e7a:	80 83       	st	Z, r24
		break;

	}
}
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <TIM1_NonPWMMood>:
void TIM1_NonPWMMood(COMNonPWM COM)
{
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <TIM1_NonPWMMood+0x6>
     e8e:	0f 92       	push	r0
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	89 83       	std	Y+1, r24	; 0x01
	switch(COM)
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	3b 83       	std	Y+3, r19	; 0x03
     e9e:	2a 83       	std	Y+2, r18	; 0x02
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	9b 81       	ldd	r25, Y+3	; 0x03
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	91 05       	cpc	r25, r1
     ea8:	59 f1       	breq	.+86     	; 0xf00 <TIM1_NonPWMMood+0x78>
     eaa:	2a 81       	ldd	r18, Y+2	; 0x02
     eac:	3b 81       	ldd	r19, Y+3	; 0x03
     eae:	22 30       	cpi	r18, 0x02	; 2
     eb0:	31 05       	cpc	r19, r1
     eb2:	2c f4       	brge	.+10     	; 0xebe <TIM1_NonPWMMood+0x36>
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	9b 81       	ldd	r25, Y+3	; 0x03
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	69 f0       	breq	.+26     	; 0xed6 <TIM1_NonPWMMood+0x4e>
     ebc:	5f c0       	rjmp	.+190    	; 0xf7c <TIM1_NonPWMMood+0xf4>
     ebe:	2a 81       	ldd	r18, Y+2	; 0x02
     ec0:	3b 81       	ldd	r19, Y+3	; 0x03
     ec2:	22 30       	cpi	r18, 0x02	; 2
     ec4:	31 05       	cpc	r19, r1
     ec6:	89 f1       	breq	.+98     	; 0xf2a <TIM1_NonPWMMood+0xa2>
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	9b 81       	ldd	r25, Y+3	; 0x03
     ecc:	83 30       	cpi	r24, 0x03	; 3
     ece:	91 05       	cpc	r25, r1
     ed0:	09 f4       	brne	.+2      	; 0xed4 <TIM1_NonPWMMood+0x4c>
     ed2:	40 c0       	rjmp	.+128    	; 0xf54 <TIM1_NonPWMMood+0xcc>
     ed4:	53 c0       	rjmp	.+166    	; 0xf7c <TIM1_NonPWMMood+0xf4>
	{
	case TIM1_NormalNONPWM:
		TCCR1A_REG->COM1A0=0;
     ed6:	ef e4       	ldi	r30, 0x4F	; 79
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	8f 7b       	andi	r24, 0xBF	; 191
     ede:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=0;
     ee0:	ef e4       	ldi	r30, 0x4F	; 79
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	8f 7e       	andi	r24, 0xEF	; 239
     ee8:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=0;
     eea:	ef e4       	ldi	r30, 0x4F	; 79
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	8f 77       	andi	r24, 0x7F	; 127
     ef2:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=0;
     ef4:	ef e4       	ldi	r30, 0x4F	; 79
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	8f 7d       	andi	r24, 0xDF	; 223
     efc:	80 83       	st	Z, r24
     efe:	3e c0       	rjmp	.+124    	; 0xf7c <TIM1_NonPWMMood+0xf4>
		break;
	case TIM1_ToggleOncomparematchNONPWM:
		TCCR1A_REG->COM1A0=1;
     f00:	ef e4       	ldi	r30, 0x4F	; 79
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	80 64       	ori	r24, 0x40	; 64
     f08:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=1;
     f0a:	ef e4       	ldi	r30, 0x4F	; 79
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 61       	ori	r24, 0x10	; 16
     f12:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=0;
     f14:	ef e4       	ldi	r30, 0x4F	; 79
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	8f 77       	andi	r24, 0x7F	; 127
     f1c:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=0;
     f1e:	ef e4       	ldi	r30, 0x4F	; 79
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	8f 7d       	andi	r24, 0xDF	; 223
     f26:	80 83       	st	Z, r24
     f28:	29 c0       	rjmp	.+82     	; 0xf7c <TIM1_NonPWMMood+0xf4>
		break;
	case TIM1_ClearOnCompareMatchNONPWM:
		TCCR1A_REG->COM1A0=0;
     f2a:	ef e4       	ldi	r30, 0x4F	; 79
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	8f 7b       	andi	r24, 0xBF	; 191
     f32:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=0;
     f34:	ef e4       	ldi	r30, 0x4F	; 79
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	8f 7e       	andi	r24, 0xEF	; 239
     f3c:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=1;
     f3e:	ef e4       	ldi	r30, 0x4F	; 79
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	80 68       	ori	r24, 0x80	; 128
     f46:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=1;
     f48:	ef e4       	ldi	r30, 0x4F	; 79
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	80 62       	ori	r24, 0x20	; 32
     f50:	80 83       	st	Z, r24
     f52:	14 c0       	rjmp	.+40     	; 0xf7c <TIM1_NonPWMMood+0xf4>
		break;
	case TIM1_SetOncomparematchNONPWM:
		TCCR1A_REG->COM1A0=1;
     f54:	ef e4       	ldi	r30, 0x4F	; 79
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	80 64       	ori	r24, 0x40	; 64
     f5c:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=1;
     f5e:	ef e4       	ldi	r30, 0x4F	; 79
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	80 61       	ori	r24, 0x10	; 16
     f66:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=1;
     f68:	ef e4       	ldi	r30, 0x4F	; 79
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	80 68       	ori	r24, 0x80	; 128
     f70:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=1;
     f72:	ef e4       	ldi	r30, 0x4F	; 79
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	80 62       	ori	r24, 0x20	; 32
     f7a:	80 83       	st	Z, r24
		break;

	}
}
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <TIM1_phaseCorrectMood>:
void TIM1_phaseCorrectMood(COMPhaseCorrect COM)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <TIM1_phaseCorrectMood+0x6>
     f8e:	0f 92       	push	r0
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	89 83       	std	Y+1, r24	; 0x01
	switch(COM)
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	3b 83       	std	Y+3, r19	; 0x03
     f9e:	2a 83       	std	Y+2, r18	; 0x02
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	9b 81       	ldd	r25, Y+3	; 0x03
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	91 05       	cpc	r25, r1
     fa8:	59 f1       	breq	.+86     	; 0x1000 <TIM1_phaseCorrectMood+0x78>
     faa:	2a 81       	ldd	r18, Y+2	; 0x02
     fac:	3b 81       	ldd	r19, Y+3	; 0x03
     fae:	22 30       	cpi	r18, 0x02	; 2
     fb0:	31 05       	cpc	r19, r1
     fb2:	2c f4       	brge	.+10     	; 0xfbe <TIM1_phaseCorrectMood+0x36>
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	9b 81       	ldd	r25, Y+3	; 0x03
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	69 f0       	breq	.+26     	; 0xfd6 <TIM1_phaseCorrectMood+0x4e>
     fbc:	5f c0       	rjmp	.+190    	; 0x107c <TIM1_phaseCorrectMood+0xf4>
     fbe:	2a 81       	ldd	r18, Y+2	; 0x02
     fc0:	3b 81       	ldd	r19, Y+3	; 0x03
     fc2:	22 30       	cpi	r18, 0x02	; 2
     fc4:	31 05       	cpc	r19, r1
     fc6:	89 f1       	breq	.+98     	; 0x102a <TIM1_phaseCorrectMood+0xa2>
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	9b 81       	ldd	r25, Y+3	; 0x03
     fcc:	83 30       	cpi	r24, 0x03	; 3
     fce:	91 05       	cpc	r25, r1
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <TIM1_phaseCorrectMood+0x4c>
     fd2:	40 c0       	rjmp	.+128    	; 0x1054 <TIM1_phaseCorrectMood+0xcc>
     fd4:	53 c0       	rjmp	.+166    	; 0x107c <TIM1_phaseCorrectMood+0xf4>
	{
	case TIM1_NormalPhasePWM:
		TCCR1A_REG->COM1A0=0;
     fd6:	ef e4       	ldi	r30, 0x4F	; 79
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8f 7b       	andi	r24, 0xBF	; 191
     fde:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=0;
     fe0:	ef e4       	ldi	r30, 0x4F	; 79
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8f 7e       	andi	r24, 0xEF	; 239
     fe8:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=0;
     fea:	ef e4       	ldi	r30, 0x4F	; 79
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	8f 77       	andi	r24, 0x7F	; 127
     ff2:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=0;
     ff4:	ef e4       	ldi	r30, 0x4F	; 79
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	8f 7d       	andi	r24, 0xDF	; 223
     ffc:	80 83       	st	Z, r24
     ffe:	3e c0       	rjmp	.+124    	; 0x107c <TIM1_phaseCorrectMood+0xf4>
		break;
	case TIM1_Toggle_OC1A_OnCompareMatchPhasePWM:
		TCCR1A_REG->COM1A0=1;
    1000:	ef e4       	ldi	r30, 0x4F	; 79
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	80 64       	ori	r24, 0x40	; 64
    1008:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=1;
    100a:	ef e4       	ldi	r30, 0x4F	; 79
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	80 61       	ori	r24, 0x10	; 16
    1012:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=0;
    1014:	ef e4       	ldi	r30, 0x4F	; 79
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	8f 77       	andi	r24, 0x7F	; 127
    101c:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=0;
    101e:	ef e4       	ldi	r30, 0x4F	; 79
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	8f 7d       	andi	r24, 0xDF	; 223
    1026:	80 83       	st	Z, r24
    1028:	29 c0       	rjmp	.+82     	; 0x107c <TIM1_phaseCorrectMood+0xf4>
		break;
	case TIM1_ClearOnCompareMatchPhasePWM:
		TCCR1A_REG->COM1A0=0;
    102a:	ef e4       	ldi	r30, 0x4F	; 79
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	8f 7b       	andi	r24, 0xBF	; 191
    1032:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=0;
    1034:	ef e4       	ldi	r30, 0x4F	; 79
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	8f 7e       	andi	r24, 0xEF	; 239
    103c:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=1;
    103e:	ef e4       	ldi	r30, 0x4F	; 79
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	80 68       	ori	r24, 0x80	; 128
    1046:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=1;
    1048:	ef e4       	ldi	r30, 0x4F	; 79
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	80 62       	ori	r24, 0x20	; 32
    1050:	80 83       	st	Z, r24
    1052:	14 c0       	rjmp	.+40     	; 0x107c <TIM1_phaseCorrectMood+0xf4>
		break;
	case TIM1_SetOnCompareMatchPhasePWM:
		TCCR1A_REG->COM1A0=1;
    1054:	ef e4       	ldi	r30, 0x4F	; 79
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	80 64       	ori	r24, 0x40	; 64
    105c:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=1;
    105e:	ef e4       	ldi	r30, 0x4F	; 79
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	80 61       	ori	r24, 0x10	; 16
    1066:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=1;
    1068:	ef e4       	ldi	r30, 0x4F	; 79
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	80 68       	ori	r24, 0x80	; 128
    1070:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=1;
    1072:	ef e4       	ldi	r30, 0x4F	; 79
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	80 62       	ori	r24, 0x20	; 32
    107a:	80 83       	st	Z, r24
		break;

	}
}
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <TIM1_init>:


void TIM1_init(void)
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
#if(NONPWM==1)
	TIM1_NonPWMMood(TIM1_NONPWM_MOOD);

#elif(TIM1_PHASE_CORRECT==1)

	TIM1_phaseCorrectMood(TIM1_PHASE_CORRECT_MOOD);
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	0e 94 c4 07 	call	0xf88	; 0xf88 <TIM1_phaseCorrectMood>
#elif(TIM1_FAST_PWM==1)
	TIM1_FastPWMMood(TIM1_FAST_PWM_MOOD);

#endif

	TIM1_WGMMood(TIM1_WGM_MOOD);
    1096:	83 e0       	ldi	r24, 0x03	; 3
    1098:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIM1_WGMMood>
}
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <TIM1_stop>:



void TIM1_stop(void)
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
	TCCR1B_REG->CS=TIM1_NoClockSource;
    10aa:	ee e4       	ldi	r30, 0x4E	; 78
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	88 7f       	andi	r24, 0xF8	; 248
    10b2:	80 83       	st	Z, r24
}
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <TIM1_start>:

void TIM1_start(void)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
	TCCR1B_REG->CS=TIM1_Prescaler;
    10c2:	ee e4       	ldi	r30, 0x4E	; 78
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	88 7f       	andi	r24, 0xF8	; 248
    10ca:	82 60       	ori	r24, 0x02	; 2
    10cc:	80 83       	st	Z, r24
}
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <TIM1_setPreload>:
void TIM1_setPreload(uint16 preload_Val)
{
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	00 d0       	rcall	.+0      	; 0x10da <TIM1_setPreload+0x6>
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	9a 83       	std	Y+2, r25	; 0x02
    10e0:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_REG=preload_Val;
    10e2:	ec e4       	ldi	r30, 0x4C	; 76
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	91 83       	std	Z+1, r25	; 0x01
    10ec:	80 83       	st	Z, r24
}
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <TIM1_getVal>:
uint16 TIM1_getVal(void)
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
	return TCNT1_REG;
    1100:	ec e4       	ldi	r30, 0x4C	; 76
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	91 81       	ldd	r25, Z+1	; 0x01
}
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <TIM1_EnableOVFInterrupt>:
void TIM1_EnableOVFInterrupt(void(*CallbackFunction)(void))
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	00 d0       	rcall	.+0      	; 0x1114 <TIM1_EnableOVFInterrupt+0x6>
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	9a 83       	std	Y+2, r25	; 0x02
    111a:	89 83       	std	Y+1, r24	; 0x01
	TIM1_TIFR_REG->TOV1=1;
    111c:	e8 e5       	ldi	r30, 0x58	; 88
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	84 60       	ori	r24, 0x04	; 4
    1124:	80 83       	st	Z, r24
	TIM1_TIMSK_REG->TOIE1=1;
    1126:	e9 e5       	ldi	r30, 0x59	; 89
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	84 60       	ori	r24, 0x04	; 4
    112e:	80 83       	st	Z, r24
	if(CallbackFunction !=NULL)
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	9a 81       	ldd	r25, Y+2	; 0x02
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	31 f0       	breq	.+12     	; 0x1144 <TIM1_EnableOVFInterrupt+0x36>
	{
		TIM1_callBackOV_ptr=CallbackFunction;
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	9a 81       	ldd	r25, Y+2	; 0x02
    113c:	90 93 79 00 	sts	0x0079, r25
    1140:	80 93 78 00 	sts	0x0078, r24
	}
}
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <TIM1_Enable_OCRA_Interrupt>:

void TIM1_Enable_OCRA_Interrupt(void(*CallbackFunction)(void))
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <TIM1_Enable_OCRA_Interrupt+0x6>
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	89 83       	std	Y+1, r24	; 0x01

	TIM1_TIFR_REG->OCF1A=1;
    115c:	e8 e5       	ldi	r30, 0x58	; 88
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	80 61       	ori	r24, 0x10	; 16
    1164:	80 83       	st	Z, r24
	TIM1_TIMSK_REG->OCIE1A=1;
    1166:	e9 e5       	ldi	r30, 0x59	; 89
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	80 61       	ori	r24, 0x10	; 16
    116e:	80 83       	st	Z, r24

	if(CallbackFunction !=NULL)
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	9a 81       	ldd	r25, Y+2	; 0x02
    1174:	00 97       	sbiw	r24, 0x00	; 0
    1176:	31 f0       	breq	.+12     	; 0x1184 <TIM1_Enable_OCRA_Interrupt+0x36>
	{
		TIM1_callBackOCRA_ptr=CallbackFunction;
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	9a 81       	ldd	r25, Y+2	; 0x02
    117c:	90 93 7b 00 	sts	0x007B, r25
    1180:	80 93 7a 00 	sts	0x007A, r24
	}

}
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <TIM1_Enable_OCRB_Interrupt>:
void TIM1_Enable_OCRB_Interrupt(void(*CallbackFunction)(void))
{
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	00 d0       	rcall	.+0      	; 0x1194 <TIM1_Enable_OCRB_Interrupt+0x6>
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	9a 83       	std	Y+2, r25	; 0x02
    119a:	89 83       	std	Y+1, r24	; 0x01
	TIM1_TIFR_REG->OCF1B=1;
    119c:	e8 e5       	ldi	r30, 0x58	; 88
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	88 60       	ori	r24, 0x08	; 8
    11a4:	80 83       	st	Z, r24
	TIM1_TIMSK_REG->OCIE1B=1;
    11a6:	e9 e5       	ldi	r30, 0x59	; 89
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	88 60       	ori	r24, 0x08	; 8
    11ae:	80 83       	st	Z, r24
	if(CallbackFunction !=NULL)
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	9a 81       	ldd	r25, Y+2	; 0x02
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	31 f0       	breq	.+12     	; 0x11c4 <TIM1_Enable_OCRB_Interrupt+0x36>
	{
		TIM1_callBackOCRB_ptr=CallbackFunction;
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	9a 81       	ldd	r25, Y+2	; 0x02
    11bc:	90 93 7d 00 	sts	0x007D, r25
    11c0:	80 93 7c 00 	sts	0x007C, r24
	}
}
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <TIM0_init>:

void (*TIM0_callBackOV_ptr)(void) = NULL;
void (*TIM0_callBackCOMP_ptr)(void) = NULL;

void TIM0_init()
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG->FOC0=0;
    11d6:	e3 e5       	ldi	r30, 0x53	; 83
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	8f 77       	andi	r24, 0x7F	; 127
    11de:	80 83       	st	Z, r24
	TCCR0_REG->WGM01=0;
#elif(CTC)
	TCCR0_REG->WGM00=0;
	TCCR0_REG->WGM01=1;
#elif(FAST_PWM)
	TCCR0_REG->WGM00=1;
    11e0:	e3 e5       	ldi	r30, 0x53	; 83
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	80 64       	ori	r24, 0x40	; 64
    11e8:	80 83       	st	Z, r24
	TCCR0_REG->WGM01=1;
    11ea:	e3 e5       	ldi	r30, 0x53	; 83
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	88 60       	ori	r24, 0x08	; 8
    11f2:	80 83       	st	Z, r24
#endif

	TCCR0_REG->COM=COM_MODE;
    11f4:	e3 e5       	ldi	r30, 0x53	; 83
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	8f 7c       	andi	r24, 0xCF	; 207
    11fc:	80 62       	ori	r24, 0x20	; 32
    11fe:	80 83       	st	Z, r24
}
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <TIM0_stop>:

void TIM0_stop(void)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG->CS=NoClockSource;
    120e:	e3 e5       	ldi	r30, 0x53	; 83
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	88 7f       	andi	r24, 0xF8	; 248
    1216:	80 83       	st	Z, r24
}
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <TIM0_start>:

void TIM0_start(void)
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG->CS=Prescaler;
    1226:	e3 e5       	ldi	r30, 0x53	; 83
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	88 7f       	andi	r24, 0xF8	; 248
    122e:	82 60       	ori	r24, 0x02	; 2
    1230:	80 83       	st	Z, r24
}
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <TIM0_setPreload>:
void TIM0_setPreload(uint8 preload_Val)
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	0f 92       	push	r0
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	89 83       	std	Y+1, r24	; 0x01
	TCNT0_REG=preload_Val;
    1244:	e2 e5       	ldi	r30, 0x52	; 82
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	80 83       	st	Z, r24
}
    124c:	0f 90       	pop	r0
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <TIM0_dutyCycle>:
void TIM0_dutyCycle(uint8 dc)
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	0f 92       	push	r0
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	89 83       	std	Y+1, r24	; 0x01
#if(COM_MODE==ClearOnCompareMatchFastPWM)
	//OCR0_REG=(1-(dc/100))*256;
	OCR0_REG=(1-((uint8)dc/100))*256;
    1260:	ec e5       	ldi	r30, 0x5C	; 92
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	94 e6       	ldi	r25, 0x64	; 100
    1268:	69 2f       	mov	r22, r25
    126a:	0e 94 a6 18 	call	0x314c	; 0x314c <__udivmodqi4>
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	82 1b       	sub	r24, r18
    1278:	93 0b       	sbc	r25, r19
    127a:	98 2f       	mov	r25, r24
    127c:	88 27       	eor	r24, r24
    127e:	80 83       	st	Z, r24
#elif(COM_MODE==SetOnCompareMatchFastPWM)
	OCR0_REG=(dc/100)*256;
#endif
	OCR0_REG=(1-(dc))*255;
    1280:	ec e5       	ldi	r30, 0x5C	; 92
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	ac 01       	movw	r20, r24
    1290:	42 1b       	sub	r20, r18
    1292:	53 0b       	sbc	r21, r19
    1294:	ca 01       	movw	r24, r20
    1296:	9c 01       	movw	r18, r24
    1298:	22 0f       	add	r18, r18
    129a:	33 1f       	adc	r19, r19
    129c:	c9 01       	movw	r24, r18
    129e:	96 95       	lsr	r25
    12a0:	98 2f       	mov	r25, r24
    12a2:	88 27       	eor	r24, r24
    12a4:	97 95       	ror	r25
    12a6:	87 95       	ror	r24
    12a8:	82 1b       	sub	r24, r18
    12aa:	93 0b       	sbc	r25, r19
    12ac:	84 0f       	add	r24, r20
    12ae:	95 1f       	adc	r25, r21
    12b0:	80 83       	st	Z, r24
}
    12b2:	0f 90       	pop	r0
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <TIM0_getVal>:
uint8 TIM0_getVal(void)
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
	return TCNT0_REG;
    12c2:	e2 e5       	ldi	r30, 0x52	; 82
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
}
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	08 95       	ret

000012ce <delay_ms>:


void delay_ms(uint32 msec)
{
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	00 d0       	rcall	.+0      	; 0x12d4 <delay_ms+0x6>
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <delay_ms+0x8>
    12d6:	0f 92       	push	r0
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	69 83       	std	Y+1, r22	; 0x01
    12de:	7a 83       	std	Y+2, r23	; 0x02
    12e0:	8b 83       	std	Y+3, r24	; 0x03
    12e2:	9c 83       	std	Y+4, r25	; 0x04
	TIM0_TIFR_REG->TOV0=1;
    12e4:	e8 e5       	ldi	r30, 0x58	; 88
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	81 60       	ori	r24, 0x01	; 1
    12ec:	80 83       	st	Z, r24
	TIM0_TIMSK_REG->TOIE0=0;
    12ee:	e9 e5       	ldi	r30, 0x59	; 89
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	8e 7f       	andi	r24, 0xFE	; 254
    12f6:	80 83       	st	Z, r24
    12f8:	0e c0       	rjmp	.+28     	; 0x1316 <delay_ms+0x48>

	while(msec--)
	{
		TIM0_setPreload(6);
    12fa:	86 e0       	ldi	r24, 0x06	; 6
    12fc:	0e 94 1c 09 	call	0x1238	; 0x1238 <TIM0_setPreload>
		while(TIM0_TIFR_REG->TOV0 != 1);
    1300:	e8 e5       	ldi	r30, 0x58	; 88
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	81 70       	andi	r24, 0x01	; 1
    1308:	88 23       	and	r24, r24
    130a:	d1 f3       	breq	.-12     	; 0x1300 <delay_ms+0x32>
		TIM0_TIFR_REG->TOV0=1;
    130c:	e8 e5       	ldi	r30, 0x58	; 88
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	81 60       	ori	r24, 0x01	; 1
    1314:	80 83       	st	Z, r24
void delay_ms(uint32 msec)
{
	TIM0_TIFR_REG->TOV0=1;
	TIM0_TIMSK_REG->TOIE0=0;

	while(msec--)
    1316:	1d 82       	std	Y+5, r1	; 0x05
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	9a 81       	ldd	r25, Y+2	; 0x02
    131c:	ab 81       	ldd	r26, Y+3	; 0x03
    131e:	bc 81       	ldd	r27, Y+4	; 0x04
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	a1 05       	cpc	r26, r1
    1324:	b1 05       	cpc	r27, r1
    1326:	11 f0       	breq	.+4      	; 0x132c <delay_ms+0x5e>
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	8d 83       	std	Y+5, r24	; 0x05
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	9a 81       	ldd	r25, Y+2	; 0x02
    1330:	ab 81       	ldd	r26, Y+3	; 0x03
    1332:	bc 81       	ldd	r27, Y+4	; 0x04
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	a1 09       	sbc	r26, r1
    1338:	b1 09       	sbc	r27, r1
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	9a 83       	std	Y+2, r25	; 0x02
    133e:	ab 83       	std	Y+3, r26	; 0x03
    1340:	bc 83       	std	Y+4, r27	; 0x04
    1342:	8d 81       	ldd	r24, Y+5	; 0x05
    1344:	88 23       	and	r24, r24
    1346:	c9 f6       	brne	.-78     	; 0x12fa <delay_ms+0x2c>

	}



}
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <TIM0_EnableOVFInterrupt>:
void TIM0_EnableOVFInterrupt(void(*CallbackFunction)(void))
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	00 d0       	rcall	.+0      	; 0x135e <TIM0_EnableOVFInterrupt+0x6>
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	9a 83       	std	Y+2, r25	; 0x02
    1364:	89 83       	std	Y+1, r24	; 0x01
	TIM0_TIFR_REG->TOV0=1;
    1366:	e8 e5       	ldi	r30, 0x58	; 88
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	81 60       	ori	r24, 0x01	; 1
    136e:	80 83       	st	Z, r24
	TIM0_TIMSK_REG->TOIE0=1;
    1370:	e9 e5       	ldi	r30, 0x59	; 89
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	81 60       	ori	r24, 0x01	; 1
    1378:	80 83       	st	Z, r24
	if(CallbackFunction !=NULL)
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	9a 81       	ldd	r25, Y+2	; 0x02
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	31 f0       	breq	.+12     	; 0x138e <TIM0_EnableOVFInterrupt+0x36>
	{
		TIM0_callBackOV_ptr=CallbackFunction;
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	9a 81       	ldd	r25, Y+2	; 0x02
    1386:	90 93 7f 00 	sts	0x007F, r25
    138a:	80 93 7e 00 	sts	0x007E, r24
	}

}
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <TIM0_EnableCOMInterrupt>:
void TIM0_EnableCOMInterrupt(void(*CallbackFunction)(void))
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	00 d0       	rcall	.+0      	; 0x139e <TIM0_EnableCOMInterrupt+0x6>
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	9a 83       	std	Y+2, r25	; 0x02
    13a4:	89 83       	std	Y+1, r24	; 0x01
	TIM0_TIFR_REG->OCF0=1;
    13a6:	e8 e5       	ldi	r30, 0x58	; 88
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	82 60       	ori	r24, 0x02	; 2
    13ae:	80 83       	st	Z, r24
	TIM0_TIMSK_REG->OCIE0=1;
    13b0:	e9 e5       	ldi	r30, 0x59	; 89
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	82 60       	ori	r24, 0x02	; 2
    13b8:	80 83       	st	Z, r24
	if(CallbackFunction !=NULL)
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	9a 81       	ldd	r25, Y+2	; 0x02
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	31 f0       	breq	.+12     	; 0x13ce <TIM0_EnableCOMInterrupt+0x36>
	{
		TIM0_callBackCOMP_ptr=CallbackFunction;
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	9a 81       	ldd	r25, Y+2	; 0x02
    13c6:	90 93 81 00 	sts	0x0081, r25
    13ca:	80 93 80 00 	sts	0x0080, r24
	}

}
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <__vector_11>:
void __vector_11(void)	__attribute__((signal, used));
void __vector_11(void)
{
    13d8:	1f 92       	push	r1
    13da:	0f 92       	push	r0
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	0f 92       	push	r0
    13e0:	11 24       	eor	r1, r1
    13e2:	2f 93       	push	r18
    13e4:	3f 93       	push	r19
    13e6:	4f 93       	push	r20
    13e8:	5f 93       	push	r21
    13ea:	6f 93       	push	r22
    13ec:	7f 93       	push	r23
    13ee:	8f 93       	push	r24
    13f0:	9f 93       	push	r25
    13f2:	af 93       	push	r26
    13f4:	bf 93       	push	r27
    13f6:	ef 93       	push	r30
    13f8:	ff 93       	push	r31
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
	if(TIM0_callBackOV_ptr != NULL)
    1402:	80 91 7e 00 	lds	r24, 0x007E
    1406:	90 91 7f 00 	lds	r25, 0x007F
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	29 f0       	breq	.+10     	; 0x1418 <__vector_11+0x40>
	{
		TIM0_callBackOV_ptr();
    140e:	e0 91 7e 00 	lds	r30, 0x007E
    1412:	f0 91 7f 00 	lds	r31, 0x007F
    1416:	09 95       	icall
	}
}
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	ff 91       	pop	r31
    141e:	ef 91       	pop	r30
    1420:	bf 91       	pop	r27
    1422:	af 91       	pop	r26
    1424:	9f 91       	pop	r25
    1426:	8f 91       	pop	r24
    1428:	7f 91       	pop	r23
    142a:	6f 91       	pop	r22
    142c:	5f 91       	pop	r21
    142e:	4f 91       	pop	r20
    1430:	3f 91       	pop	r19
    1432:	2f 91       	pop	r18
    1434:	0f 90       	pop	r0
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	0f 90       	pop	r0
    143a:	1f 90       	pop	r1
    143c:	18 95       	reti

0000143e <GPIO_SetupPin_Direction>:
#include "GPIO_Config.h"
#include "GPIO_Private.h"


void GPIO_SetupPin_Direction(uint8 port_id,uint8 pin_num,GPIO_PinDirection direction)
{
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	00 d0       	rcall	.+0      	; 0x1444 <GPIO_SetupPin_Direction+0x6>
    1444:	00 d0       	rcall	.+0      	; 0x1446 <GPIO_SetupPin_Direction+0x8>
    1446:	0f 92       	push	r0
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	89 83       	std	Y+1, r24	; 0x01
    144e:	6a 83       	std	Y+2, r22	; 0x02
    1450:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num > NUM_OF_PINS || port_id > NUM_OF_PORTS)
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	89 30       	cpi	r24, 0x09	; 9
    1456:	08 f0       	brcs	.+2      	; 0x145a <GPIO_SetupPin_Direction+0x1c>
    1458:	e4 c0       	rjmp	.+456    	; 0x1622 <GPIO_SetupPin_Direction+0x1e4>
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	85 30       	cpi	r24, 0x05	; 5
    145e:	08 f0       	brcs	.+2      	; 0x1462 <GPIO_SetupPin_Direction+0x24>
    1460:	e0 c0       	rjmp	.+448    	; 0x1622 <GPIO_SetupPin_Direction+0x1e4>
	}
	else
	{


		switch(port_id)
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	3d 83       	std	Y+5, r19	; 0x05
    146a:	2c 83       	std	Y+4, r18	; 0x04
    146c:	8c 81       	ldd	r24, Y+4	; 0x04
    146e:	9d 81       	ldd	r25, Y+5	; 0x05
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	91 05       	cpc	r25, r1
    1474:	09 f4       	brne	.+2      	; 0x1478 <GPIO_SetupPin_Direction+0x3a>
    1476:	47 c0       	rjmp	.+142    	; 0x1506 <GPIO_SetupPin_Direction+0xc8>
    1478:	2c 81       	ldd	r18, Y+4	; 0x04
    147a:	3d 81       	ldd	r19, Y+5	; 0x05
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	31 05       	cpc	r19, r1
    1480:	2c f4       	brge	.+10     	; 0x148c <GPIO_SetupPin_Direction+0x4e>
    1482:	8c 81       	ldd	r24, Y+4	; 0x04
    1484:	9d 81       	ldd	r25, Y+5	; 0x05
    1486:	00 97       	sbiw	r24, 0x00	; 0
    1488:	71 f0       	breq	.+28     	; 0x14a6 <GPIO_SetupPin_Direction+0x68>
    148a:	cb c0       	rjmp	.+406    	; 0x1622 <GPIO_SetupPin_Direction+0x1e4>
    148c:	2c 81       	ldd	r18, Y+4	; 0x04
    148e:	3d 81       	ldd	r19, Y+5	; 0x05
    1490:	22 30       	cpi	r18, 0x02	; 2
    1492:	31 05       	cpc	r19, r1
    1494:	09 f4       	brne	.+2      	; 0x1498 <GPIO_SetupPin_Direction+0x5a>
    1496:	67 c0       	rjmp	.+206    	; 0x1566 <GPIO_SetupPin_Direction+0x128>
    1498:	8c 81       	ldd	r24, Y+4	; 0x04
    149a:	9d 81       	ldd	r25, Y+5	; 0x05
    149c:	83 30       	cpi	r24, 0x03	; 3
    149e:	91 05       	cpc	r25, r1
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <GPIO_SetupPin_Direction+0x66>
    14a2:	91 c0       	rjmp	.+290    	; 0x15c6 <GPIO_SetupPin_Direction+0x188>
    14a4:	be c0       	rjmp	.+380    	; 0x1622 <GPIO_SetupPin_Direction+0x1e4>
		{
			case PORTA_ID:
				if(direction==PIN_INPUT)
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	88 23       	and	r24, r24
    14aa:	a9 f4       	brne	.+42     	; 0x14d6 <GPIO_SetupPin_Direction+0x98>
				{

					CLEAR_BIT(DDRA,pin_num);
    14ac:	aa e3       	ldi	r26, 0x3A	; 58
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	ea e3       	ldi	r30, 0x3A	; 58
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <GPIO_SetupPin_Direction+0x8c>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <GPIO_SetupPin_Direction+0x88>
    14ce:	80 95       	com	r24
    14d0:	84 23       	and	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	a6 c0       	rjmp	.+332    	; 0x1622 <GPIO_SetupPin_Direction+0x1e4>
				}
				else if(direction==PIN_OUTPUT)
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	09 f0       	breq	.+2      	; 0x14de <GPIO_SetupPin_Direction+0xa0>
    14dc:	a2 c0       	rjmp	.+324    	; 0x1622 <GPIO_SetupPin_Direction+0x1e4>
				{
					SET_BIT(DDRA,pin_num);
    14de:	aa e3       	ldi	r26, 0x3A	; 58
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	ea e3       	ldi	r30, 0x3A	; 58
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	48 2f       	mov	r20, r24
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	02 2e       	mov	r0, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <GPIO_SetupPin_Direction+0xbe>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	0a 94       	dec	r0
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <GPIO_SetupPin_Direction+0xba>
    1500:	84 2b       	or	r24, r20
    1502:	8c 93       	st	X, r24
    1504:	8e c0       	rjmp	.+284    	; 0x1622 <GPIO_SetupPin_Direction+0x1e4>
				}
				break;
			case PORTB_ID:
				if(direction==PIN_INPUT)
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	88 23       	and	r24, r24
    150a:	a9 f4       	brne	.+42     	; 0x1536 <GPIO_SetupPin_Direction+0xf8>
				{
					CLEAR_BIT(DDRB,pin_num);
    150c:	a7 e3       	ldi	r26, 0x37	; 55
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e7 e3       	ldi	r30, 0x37	; 55
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	48 2f       	mov	r20, r24
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 2e       	mov	r0, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <GPIO_SetupPin_Direction+0xec>
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <GPIO_SetupPin_Direction+0xe8>
    152e:	80 95       	com	r24
    1530:	84 23       	and	r24, r20
    1532:	8c 93       	st	X, r24
    1534:	76 c0       	rjmp	.+236    	; 0x1622 <GPIO_SetupPin_Direction+0x1e4>
				}
				else if(direction==PIN_OUTPUT)
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	09 f0       	breq	.+2      	; 0x153e <GPIO_SetupPin_Direction+0x100>
    153c:	72 c0       	rjmp	.+228    	; 0x1622 <GPIO_SetupPin_Direction+0x1e4>
				{
					SET_BIT(DDRB,pin_num);
    153e:	a7 e3       	ldi	r26, 0x37	; 55
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e7 e3       	ldi	r30, 0x37	; 55
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	48 2f       	mov	r20, r24
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 2e       	mov	r0, r18
    1556:	02 c0       	rjmp	.+4      	; 0x155c <GPIO_SetupPin_Direction+0x11e>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	0a 94       	dec	r0
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <GPIO_SetupPin_Direction+0x11a>
    1560:	84 2b       	or	r24, r20
    1562:	8c 93       	st	X, r24
    1564:	5e c0       	rjmp	.+188    	; 0x1622 <GPIO_SetupPin_Direction+0x1e4>
				}
				break;
			case PORTC_ID:
				if(direction==PIN_INPUT)
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	88 23       	and	r24, r24
    156a:	a9 f4       	brne	.+42     	; 0x1596 <GPIO_SetupPin_Direction+0x158>
				{
					CLEAR_BIT(DDRC,pin_num);
    156c:	a4 e3       	ldi	r26, 0x34	; 52
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e4 e3       	ldi	r30, 0x34	; 52
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 2e       	mov	r0, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <GPIO_SetupPin_Direction+0x14c>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <GPIO_SetupPin_Direction+0x148>
    158e:	80 95       	com	r24
    1590:	84 23       	and	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	46 c0       	rjmp	.+140    	; 0x1622 <GPIO_SetupPin_Direction+0x1e4>
				}
				else if(direction==PIN_OUTPUT)
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	81 30       	cpi	r24, 0x01	; 1
    159a:	09 f0       	breq	.+2      	; 0x159e <GPIO_SetupPin_Direction+0x160>
    159c:	42 c0       	rjmp	.+132    	; 0x1622 <GPIO_SetupPin_Direction+0x1e4>
				{
					SET_BIT(DDRC,pin_num);
    159e:	a4 e3       	ldi	r26, 0x34	; 52
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e4 e3       	ldi	r30, 0x34	; 52
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	48 2f       	mov	r20, r24
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	02 2e       	mov	r0, r18
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <GPIO_SetupPin_Direction+0x17e>
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	0a 94       	dec	r0
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <GPIO_SetupPin_Direction+0x17a>
    15c0:	84 2b       	or	r24, r20
    15c2:	8c 93       	st	X, r24
    15c4:	2e c0       	rjmp	.+92     	; 0x1622 <GPIO_SetupPin_Direction+0x1e4>
				}
				break;
			case PORTD_ID:
				if(direction==PIN_INPUT)
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	88 23       	and	r24, r24
    15ca:	a9 f4       	brne	.+42     	; 0x15f6 <GPIO_SetupPin_Direction+0x1b8>
				{
					CLEAR_BIT(DDRD,pin_num);
    15cc:	a1 e3       	ldi	r26, 0x31	; 49
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e1 e3       	ldi	r30, 0x31	; 49
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <GPIO_SetupPin_Direction+0x1ac>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <GPIO_SetupPin_Direction+0x1a8>
    15ee:	80 95       	com	r24
    15f0:	84 23       	and	r24, r20
    15f2:	8c 93       	st	X, r24
    15f4:	16 c0       	rjmp	.+44     	; 0x1622 <GPIO_SetupPin_Direction+0x1e4>
				}
				else if(direction==PIN_OUTPUT)
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	99 f4       	brne	.+38     	; 0x1622 <GPIO_SetupPin_Direction+0x1e4>
				{
					SET_BIT(DDRD,pin_num);
    15fc:	a1 e3       	ldi	r26, 0x31	; 49
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e1 e3       	ldi	r30, 0x31	; 49
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	48 2f       	mov	r20, r24
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 2e       	mov	r0, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <GPIO_SetupPin_Direction+0x1dc>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <GPIO_SetupPin_Direction+0x1d8>
    161e:	84 2b       	or	r24, r20
    1620:	8c 93       	st	X, r24
				}
				break;

			}
	}
}
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <GPIO_SetupPort_Direction>:
void GPIO_SetupPort_Direction(uint8 port_id,GPIO_PortDirection direction)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	00 d0       	rcall	.+0      	; 0x1638 <GPIO_SetupPort_Direction+0x6>
    1638:	00 d0       	rcall	.+0      	; 0x163a <GPIO_SetupPort_Direction+0x8>
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	6a 83       	std	Y+2, r22	; 0x02
	if(port_id > NUM_OF_PORTS)
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	85 30       	cpi	r24, 0x05	; 5
    1646:	08 f0       	brcs	.+2      	; 0x164a <GPIO_SetupPort_Direction+0x18>
    1648:	5a c0       	rjmp	.+180    	; 0x16fe <GPIO_SetupPort_Direction+0xcc>
	{

	}
	else
	{
		switch(port_id)
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	3c 83       	std	Y+4, r19	; 0x04
    1652:	2b 83       	std	Y+3, r18	; 0x03
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	9c 81       	ldd	r25, Y+4	; 0x04
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	91 05       	cpc	r25, r1
    165c:	21 f1       	breq	.+72     	; 0x16a6 <GPIO_SetupPort_Direction+0x74>
    165e:	2b 81       	ldd	r18, Y+3	; 0x03
    1660:	3c 81       	ldd	r19, Y+4	; 0x04
    1662:	22 30       	cpi	r18, 0x02	; 2
    1664:	31 05       	cpc	r19, r1
    1666:	2c f4       	brge	.+10     	; 0x1672 <GPIO_SetupPort_Direction+0x40>
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	61 f0       	breq	.+24     	; 0x1688 <GPIO_SetupPort_Direction+0x56>
    1670:	46 c0       	rjmp	.+140    	; 0x16fe <GPIO_SetupPort_Direction+0xcc>
    1672:	2b 81       	ldd	r18, Y+3	; 0x03
    1674:	3c 81       	ldd	r19, Y+4	; 0x04
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	21 f1       	breq	.+72     	; 0x16c4 <GPIO_SetupPort_Direction+0x92>
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	83 30       	cpi	r24, 0x03	; 3
    1682:	91 05       	cpc	r25, r1
    1684:	71 f1       	breq	.+92     	; 0x16e2 <GPIO_SetupPort_Direction+0xb0>
    1686:	3b c0       	rjmp	.+118    	; 0x16fe <GPIO_SetupPort_Direction+0xcc>
			{
			case PORTA_ID:
				if(direction==Port_INPUT)
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	88 23       	and	r24, r24
    168c:	21 f4       	brne	.+8      	; 0x1696 <GPIO_SetupPort_Direction+0x64>
				{

					CLEAR_BYTE(DDRA);
    168e:	ea e3       	ldi	r30, 0x3A	; 58
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	10 82       	st	Z, r1
    1694:	34 c0       	rjmp	.+104    	; 0x16fe <GPIO_SetupPort_Direction+0xcc>
				}
				else if(direction==port_OUTPUT)
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	89 f5       	brne	.+98     	; 0x16fe <GPIO_SetupPort_Direction+0xcc>
				{
					SET_BYTE(DDRA,0xFF);
    169c:	ea e3       	ldi	r30, 0x3A	; 58
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	8f ef       	ldi	r24, 0xFF	; 255
    16a2:	80 83       	st	Z, r24
    16a4:	2c c0       	rjmp	.+88     	; 0x16fe <GPIO_SetupPort_Direction+0xcc>
				}
				break;
			case PORTB_ID:
				if(direction==Port_INPUT)
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	88 23       	and	r24, r24
    16aa:	21 f4       	brne	.+8      	; 0x16b4 <GPIO_SetupPort_Direction+0x82>
				{

					CLEAR_BYTE(DDRB);
    16ac:	e7 e3       	ldi	r30, 0x37	; 55
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	10 82       	st	Z, r1
    16b2:	25 c0       	rjmp	.+74     	; 0x16fe <GPIO_SetupPort_Direction+0xcc>
				}
				else if(direction==port_OUTPUT)
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	11 f5       	brne	.+68     	; 0x16fe <GPIO_SetupPort_Direction+0xcc>
				{
					SET_BYTE(DDRB,0xFF);
    16ba:	e7 e3       	ldi	r30, 0x37	; 55
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	8f ef       	ldi	r24, 0xFF	; 255
    16c0:	80 83       	st	Z, r24
    16c2:	1d c0       	rjmp	.+58     	; 0x16fe <GPIO_SetupPort_Direction+0xcc>
				}
				break;
			case PORTC_ID:
				if(direction==Port_INPUT)
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	88 23       	and	r24, r24
    16c8:	21 f4       	brne	.+8      	; 0x16d2 <GPIO_SetupPort_Direction+0xa0>
				{

					CLEAR_BYTE(DDRC);
    16ca:	e4 e3       	ldi	r30, 0x34	; 52
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	10 82       	st	Z, r1
    16d0:	16 c0       	rjmp	.+44     	; 0x16fe <GPIO_SetupPort_Direction+0xcc>
				}
				else if(direction==port_OUTPUT)
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	99 f4       	brne	.+38     	; 0x16fe <GPIO_SetupPort_Direction+0xcc>
				{
					SET_BYTE(DDRC,0xFF);
    16d8:	e4 e3       	ldi	r30, 0x34	; 52
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
    16de:	80 83       	st	Z, r24
    16e0:	0e c0       	rjmp	.+28     	; 0x16fe <GPIO_SetupPort_Direction+0xcc>
				}
				break;
			case PORTD_ID:
				if(direction==Port_INPUT)
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	88 23       	and	r24, r24
    16e6:	21 f4       	brne	.+8      	; 0x16f0 <GPIO_SetupPort_Direction+0xbe>
				{

					CLEAR_BYTE(DDRD);
    16e8:	e1 e3       	ldi	r30, 0x31	; 49
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	10 82       	st	Z, r1
    16ee:	07 c0       	rjmp	.+14     	; 0x16fe <GPIO_SetupPort_Direction+0xcc>
				}
				else if(direction==port_OUTPUT)
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	21 f4       	brne	.+8      	; 0x16fe <GPIO_SetupPort_Direction+0xcc>
				{
					SET_BYTE(DDRD,0xFF);
    16f6:	e1 e3       	ldi	r30, 0x31	; 49
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	8f ef       	ldi	r24, 0xFF	; 255
    16fc:	80 83       	st	Z, r24
				}
				break;

			}
	}
}
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <GPIO_SetupPin_Value>:

void GPIO_SetupPin_Value(uint8 port_id,uint8 pin_num,uint8 pin_value)
{
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	00 d0       	rcall	.+0      	; 0x1712 <GPIO_SetupPin_Value+0x6>
    1712:	00 d0       	rcall	.+0      	; 0x1714 <GPIO_SetupPin_Value+0x8>
    1714:	0f 92       	push	r0
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	89 83       	std	Y+1, r24	; 0x01
    171c:	6a 83       	std	Y+2, r22	; 0x02
    171e:	4b 83       	std	Y+3, r20	; 0x03

		switch(port_id)
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	3d 83       	std	Y+5, r19	; 0x05
    1728:	2c 83       	std	Y+4, r18	; 0x04
    172a:	8c 81       	ldd	r24, Y+4	; 0x04
    172c:	9d 81       	ldd	r25, Y+5	; 0x05
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	91 05       	cpc	r25, r1
    1732:	09 f4       	brne	.+2      	; 0x1736 <GPIO_SetupPin_Value+0x2a>
    1734:	47 c0       	rjmp	.+142    	; 0x17c4 <GPIO_SetupPin_Value+0xb8>
    1736:	2c 81       	ldd	r18, Y+4	; 0x04
    1738:	3d 81       	ldd	r19, Y+5	; 0x05
    173a:	22 30       	cpi	r18, 0x02	; 2
    173c:	31 05       	cpc	r19, r1
    173e:	2c f4       	brge	.+10     	; 0x174a <GPIO_SetupPin_Value+0x3e>
    1740:	8c 81       	ldd	r24, Y+4	; 0x04
    1742:	9d 81       	ldd	r25, Y+5	; 0x05
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	71 f0       	breq	.+28     	; 0x1764 <GPIO_SetupPin_Value+0x58>
    1748:	cb c0       	rjmp	.+406    	; 0x18e0 <GPIO_SetupPin_Value+0x1d4>
    174a:	2c 81       	ldd	r18, Y+4	; 0x04
    174c:	3d 81       	ldd	r19, Y+5	; 0x05
    174e:	22 30       	cpi	r18, 0x02	; 2
    1750:	31 05       	cpc	r19, r1
    1752:	09 f4       	brne	.+2      	; 0x1756 <GPIO_SetupPin_Value+0x4a>
    1754:	67 c0       	rjmp	.+206    	; 0x1824 <GPIO_SetupPin_Value+0x118>
    1756:	8c 81       	ldd	r24, Y+4	; 0x04
    1758:	9d 81       	ldd	r25, Y+5	; 0x05
    175a:	83 30       	cpi	r24, 0x03	; 3
    175c:	91 05       	cpc	r25, r1
    175e:	09 f4       	brne	.+2      	; 0x1762 <GPIO_SetupPin_Value+0x56>
    1760:	91 c0       	rjmp	.+290    	; 0x1884 <GPIO_SetupPin_Value+0x178>
    1762:	be c0       	rjmp	.+380    	; 0x18e0 <GPIO_SetupPin_Value+0x1d4>
			{
			case PORTA_ID:
				if(pin_value ==LOGIC_LOW)
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	88 23       	and	r24, r24
    1768:	a9 f4       	brne	.+42     	; 0x1794 <GPIO_SetupPin_Value+0x88>
				{
					CLEAR_BIT(PORTA,pin_num);
    176a:	ab e3       	ldi	r26, 0x3B	; 59
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	eb e3       	ldi	r30, 0x3B	; 59
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	48 2f       	mov	r20, r24
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	02 2e       	mov	r0, r18
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <GPIO_SetupPin_Value+0x7c>
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	0a 94       	dec	r0
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <GPIO_SetupPin_Value+0x78>
    178c:	80 95       	com	r24
    178e:	84 23       	and	r24, r20
    1790:	8c 93       	st	X, r24
    1792:	a6 c0       	rjmp	.+332    	; 0x18e0 <GPIO_SetupPin_Value+0x1d4>
				}
				else if(pin_value == LOGIC_HIGH)
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	81 30       	cpi	r24, 0x01	; 1
    1798:	09 f0       	breq	.+2      	; 0x179c <GPIO_SetupPin_Value+0x90>
    179a:	a2 c0       	rjmp	.+324    	; 0x18e0 <GPIO_SetupPin_Value+0x1d4>
				{
					SET_BIT(PORTA,pin_num);
    179c:	ab e3       	ldi	r26, 0x3B	; 59
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	eb e3       	ldi	r30, 0x3B	; 59
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	48 2f       	mov	r20, r24
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	02 2e       	mov	r0, r18
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <GPIO_SetupPin_Value+0xae>
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	0a 94       	dec	r0
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <GPIO_SetupPin_Value+0xaa>
    17be:	84 2b       	or	r24, r20
    17c0:	8c 93       	st	X, r24
    17c2:	8e c0       	rjmp	.+284    	; 0x18e0 <GPIO_SetupPin_Value+0x1d4>
				}

				break;
			case PORTB_ID:
				if(pin_value ==LOGIC_LOW)
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	88 23       	and	r24, r24
    17c8:	a9 f4       	brne	.+42     	; 0x17f4 <GPIO_SetupPin_Value+0xe8>
				{
					CLEAR_BIT(PORTB,pin_num);
    17ca:	a8 e3       	ldi	r26, 0x38	; 56
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e8 e3       	ldi	r30, 0x38	; 56
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	48 2f       	mov	r20, r24
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <GPIO_SetupPin_Value+0xdc>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <GPIO_SetupPin_Value+0xd8>
    17ec:	80 95       	com	r24
    17ee:	84 23       	and	r24, r20
    17f0:	8c 93       	st	X, r24
    17f2:	76 c0       	rjmp	.+236    	; 0x18e0 <GPIO_SetupPin_Value+0x1d4>
				}
				else if(pin_value == LOGIC_HIGH)
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	81 30       	cpi	r24, 0x01	; 1
    17f8:	09 f0       	breq	.+2      	; 0x17fc <GPIO_SetupPin_Value+0xf0>
    17fa:	72 c0       	rjmp	.+228    	; 0x18e0 <GPIO_SetupPin_Value+0x1d4>
				{
					SET_BIT(PORTB,pin_num);
    17fc:	a8 e3       	ldi	r26, 0x38	; 56
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e8 e3       	ldi	r30, 0x38	; 56
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	48 2f       	mov	r20, r24
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	02 2e       	mov	r0, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <GPIO_SetupPin_Value+0x10e>
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	0a 94       	dec	r0
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <GPIO_SetupPin_Value+0x10a>
    181e:	84 2b       	or	r24, r20
    1820:	8c 93       	st	X, r24
    1822:	5e c0       	rjmp	.+188    	; 0x18e0 <GPIO_SetupPin_Value+0x1d4>
				}
				break;
			case PORTC_ID:
				if(pin_value ==LOGIC_LOW)
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	88 23       	and	r24, r24
    1828:	a9 f4       	brne	.+42     	; 0x1854 <GPIO_SetupPin_Value+0x148>
				{
					CLEAR_BIT(PORTC,pin_num);
    182a:	a5 e3       	ldi	r26, 0x35	; 53
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e5 e3       	ldi	r30, 0x35	; 53
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	48 2f       	mov	r20, r24
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 2e       	mov	r0, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <GPIO_SetupPin_Value+0x13c>
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	0a 94       	dec	r0
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <GPIO_SetupPin_Value+0x138>
    184c:	80 95       	com	r24
    184e:	84 23       	and	r24, r20
    1850:	8c 93       	st	X, r24
    1852:	46 c0       	rjmp	.+140    	; 0x18e0 <GPIO_SetupPin_Value+0x1d4>
				}
				else if(pin_value == LOGIC_HIGH)
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	09 f0       	breq	.+2      	; 0x185c <GPIO_SetupPin_Value+0x150>
    185a:	42 c0       	rjmp	.+132    	; 0x18e0 <GPIO_SetupPin_Value+0x1d4>
				{
					SET_BIT(PORTC,pin_num);
    185c:	a5 e3       	ldi	r26, 0x35	; 53
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e5 e3       	ldi	r30, 0x35	; 53
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	48 2f       	mov	r20, r24
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	02 2e       	mov	r0, r18
    1874:	02 c0       	rjmp	.+4      	; 0x187a <GPIO_SetupPin_Value+0x16e>
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	0a 94       	dec	r0
    187c:	e2 f7       	brpl	.-8      	; 0x1876 <GPIO_SetupPin_Value+0x16a>
    187e:	84 2b       	or	r24, r20
    1880:	8c 93       	st	X, r24
    1882:	2e c0       	rjmp	.+92     	; 0x18e0 <GPIO_SetupPin_Value+0x1d4>
				}
				break;
			case PORTD_ID:
				if(pin_value ==LOGIC_LOW)
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	88 23       	and	r24, r24
    1888:	a9 f4       	brne	.+42     	; 0x18b4 <GPIO_SetupPin_Value+0x1a8>
				{
					CLEAR_BIT(PORTD,pin_num);
    188a:	a2 e3       	ldi	r26, 0x32	; 50
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e2 e3       	ldi	r30, 0x32	; 50
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	48 2f       	mov	r20, r24
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	02 2e       	mov	r0, r18
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <GPIO_SetupPin_Value+0x19c>
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	0a 94       	dec	r0
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <GPIO_SetupPin_Value+0x198>
    18ac:	80 95       	com	r24
    18ae:	84 23       	and	r24, r20
    18b0:	8c 93       	st	X, r24
    18b2:	16 c0       	rjmp	.+44     	; 0x18e0 <GPIO_SetupPin_Value+0x1d4>
				}
				else if(pin_value == LOGIC_HIGH)
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	81 30       	cpi	r24, 0x01	; 1
    18b8:	99 f4       	brne	.+38     	; 0x18e0 <GPIO_SetupPin_Value+0x1d4>
				{
					SET_BIT(PORTD,pin_num);
    18ba:	a2 e3       	ldi	r26, 0x32	; 50
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e2 e3       	ldi	r30, 0x32	; 50
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	48 2f       	mov	r20, r24
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	02 2e       	mov	r0, r18
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <GPIO_SetupPin_Value+0x1cc>
    18d4:	88 0f       	add	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	0a 94       	dec	r0
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <GPIO_SetupPin_Value+0x1c8>
    18dc:	84 2b       	or	r24, r20
    18de:	8c 93       	st	X, r24
				}
				break;

			}

}
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	08 95       	ret

000018f0 <GPIO_SetupPort_Value>:
void GPIO_SetupPort_Value(uint8 port_id,uint8 port_value)
{
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	00 d0       	rcall	.+0      	; 0x18f6 <GPIO_SetupPort_Value+0x6>
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <GPIO_SetupPort_Value+0x8>
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	89 83       	std	Y+1, r24	; 0x01
    18fe:	6a 83       	std	Y+2, r22	; 0x02
	if( port_id > NUM_OF_PORTS)
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	85 30       	cpi	r24, 0x05	; 5
    1904:	90 f5       	brcc	.+100    	; 0x196a <GPIO_SetupPort_Value+0x7a>
	}
	else
	{


		switch(port_id)
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	3c 83       	std	Y+4, r19	; 0x04
    190e:	2b 83       	std	Y+3, r18	; 0x03
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	9c 81       	ldd	r25, Y+4	; 0x04
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	91 05       	cpc	r25, r1
    1918:	d1 f0       	breq	.+52     	; 0x194e <GPIO_SetupPort_Value+0x5e>
    191a:	2b 81       	ldd	r18, Y+3	; 0x03
    191c:	3c 81       	ldd	r19, Y+4	; 0x04
    191e:	22 30       	cpi	r18, 0x02	; 2
    1920:	31 05       	cpc	r19, r1
    1922:	2c f4       	brge	.+10     	; 0x192e <GPIO_SetupPort_Value+0x3e>
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	9c 81       	ldd	r25, Y+4	; 0x04
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	61 f0       	breq	.+24     	; 0x1944 <GPIO_SetupPort_Value+0x54>
    192c:	1e c0       	rjmp	.+60     	; 0x196a <GPIO_SetupPort_Value+0x7a>
    192e:	2b 81       	ldd	r18, Y+3	; 0x03
    1930:	3c 81       	ldd	r19, Y+4	; 0x04
    1932:	22 30       	cpi	r18, 0x02	; 2
    1934:	31 05       	cpc	r19, r1
    1936:	81 f0       	breq	.+32     	; 0x1958 <GPIO_SetupPort_Value+0x68>
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	9c 81       	ldd	r25, Y+4	; 0x04
    193c:	83 30       	cpi	r24, 0x03	; 3
    193e:	91 05       	cpc	r25, r1
    1940:	81 f0       	breq	.+32     	; 0x1962 <GPIO_SetupPort_Value+0x72>
    1942:	13 c0       	rjmp	.+38     	; 0x196a <GPIO_SetupPort_Value+0x7a>
			{
			case PORTA_ID:
				PORTA=port_value;
    1944:	eb e3       	ldi	r30, 0x3B	; 59
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	80 83       	st	Z, r24
    194c:	0e c0       	rjmp	.+28     	; 0x196a <GPIO_SetupPort_Value+0x7a>

				break;
			case PORTB_ID:
				PORTB=port_value;
    194e:	e8 e3       	ldi	r30, 0x38	; 56
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	80 83       	st	Z, r24
    1956:	09 c0       	rjmp	.+18     	; 0x196a <GPIO_SetupPort_Value+0x7a>
				break;
			case PORTC_ID:
				PORTC=port_value;
    1958:	e5 e3       	ldi	r30, 0x35	; 53
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	80 83       	st	Z, r24
    1960:	04 c0       	rjmp	.+8      	; 0x196a <GPIO_SetupPort_Value+0x7a>
				break;
			case PORTD_ID:
				PORTD=port_value;
    1962:	e2 e3       	ldi	r30, 0x32	; 50
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	80 83       	st	Z, r24
				break;

			}
	}
}
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <GPIO_GetPin_Value>:
uint8 GPIO_GetPin_Value(uint8 port_id,uint8 pin_num)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	00 d0       	rcall	.+0      	; 0x197e <GPIO_GetPin_Value+0x6>
    197e:	00 d0       	rcall	.+0      	; 0x1980 <GPIO_GetPin_Value+0x8>
    1980:	0f 92       	push	r0
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	8a 83       	std	Y+2, r24	; 0x02
    1988:	6b 83       	std	Y+3, r22	; 0x03
	uint8 valu=0;
    198a:	19 82       	std	Y+1, r1	; 0x01
	if(pin_num > NUM_OF_PINS || port_id > NUM_OF_PORTS)
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	89 30       	cpi	r24, 0x09	; 9
    1990:	08 f0       	brcs	.+2      	; 0x1994 <GPIO_GetPin_Value+0x1c>
    1992:	6b c0       	rjmp	.+214    	; 0x1a6a <GPIO_GetPin_Value+0xf2>
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	85 30       	cpi	r24, 0x05	; 5
    1998:	08 f0       	brcs	.+2      	; 0x199c <GPIO_GetPin_Value+0x24>
    199a:	67 c0       	rjmp	.+206    	; 0x1a6a <GPIO_GetPin_Value+0xf2>

	}
   else
	{

	switch(port_id)
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	3d 83       	std	Y+5, r19	; 0x05
    19a4:	2c 83       	std	Y+4, r18	; 0x04
    19a6:	4c 81       	ldd	r20, Y+4	; 0x04
    19a8:	5d 81       	ldd	r21, Y+5	; 0x05
    19aa:	41 30       	cpi	r20, 0x01	; 1
    19ac:	51 05       	cpc	r21, r1
    19ae:	41 f1       	breq	.+80     	; 0x1a00 <GPIO_GetPin_Value+0x88>
    19b0:	8c 81       	ldd	r24, Y+4	; 0x04
    19b2:	9d 81       	ldd	r25, Y+5	; 0x05
    19b4:	82 30       	cpi	r24, 0x02	; 2
    19b6:	91 05       	cpc	r25, r1
    19b8:	34 f4       	brge	.+12     	; 0x19c6 <GPIO_GetPin_Value+0x4e>
    19ba:	2c 81       	ldd	r18, Y+4	; 0x04
    19bc:	3d 81       	ldd	r19, Y+5	; 0x05
    19be:	21 15       	cp	r18, r1
    19c0:	31 05       	cpc	r19, r1
    19c2:	61 f0       	breq	.+24     	; 0x19dc <GPIO_GetPin_Value+0x64>
    19c4:	52 c0       	rjmp	.+164    	; 0x1a6a <GPIO_GetPin_Value+0xf2>
    19c6:	4c 81       	ldd	r20, Y+4	; 0x04
    19c8:	5d 81       	ldd	r21, Y+5	; 0x05
    19ca:	42 30       	cpi	r20, 0x02	; 2
    19cc:	51 05       	cpc	r21, r1
    19ce:	51 f1       	breq	.+84     	; 0x1a24 <GPIO_GetPin_Value+0xac>
    19d0:	8c 81       	ldd	r24, Y+4	; 0x04
    19d2:	9d 81       	ldd	r25, Y+5	; 0x05
    19d4:	83 30       	cpi	r24, 0x03	; 3
    19d6:	91 05       	cpc	r25, r1
    19d8:	b9 f1       	breq	.+110    	; 0x1a48 <GPIO_GetPin_Value+0xd0>
    19da:	47 c0       	rjmp	.+142    	; 0x1a6a <GPIO_GetPin_Value+0xf2>
		{
		case PORTA_ID:
			valu=GET_BIT(PINA,pin_num);
    19dc:	e9 e3       	ldi	r30, 0x39	; 57
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	88 2f       	mov	r24, r24
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	a9 01       	movw	r20, r18
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <GPIO_GetPin_Value+0x7c>
    19f0:	55 95       	asr	r21
    19f2:	47 95       	ror	r20
    19f4:	8a 95       	dec	r24
    19f6:	e2 f7       	brpl	.-8      	; 0x19f0 <GPIO_GetPin_Value+0x78>
    19f8:	ca 01       	movw	r24, r20
    19fa:	81 70       	andi	r24, 0x01	; 1
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	35 c0       	rjmp	.+106    	; 0x1a6a <GPIO_GetPin_Value+0xf2>

			break;
		case PORTB_ID:
			valu= GET_BIT(PINB,pin_num);
    1a00:	e6 e3       	ldi	r30, 0x36	; 54
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	88 2f       	mov	r24, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	a9 01       	movw	r20, r18
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <GPIO_GetPin_Value+0xa0>
    1a14:	55 95       	asr	r21
    1a16:	47 95       	ror	r20
    1a18:	8a 95       	dec	r24
    1a1a:	e2 f7       	brpl	.-8      	; 0x1a14 <GPIO_GetPin_Value+0x9c>
    1a1c:	ca 01       	movw	r24, r20
    1a1e:	81 70       	andi	r24, 0x01	; 1
    1a20:	89 83       	std	Y+1, r24	; 0x01
    1a22:	23 c0       	rjmp	.+70     	; 0x1a6a <GPIO_GetPin_Value+0xf2>
			break;
		case PORTC_ID:
			valu= GET_BIT(PINC,pin_num);
    1a24:	e3 e3       	ldi	r30, 0x33	; 51
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	88 2f       	mov	r24, r24
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	a9 01       	movw	r20, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <GPIO_GetPin_Value+0xc4>
    1a38:	55 95       	asr	r21
    1a3a:	47 95       	ror	r20
    1a3c:	8a 95       	dec	r24
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <GPIO_GetPin_Value+0xc0>
    1a40:	ca 01       	movw	r24, r20
    1a42:	81 70       	andi	r24, 0x01	; 1
    1a44:	89 83       	std	Y+1, r24	; 0x01
    1a46:	11 c0       	rjmp	.+34     	; 0x1a6a <GPIO_GetPin_Value+0xf2>
			break;
		case PORTD_ID:
			valu= GET_BIT(PIND,pin_num);
    1a48:	e0 e3       	ldi	r30, 0x30	; 48
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	88 2f       	mov	r24, r24
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	a9 01       	movw	r20, r18
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <GPIO_GetPin_Value+0xe8>
    1a5c:	55 95       	asr	r21
    1a5e:	47 95       	ror	r20
    1a60:	8a 95       	dec	r24
    1a62:	e2 f7       	brpl	.-8      	; 0x1a5c <GPIO_GetPin_Value+0xe4>
    1a64:	ca 01       	movw	r24, r20
    1a66:	81 70       	andi	r24, 0x01	; 1
    1a68:	89 83       	std	Y+1, r24	; 0x01
			break;

		}

}
	return valu;
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <GPIO_GetPort_Value>:
uint8 GPIO_GetPort_Value(uint8 port_id)
{
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <GPIO_GetPort_Value+0x6>
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <GPIO_GetPort_Value+0x8>
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	8a 83       	std	Y+2, r24	; 0x02
	uint8 pin=0x00;
    1a8a:	19 82       	std	Y+1, r1	; 0x01
	if( port_id > NUM_OF_PORTS)
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	85 30       	cpi	r24, 0x05	; 5
    1a90:	90 f5       	brcc	.+100    	; 0x1af6 <GPIO_GetPort_Value+0x7a>

	}
	else
	{

		switch(port_id)
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	3c 83       	std	Y+4, r19	; 0x04
    1a9a:	2b 83       	std	Y+3, r18	; 0x03
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	91 05       	cpc	r25, r1
    1aa4:	d1 f0       	breq	.+52     	; 0x1ada <GPIO_GetPort_Value+0x5e>
    1aa6:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aaa:	22 30       	cpi	r18, 0x02	; 2
    1aac:	31 05       	cpc	r19, r1
    1aae:	2c f4       	brge	.+10     	; 0x1aba <GPIO_GetPort_Value+0x3e>
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab4:	00 97       	sbiw	r24, 0x00	; 0
    1ab6:	61 f0       	breq	.+24     	; 0x1ad0 <GPIO_GetPort_Value+0x54>
    1ab8:	1e c0       	rjmp	.+60     	; 0x1af6 <GPIO_GetPort_Value+0x7a>
    1aba:	2b 81       	ldd	r18, Y+3	; 0x03
    1abc:	3c 81       	ldd	r19, Y+4	; 0x04
    1abe:	22 30       	cpi	r18, 0x02	; 2
    1ac0:	31 05       	cpc	r19, r1
    1ac2:	81 f0       	breq	.+32     	; 0x1ae4 <GPIO_GetPort_Value+0x68>
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac8:	83 30       	cpi	r24, 0x03	; 3
    1aca:	91 05       	cpc	r25, r1
    1acc:	81 f0       	breq	.+32     	; 0x1aee <GPIO_GetPort_Value+0x72>
    1ace:	13 c0       	rjmp	.+38     	; 0x1af6 <GPIO_GetPort_Value+0x7a>
			{
			case PORTA_ID:
				pin= PINA;
    1ad0:	e9 e3       	ldi	r30, 0x39	; 57
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	0e c0       	rjmp	.+28     	; 0x1af6 <GPIO_GetPort_Value+0x7a>
				break;
			case PORTB_ID:
				pin= PINB;
    1ada:	e6 e3       	ldi	r30, 0x36	; 54
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	09 c0       	rjmp	.+18     	; 0x1af6 <GPIO_GetPort_Value+0x7a>
				break;
			case PORTC_ID:
				pin= PINC;
    1ae4:	e3 e3       	ldi	r30, 0x33	; 51
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	04 c0       	rjmp	.+8      	; 0x1af6 <GPIO_GetPort_Value+0x7a>
				break;
			case PORTD_ID:
				pin= PIND;
    1aee:	e0 e3       	ldi	r30, 0x30	; 48
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
	}
	return pin;
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <GPIO_TogglePin_Value>:
void GPIO_TogglePin_Value(uint8 port_id,uint8 pin_num)
{
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <GPIO_TogglePin_Value+0x6>
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <GPIO_TogglePin_Value+0x8>
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	89 83       	std	Y+1, r24	; 0x01
    1b14:	6a 83       	std	Y+2, r22	; 0x02
	if(pin_num > NUM_OF_PINS || port_id > NUM_OF_PORTS)
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	89 30       	cpi	r24, 0x09	; 9
    1b1a:	08 f0       	brcs	.+2      	; 0x1b1e <GPIO_TogglePin_Value+0x18>
    1b1c:	72 c0       	rjmp	.+228    	; 0x1c02 <GPIO_TogglePin_Value+0xfc>
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	85 30       	cpi	r24, 0x05	; 5
    1b22:	08 f0       	brcs	.+2      	; 0x1b26 <GPIO_TogglePin_Value+0x20>
    1b24:	6e c0       	rjmp	.+220    	; 0x1c02 <GPIO_TogglePin_Value+0xfc>
	{

	}
	else
	{
		switch(port_id)
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	3c 83       	std	Y+4, r19	; 0x04
    1b2e:	2b 83       	std	Y+3, r18	; 0x03
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	9c 81       	ldd	r25, Y+4	; 0x04
    1b34:	81 30       	cpi	r24, 0x01	; 1
    1b36:	91 05       	cpc	r25, r1
    1b38:	49 f1       	breq	.+82     	; 0x1b8c <GPIO_TogglePin_Value+0x86>
    1b3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3e:	22 30       	cpi	r18, 0x02	; 2
    1b40:	31 05       	cpc	r19, r1
    1b42:	2c f4       	brge	.+10     	; 0x1b4e <GPIO_TogglePin_Value+0x48>
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	9c 81       	ldd	r25, Y+4	; 0x04
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	61 f0       	breq	.+24     	; 0x1b64 <GPIO_TogglePin_Value+0x5e>
    1b4c:	5a c0       	rjmp	.+180    	; 0x1c02 <GPIO_TogglePin_Value+0xfc>
    1b4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b50:	3c 81       	ldd	r19, Y+4	; 0x04
    1b52:	22 30       	cpi	r18, 0x02	; 2
    1b54:	31 05       	cpc	r19, r1
    1b56:	71 f1       	breq	.+92     	; 0x1bb4 <GPIO_TogglePin_Value+0xae>
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	83 30       	cpi	r24, 0x03	; 3
    1b5e:	91 05       	cpc	r25, r1
    1b60:	e9 f1       	breq	.+122    	; 0x1bdc <GPIO_TogglePin_Value+0xd6>
    1b62:	4f c0       	rjmp	.+158    	; 0x1c02 <GPIO_TogglePin_Value+0xfc>
		{
			case PORTA_ID:
				TOGGLE_BIT(PORTA,pin_num);
    1b64:	ab e3       	ldi	r26, 0x3B	; 59
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	eb e3       	ldi	r30, 0x3B	; 59
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	48 2f       	mov	r20, r24
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	02 2e       	mov	r0, r18
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <GPIO_TogglePin_Value+0x7c>
    1b7e:	88 0f       	add	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	0a 94       	dec	r0
    1b84:	e2 f7       	brpl	.-8      	; 0x1b7e <GPIO_TogglePin_Value+0x78>
    1b86:	84 27       	eor	r24, r20
    1b88:	8c 93       	st	X, r24
    1b8a:	3b c0       	rjmp	.+118    	; 0x1c02 <GPIO_TogglePin_Value+0xfc>
				break;

			case PORTB_ID:
				TOGGLE_BIT(PORTB,pin_num);
    1b8c:	a8 e3       	ldi	r26, 0x38	; 56
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	e8 e3       	ldi	r30, 0x38	; 56
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	48 2f       	mov	r20, r24
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	28 2f       	mov	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	02 2e       	mov	r0, r18
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <GPIO_TogglePin_Value+0xa4>
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	0a 94       	dec	r0
    1bac:	e2 f7       	brpl	.-8      	; 0x1ba6 <GPIO_TogglePin_Value+0xa0>
    1bae:	84 27       	eor	r24, r20
    1bb0:	8c 93       	st	X, r24
    1bb2:	27 c0       	rjmp	.+78     	; 0x1c02 <GPIO_TogglePin_Value+0xfc>
				break;

			case PORTC_ID:
				TOGGLE_BIT(PORTC,pin_num);
    1bb4:	a5 e3       	ldi	r26, 0x35	; 53
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e5 e3       	ldi	r30, 0x35	; 53
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <GPIO_TogglePin_Value+0xcc>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <GPIO_TogglePin_Value+0xc8>
    1bd6:	84 27       	eor	r24, r20
    1bd8:	8c 93       	st	X, r24
    1bda:	13 c0       	rjmp	.+38     	; 0x1c02 <GPIO_TogglePin_Value+0xfc>
				break;

			case PORTD_ID:
				TOGGLE_BIT(PORTD,pin_num);
    1bdc:	a2 e3       	ldi	r26, 0x32	; 50
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e2 e3       	ldi	r30, 0x32	; 50
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	48 2f       	mov	r20, r24
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	02 2e       	mov	r0, r18
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <GPIO_TogglePin_Value+0xf4>
    1bf6:	88 0f       	add	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	0a 94       	dec	r0
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <GPIO_TogglePin_Value+0xf0>
    1bfe:	84 27       	eor	r24, r20
    1c00:	8c 93       	st	X, r24
				break;

			}
	}

}
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	cf 91       	pop	r28
    1c0c:	df 91       	pop	r29
    1c0e:	08 95       	ret

00001c10 <GINT_Enable>:
#include "GINT_Config.h"



void GINT_Enable()
{
    1c10:	df 93       	push	r29
    1c12:	cf 93       	push	r28
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,SREG_I_BIT);
    1c18:	af e5       	ldi	r26, 0x5F	; 95
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	ef e5       	ldi	r30, 0x5F	; 95
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	80 68       	ori	r24, 0x80	; 128
    1c24:	8c 93       	st	X, r24
}
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <GINT_Disable>:
void GINT_Disable()
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG_REG,SREG_I_BIT);
    1c34:	af e5       	ldi	r26, 0x5F	; 95
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	ef e5       	ldi	r30, 0x5F	; 95
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	8f 77       	andi	r24, 0x7F	; 127
    1c40:	8c 93       	st	X, r24
}
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <EXTI_initINT1>:
void (*callback_Ptr_INT0)(void)=NULL;
void (*callback_Ptr_INT1)(void)=NULL;
void (*callback_Ptr_INT2)(void)=NULL;

void EXTI_initINT1(interupt_sense_control control)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	0f 92       	push	r0
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	89 83       	std	Y+1, r24	; 0x01
	GPIO_SetupPin_Direction(PORTD_ID, EXINT1_PIN, PIN_INPUT);
    1c54:	83 e0       	ldi	r24, 0x03	; 3
    1c56:	63 e0       	ldi	r22, 0x03	; 3
    1c58:	40 e0       	ldi	r20, 0x00	; 0
    1c5a:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Value(PORTD_ID, EXINT1_PIN, LOGIC_HIGH);
    1c5e:	83 e0       	ldi	r24, 0x03	; 3
    1c60:	63 e0       	ldi	r22, 0x03	; 3
    1c62:	41 e0       	ldi	r20, 0x01	; 1
    1c64:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>

	if(control ==rising_edge)
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	79 f4       	brne	.+30     	; 0x1c8c <EXTI_initINT1+0x44>
	{
		SET_BIT(MCUCR_REG,MCUCR_ISC10);
    1c6e:	a5 e5       	ldi	r26, 0x55	; 85
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e5 e5       	ldi	r30, 0x55	; 85
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	84 60       	ori	r24, 0x04	; 4
    1c7a:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,MCUCR_ISC11);
    1c7c:	a5 e5       	ldi	r26, 0x55	; 85
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e5 e5       	ldi	r30, 0x55	; 85
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	88 60       	ori	r24, 0x08	; 8
    1c88:	8c 93       	st	X, r24
    1c8a:	11 c0       	rjmp	.+34     	; 0x1cae <EXTI_initINT1+0x66>
	}
	else if(control==falling_edge)
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	88 23       	and	r24, r24
    1c90:	71 f4       	brne	.+28     	; 0x1cae <EXTI_initINT1+0x66>
	{
		CLEAR_BIT(MCUCR_REG,MCUCR_ISC10);
    1c92:	a5 e5       	ldi	r26, 0x55	; 85
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e5 e5       	ldi	r30, 0x55	; 85
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	8b 7f       	andi	r24, 0xFB	; 251
    1c9e:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,MCUCR_ISC11);
    1ca0:	a5 e5       	ldi	r26, 0x55	; 85
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	e5 e5       	ldi	r30, 0x55	; 85
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	88 60       	ori	r24, 0x08	; 8
    1cac:	8c 93       	st	X, r24
	}
}
    1cae:	0f 90       	pop	r0
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <EXTI_initINT0>:
void EXTI_initINT0(interupt_sense_control control)
{
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	0f 92       	push	r0
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	89 83       	std	Y+1, r24	; 0x01
	GPIO_SetupPin_Direction(PORTD_ID, EXINT0_PIN, PIN_INPUT);
    1cc2:	83 e0       	ldi	r24, 0x03	; 3
    1cc4:	62 e0       	ldi	r22, 0x02	; 2
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Value(PORTD_ID, EXINT0_PIN, LOGIC_HIGH);
    1ccc:	83 e0       	ldi	r24, 0x03	; 3
    1cce:	62 e0       	ldi	r22, 0x02	; 2
    1cd0:	41 e0       	ldi	r20, 0x01	; 1
    1cd2:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
	if(control ==rising_edge)
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	79 f4       	brne	.+30     	; 0x1cfa <EXTI_initINT0+0x44>
	{
		SET_BIT(MCUCR_REG,MCUCR_ISC00);
    1cdc:	a5 e5       	ldi	r26, 0x55	; 85
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e5 e5       	ldi	r30, 0x55	; 85
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	81 60       	ori	r24, 0x01	; 1
    1ce8:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,MCUCR_ISC01);
    1cea:	a5 e5       	ldi	r26, 0x55	; 85
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	e5 e5       	ldi	r30, 0x55	; 85
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	82 60       	ori	r24, 0x02	; 2
    1cf6:	8c 93       	st	X, r24
    1cf8:	11 c0       	rjmp	.+34     	; 0x1d1c <EXTI_initINT0+0x66>

	}
	else if(control==falling_edge)
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	88 23       	and	r24, r24
    1cfe:	71 f4       	brne	.+28     	; 0x1d1c <EXTI_initINT0+0x66>
	{
		CLEAR_BIT(MCUCR_REG,MCUCR_ISC00);
    1d00:	a5 e5       	ldi	r26, 0x55	; 85
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e5 e5       	ldi	r30, 0x55	; 85
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	8e 7f       	andi	r24, 0xFE	; 254
    1d0c:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,MCUCR_ISC01);
    1d0e:	a5 e5       	ldi	r26, 0x55	; 85
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e5 e5       	ldi	r30, 0x55	; 85
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	82 60       	ori	r24, 0x02	; 2
    1d1a:	8c 93       	st	X, r24
	}

}
    1d1c:	0f 90       	pop	r0
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <EXTI_initINT2>:
void EXTI_initINT2(interupt_sense_control control)
{
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	0f 92       	push	r0
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_SetupPin_Direction(PORTD_ID, EXINT2_PIN, PIN_INPUT);
    1d30:	83 e0       	ldi	r24, 0x03	; 3
    1d32:	62 e0       	ldi	r22, 0x02	; 2
    1d34:	40 e0       	ldi	r20, 0x00	; 0
    1d36:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Value(PORTD_ID, EXINT2_PIN, LOGIC_HIGH);
    1d3a:	83 e0       	ldi	r24, 0x03	; 3
    1d3c:	62 e0       	ldi	r22, 0x02	; 2
    1d3e:	41 e0       	ldi	r20, 0x01	; 1
    1d40:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
	if(control ==rising_edge)
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	81 30       	cpi	r24, 0x01	; 1
    1d48:	41 f4       	brne	.+16     	; 0x1d5a <EXTI_initINT2+0x36>
	{
		SET_BIT(MCUCSR_REG,MCUCSR_ISC2);
    1d4a:	a5 e4       	ldi	r26, 0x45	; 69
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	e5 e4       	ldi	r30, 0x45	; 69
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	80 64       	ori	r24, 0x40	; 64
    1d56:	8c 93       	st	X, r24
    1d58:	0a c0       	rjmp	.+20     	; 0x1d6e <EXTI_initINT2+0x4a>
	}
	else if(control==falling_edge)
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	88 23       	and	r24, r24
    1d5e:	39 f4       	brne	.+14     	; 0x1d6e <EXTI_initINT2+0x4a>
	{
		CLEAR_BIT(MCUCSR_REG,MCUCSR_ISC2);
    1d60:	a5 e4       	ldi	r26, 0x45	; 69
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e5 e4       	ldi	r30, 0x45	; 69
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	8f 7b       	andi	r24, 0xBF	; 191
    1d6c:	8c 93       	st	X, r24
	}
}
    1d6e:	0f 90       	pop	r0
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	08 95       	ret

00001d76 <EXTI_Enable>:

void EXTI_Enable(GINT_Control GControl, void (*callbackPtr)(void), interupt_sense_control control)
{
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <EXTI_Enable+0x6>
    1d7c:	00 d0       	rcall	.+0      	; 0x1d7e <EXTI_Enable+0x8>
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	89 83       	std	Y+1, r24	; 0x01
    1d84:	7b 83       	std	Y+3, r23	; 0x03
    1d86:	6a 83       	std	Y+2, r22	; 0x02
    1d88:	4c 83       	std	Y+4, r20	; 0x04
	if(GControl==INT0)
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	81 30       	cpi	r24, 0x01	; 1
    1d8e:	89 f4       	brne	.+34     	; 0x1db2 <EXTI_Enable+0x3c>
	{
		SET_BIT(GICR_REG,GICR_INT0);
    1d90:	ab e5       	ldi	r26, 0x5B	; 91
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	eb e5       	ldi	r30, 0x5B	; 91
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	80 64       	ori	r24, 0x40	; 64
    1d9c:	8c 93       	st	X, r24
		callback_Ptr_INT0=callbackPtr;
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	9b 81       	ldd	r25, Y+3	; 0x03
    1da2:	90 93 83 00 	sts	0x0083, r25
    1da6:	80 93 82 00 	sts	0x0082, r24
		EXTI_initINT0(control);
    1daa:	8c 81       	ldd	r24, Y+4	; 0x04
    1dac:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <EXTI_initINT0>
    1db0:	27 c0       	rjmp	.+78     	; 0x1e00 <EXTI_Enable+0x8a>
	}
	else if(GControl==INT1)
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	88 23       	and	r24, r24
    1db6:	89 f4       	brne	.+34     	; 0x1dda <EXTI_Enable+0x64>
	{
		SET_BIT(GICR_REG,GICR_INT1);
    1db8:	ab e5       	ldi	r26, 0x5B	; 91
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	eb e5       	ldi	r30, 0x5B	; 91
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	80 68       	ori	r24, 0x80	; 128
    1dc4:	8c 93       	st	X, r24
		callback_Ptr_INT1=callbackPtr;
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dca:	90 93 85 00 	sts	0x0085, r25
    1dce:	80 93 84 00 	sts	0x0084, r24
		EXTI_initINT1(control);
    1dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd4:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <EXTI_initINT1>
    1dd8:	13 c0       	rjmp	.+38     	; 0x1e00 <EXTI_Enable+0x8a>
	}
	else if(GControl==INT2)
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	82 30       	cpi	r24, 0x02	; 2
    1dde:	81 f4       	brne	.+32     	; 0x1e00 <EXTI_Enable+0x8a>
	{
		SET_BIT(GICR_REG,GICR_INT2);
    1de0:	ab e5       	ldi	r26, 0x5B	; 91
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	eb e5       	ldi	r30, 0x5B	; 91
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	80 62       	ori	r24, 0x20	; 32
    1dec:	8c 93       	st	X, r24
		callback_Ptr_INT2=callbackPtr;
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	9b 81       	ldd	r25, Y+3	; 0x03
    1df2:	90 93 87 00 	sts	0x0087, r25
    1df6:	80 93 86 00 	sts	0x0086, r24
		EXTI_initINT2(control);
    1dfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfc:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <EXTI_initINT2>
	}
}
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <Read_flags>:

uint8 Read_flags(GINT_Control GControl)
{
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	00 d0       	rcall	.+0      	; 0x1e14 <Read_flags+0x6>
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
    1e18:	8a 83       	std	Y+2, r24	; 0x02
	uint8 flag='3';
    1e1a:	83 e3       	ldi	r24, 0x33	; 51
    1e1c:	89 83       	std	Y+1, r24	; 0x01
	if(GControl==INT0)
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	81 30       	cpi	r24, 0x01	; 1
    1e22:	51 f4       	brne	.+20     	; 0x1e38 <Read_flags+0x2a>
	{
		flag=GET_BIT(GIFR_REG,GIFR_INTF0);
    1e24:	ea e5       	ldi	r30, 0x5A	; 90
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	82 95       	swap	r24
    1e2c:	86 95       	lsr	r24
    1e2e:	86 95       	lsr	r24
    1e30:	83 70       	andi	r24, 0x03	; 3
    1e32:	81 70       	andi	r24, 0x01	; 1
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	16 c0       	rjmp	.+44     	; 0x1e64 <Read_flags+0x56>
	}
	else if(GControl==INT1)
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	88 23       	and	r24, r24
    1e3c:	41 f4       	brne	.+16     	; 0x1e4e <Read_flags+0x40>
	{
		flag=GET_BIT(GIFR_REG,GIFR_INTF1);
    1e3e:	ea e5       	ldi	r30, 0x5A	; 90
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	88 1f       	adc	r24, r24
    1e46:	88 27       	eor	r24, r24
    1e48:	88 1f       	adc	r24, r24
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	0b c0       	rjmp	.+22     	; 0x1e64 <Read_flags+0x56>
	}
	else if(GControl==INT2)
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	82 30       	cpi	r24, 0x02	; 2
    1e52:	41 f4       	brne	.+16     	; 0x1e64 <Read_flags+0x56>
	{
		flag=GET_BIT(GIFR_REG,GIFR_INTF2);
    1e54:	ea e5       	ldi	r30, 0x5A	; 90
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	82 95       	swap	r24
    1e5c:	86 95       	lsr	r24
    1e5e:	87 70       	andi	r24, 0x07	; 7
    1e60:	81 70       	andi	r24, 0x01	; 1
    1e62:	89 83       	std	Y+1, r24	; 0x01
	}
	return flag ;
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <__vector_1>:



void __vector_1(void)__attribute__((signal)); // command to the compiler
void __vector_1(void)
{
    1e70:	1f 92       	push	r1
    1e72:	0f 92       	push	r0
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	0f 92       	push	r0
    1e78:	11 24       	eor	r1, r1
    1e7a:	2f 93       	push	r18
    1e7c:	3f 93       	push	r19
    1e7e:	4f 93       	push	r20
    1e80:	5f 93       	push	r21
    1e82:	6f 93       	push	r22
    1e84:	7f 93       	push	r23
    1e86:	8f 93       	push	r24
    1e88:	9f 93       	push	r25
    1e8a:	af 93       	push	r26
    1e8c:	bf 93       	push	r27
    1e8e:	ef 93       	push	r30
    1e90:	ff 93       	push	r31
    1e92:	df 93       	push	r29
    1e94:	cf 93       	push	r28
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
	if(callback_Ptr_INT0 !=NULL)
    1e9a:	80 91 82 00 	lds	r24, 0x0082
    1e9e:	90 91 83 00 	lds	r25, 0x0083
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	29 f0       	breq	.+10     	; 0x1eb0 <__vector_1+0x40>
	{
		callback_Ptr_INT0();
    1ea6:	e0 91 82 00 	lds	r30, 0x0082
    1eaa:	f0 91 83 00 	lds	r31, 0x0083
    1eae:	09 95       	icall
	}
}
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	ff 91       	pop	r31
    1eb6:	ef 91       	pop	r30
    1eb8:	bf 91       	pop	r27
    1eba:	af 91       	pop	r26
    1ebc:	9f 91       	pop	r25
    1ebe:	8f 91       	pop	r24
    1ec0:	7f 91       	pop	r23
    1ec2:	6f 91       	pop	r22
    1ec4:	5f 91       	pop	r21
    1ec6:	4f 91       	pop	r20
    1ec8:	3f 91       	pop	r19
    1eca:	2f 91       	pop	r18
    1ecc:	0f 90       	pop	r0
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	0f 90       	pop	r0
    1ed2:	1f 90       	pop	r1
    1ed4:	18 95       	reti

00001ed6 <__vector_2>:

void __vector_2(void)__attribute__((signal));
void __vector_2(void)
{
    1ed6:	1f 92       	push	r1
    1ed8:	0f 92       	push	r0
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	0f 92       	push	r0
    1ede:	11 24       	eor	r1, r1
    1ee0:	2f 93       	push	r18
    1ee2:	3f 93       	push	r19
    1ee4:	4f 93       	push	r20
    1ee6:	5f 93       	push	r21
    1ee8:	6f 93       	push	r22
    1eea:	7f 93       	push	r23
    1eec:	8f 93       	push	r24
    1eee:	9f 93       	push	r25
    1ef0:	af 93       	push	r26
    1ef2:	bf 93       	push	r27
    1ef4:	ef 93       	push	r30
    1ef6:	ff 93       	push	r31
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
	if(callback_Ptr_INT1 !=NULL)
    1f00:	80 91 84 00 	lds	r24, 0x0084
    1f04:	90 91 85 00 	lds	r25, 0x0085
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	29 f0       	breq	.+10     	; 0x1f16 <__vector_2+0x40>
	{
		callback_Ptr_INT1();
    1f0c:	e0 91 84 00 	lds	r30, 0x0084
    1f10:	f0 91 85 00 	lds	r31, 0x0085
    1f14:	09 95       	icall
	}
}
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	ff 91       	pop	r31
    1f1c:	ef 91       	pop	r30
    1f1e:	bf 91       	pop	r27
    1f20:	af 91       	pop	r26
    1f22:	9f 91       	pop	r25
    1f24:	8f 91       	pop	r24
    1f26:	7f 91       	pop	r23
    1f28:	6f 91       	pop	r22
    1f2a:	5f 91       	pop	r21
    1f2c:	4f 91       	pop	r20
    1f2e:	3f 91       	pop	r19
    1f30:	2f 91       	pop	r18
    1f32:	0f 90       	pop	r0
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	0f 90       	pop	r0
    1f38:	1f 90       	pop	r1
    1f3a:	18 95       	reti

00001f3c <__vector_3>:

void __vector_3(void)__attribute__((signal));
void __vector_3(void)
{
    1f3c:	1f 92       	push	r1
    1f3e:	0f 92       	push	r0
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	0f 92       	push	r0
    1f44:	11 24       	eor	r1, r1
    1f46:	2f 93       	push	r18
    1f48:	3f 93       	push	r19
    1f4a:	4f 93       	push	r20
    1f4c:	5f 93       	push	r21
    1f4e:	6f 93       	push	r22
    1f50:	7f 93       	push	r23
    1f52:	8f 93       	push	r24
    1f54:	9f 93       	push	r25
    1f56:	af 93       	push	r26
    1f58:	bf 93       	push	r27
    1f5a:	ef 93       	push	r30
    1f5c:	ff 93       	push	r31
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
	if(callback_Ptr_INT2 !=NULL)
    1f66:	80 91 86 00 	lds	r24, 0x0086
    1f6a:	90 91 87 00 	lds	r25, 0x0087
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	29 f0       	breq	.+10     	; 0x1f7c <__vector_3+0x40>
	{
		callback_Ptr_INT2();
    1f72:	e0 91 86 00 	lds	r30, 0x0086
    1f76:	f0 91 87 00 	lds	r31, 0x0087
    1f7a:	09 95       	icall
	}
}
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	ff 91       	pop	r31
    1f82:	ef 91       	pop	r30
    1f84:	bf 91       	pop	r27
    1f86:	af 91       	pop	r26
    1f88:	9f 91       	pop	r25
    1f8a:	8f 91       	pop	r24
    1f8c:	7f 91       	pop	r23
    1f8e:	6f 91       	pop	r22
    1f90:	5f 91       	pop	r21
    1f92:	4f 91       	pop	r20
    1f94:	3f 91       	pop	r19
    1f96:	2f 91       	pop	r18
    1f98:	0f 90       	pop	r0
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	0f 90       	pop	r0
    1f9e:	1f 90       	pop	r1
    1fa0:	18 95       	reti

00001fa2 <ADC_init>:
/** ======================= Defining global variables ======================= */
void (*ADC_callBack_ptr)(void) = NULL;
/** ========================================================================= */

void ADC_init(void)
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
	/* Set the ADC VREF */
	ADMUX_REG->REF=ADC_VOLTAGE_REFERENCE;
    1faa:	e7 e2       	ldi	r30, 0x27	; 39
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	8f 73       	andi	r24, 0x3F	; 63
    1fb2:	80 64       	ori	r24, 0x40	; 64
    1fb4:	80 83       	st	Z, r24

	/* Enable/Disable the ADC left adjust */
#if	(ADC_LEFT_ADJUST == 1)
	ADMUX_REG->ADLAR = LeftAdjustResult;
#else
	ADMUX_REG->ADLAR = RightAdjustResult;
    1fb6:	e7 e2       	ldi	r30, 0x27	; 39
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	8f 7d       	andi	r24, 0xDF	; 223
    1fbe:	80 83       	st	Z, r24
#endif

	/* Enable/Disable the ADC Auto trigger mode (ADATE)*/
#if (ADC_AUTO_TRIGGER_ENABLE == AutoTriggered)
	/* Enable the ADC Auto trigger mode */
	ADCSRA_REG->ADATE = AutoTriggered;
    1fc0:	e6 e2       	ldi	r30, 0x26	; 38
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	80 62       	ori	r24, 0x20	; 32
    1fc8:	80 83       	st	Z, r24

	/* Set the Auto trigger mode source (ADTS)*/
	SFIOR_REG->ADTS = ADC_AUTO_TRIG_SOURCE;
    1fca:	e0 e5       	ldi	r30, 0x50	; 80
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	8f 71       	andi	r24, 0x1F	; 31
    1fd2:	80 83       	st	Z, r24
#else
	ADCSRA_REG->ADATE = DisableAutoTriggered;
#endif

	/* Set the ADC clock division */
	ADCSRA_REG->ADPS = ADC_PRESCALER_FACTOR;
    1fd4:	e6 e2       	ldi	r30, 0x26	; 38
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	88 7f       	andi	r24, 0xF8	; 248
    1fdc:	86 60       	ori	r24, 0x06	; 6
    1fde:	80 83       	st	Z, r24

	/* Enable the ADC */

	ADCSRA_REG->ADEN = 1;
    1fe0:	e6 e2       	ldi	r30, 0x26	; 38
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	80 68       	ori	r24, 0x80	; 128
    1fe8:	80 83       	st	Z, r24
}
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <ADC_selectChannel>:


void ADC_selectChannel(ADC_channel Channel)
{
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	0f 92       	push	r0
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	89 83       	std	Y+1, r24	; 0x01
	/* Set the channel selection */
	ADMUX_REG->MUX = Channel;
    1ffc:	e7 e2       	ldi	r30, 0x27	; 39
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	8f 71       	andi	r24, 0x1F	; 31
    2004:	98 2f       	mov	r25, r24
    2006:	9f 71       	andi	r25, 0x1F	; 31
    2008:	80 81       	ld	r24, Z
    200a:	80 7e       	andi	r24, 0xE0	; 224
    200c:	89 2b       	or	r24, r25
    200e:	80 83       	st	Z, r24
}
    2010:	0f 90       	pop	r0
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <ADC_startConversionPollingMode>:

void ADC_startConversionPollingMode(void)
{
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
	/* Make sure the ADC Interrupt is disabled */
	if(ADCSRA_REG->ADIE == 1)
    2020:	e6 e2       	ldi	r30, 0x26	; 38
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	88 70       	andi	r24, 0x08	; 8
    2028:	88 23       	and	r24, r24
    202a:	51 f0       	breq	.+20     	; 0x2040 <ADC_startConversionPollingMode+0x28>
	{
		ADCSRA_REG->ADIF = 1;	// Clear the ADC Interrupt flag (ADIF)
    202c:	e6 e2       	ldi	r30, 0x26	; 38
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	80 61       	ori	r24, 0x10	; 16
    2034:	80 83       	st	Z, r24
		ADCSRA_REG->ADIE = 0;	// Clear ADIE
    2036:	e6 e2       	ldi	r30, 0x26	; 38
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	87 7f       	andi	r24, 0xF7	; 247
    203e:	80 83       	st	Z, r24
	}

	/* Start the ADC conversion */
	ADC_startConversion();
    2040:	0e 94 2b 10 	call	0x2056	; 0x2056 <ADC_startConversion>
	/* Poll for the ADC conversion */
	while(ADCSRA_REG->ADSC == startConversion);
    2044:	e6 e2       	ldi	r30, 0x26	; 38
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	80 74       	andi	r24, 0x40	; 64
    204c:	88 23       	and	r24, r24
    204e:	d1 f7       	brne	.-12     	; 0x2044 <ADC_startConversionPollingMode+0x2c>
}
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <ADC_startConversion>:

void ADC_startConversion(void)
{
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
	/* Start the ADC conversion */
	ADCSRA_REG->ADSC = startConversion;
    205e:	e6 e2       	ldi	r30, 0x26	; 38
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	80 64       	ori	r24, 0x40	; 64
    2066:	80 83       	st	Z, r24
}
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	08 95       	ret

0000206e <ADC_readChannel>:

uint16 ADC_readChannel(void)
{
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
	uint16 data=0;
	data = (ADCL_REG >> 6);
	data |= (ADCH_REG << 2);
	return data;
#else
	return ADC_DATA_REG;
    2076:	e4 e2       	ldi	r30, 0x24	; 36
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	91 81       	ldd	r25, Z+1	; 0x01
#endif
}
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	08 95       	ret

00002084 <ADC_setCallBackFunction>:
void ADC_setCallBackFunction(void (*callBackPtr)(void))
{
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	00 d0       	rcall	.+0      	; 0x208a <ADC_setCallBackFunction+0x6>
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
    208e:	9a 83       	std	Y+2, r25	; 0x02
    2090:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA_REG->ADIF=1;
    2092:	e6 e2       	ldi	r30, 0x26	; 38
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	80 61       	ori	r24, 0x10	; 16
    209a:	80 83       	st	Z, r24
	ADCSRA_REG->ADIE=1;
    209c:	e6 e2       	ldi	r30, 0x26	; 38
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	88 60       	ori	r24, 0x08	; 8
    20a4:	80 83       	st	Z, r24
	if(callBackPtr != NULL)
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	00 97       	sbiw	r24, 0x00	; 0
    20ac:	31 f0       	breq	.+12     	; 0x20ba <ADC_setCallBackFunction+0x36>
	{
		ADC_callBack_ptr = callBackPtr;
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	9a 81       	ldd	r25, Y+2	; 0x02
    20b2:	90 93 89 00 	sts	0x0089, r25
    20b6:	80 93 88 00 	sts	0x0088, r24
	}
	ADC_startConversion();
    20ba:	0e 94 2b 10 	call	0x2056	; 0x2056 <ADC_startConversion>
}
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <__vector_16>:

/** ===================== ADC ISRs Implementation ========================== */
/* ADC Conversion Complete ISR */
void __vector_16(void)	__attribute__((signal, used));
void __vector_16(void)
{
    20c8:	1f 92       	push	r1
    20ca:	0f 92       	push	r0
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	0f 92       	push	r0
    20d0:	11 24       	eor	r1, r1
    20d2:	2f 93       	push	r18
    20d4:	3f 93       	push	r19
    20d6:	4f 93       	push	r20
    20d8:	5f 93       	push	r21
    20da:	6f 93       	push	r22
    20dc:	7f 93       	push	r23
    20de:	8f 93       	push	r24
    20e0:	9f 93       	push	r25
    20e2:	af 93       	push	r26
    20e4:	bf 93       	push	r27
    20e6:	ef 93       	push	r30
    20e8:	ff 93       	push	r31
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
	if(ADC_callBack_ptr != NULL)
    20f2:	80 91 88 00 	lds	r24, 0x0088
    20f6:	90 91 89 00 	lds	r25, 0x0089
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	29 f0       	breq	.+10     	; 0x2108 <__vector_16+0x40>
	{
		ADC_callBack_ptr();
    20fe:	e0 91 88 00 	lds	r30, 0x0088
    2102:	f0 91 89 00 	lds	r31, 0x0089
    2106:	09 95       	icall
	}
}
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	ff 91       	pop	r31
    210e:	ef 91       	pop	r30
    2110:	bf 91       	pop	r27
    2112:	af 91       	pop	r26
    2114:	9f 91       	pop	r25
    2116:	8f 91       	pop	r24
    2118:	7f 91       	pop	r23
    211a:	6f 91       	pop	r22
    211c:	5f 91       	pop	r21
    211e:	4f 91       	pop	r20
    2120:	3f 91       	pop	r19
    2122:	2f 91       	pop	r18
    2124:	0f 90       	pop	r0
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	0f 90       	pop	r0
    212a:	1f 90       	pop	r1
    212c:	18 95       	reti

0000212e <LED_setUpDirection>:
 */

#include "LED.h"

void LED_setUpDirection(uint8 port_id,uint8 pin_num,GPIO_PinDirection direction)
{
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	00 d0       	rcall	.+0      	; 0x2134 <LED_setUpDirection+0x6>
    2134:	0f 92       	push	r0
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	89 83       	std	Y+1, r24	; 0x01
    213c:	6a 83       	std	Y+2, r22	; 0x02
    213e:	4b 83       	std	Y+3, r20	; 0x03
	GPIO_SetupPin_Direction(port_id,pin_num, direction);
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	6a 81       	ldd	r22, Y+2	; 0x02
    2144:	4b 81       	ldd	r20, Y+3	; 0x03
    2146:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_SetupPin_Direction>


}
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	08 95       	ret

00002156 <LED_ON>:

void LED_ON(uint8 port_id,uint8 pin_num)
{
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	00 d0       	rcall	.+0      	; 0x215c <LED_ON+0x6>
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	89 83       	std	Y+1, r24	; 0x01
    2162:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_SetupPin_Value(port_id,pin_num,LOGIC_HIGH);
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	6a 81       	ldd	r22, Y+2	; 0x02
    2168:	41 e0       	ldi	r20, 0x01	; 1
    216a:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
}
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <LED_OFF>:
void LED_OFF(uint8 port_id,uint8 pin_num)
{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	00 d0       	rcall	.+0      	; 0x217e <LED_OFF+0x6>
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_SetupPin_Value(port_id,pin_num,LOGIC_LOW);
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	6a 81       	ldd	r22, Y+2	; 0x02
    218a:	40 e0       	ldi	r20, 0x00	; 0
    218c:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
}
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <LED_Toggle>:

void LED_Toggle(uint8 port_id, uint8 pin_num)
{
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <LED_Toggle+0x6>
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	89 83       	std	Y+1, r24	; 0x01
    21a6:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_TogglePin_Value(port_id, pin_num);
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	6a 81       	ldd	r22, Y+2	; 0x02
    21ac:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <GPIO_TogglePin_Value>
}
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	08 95       	ret

000021ba <LCD_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
static uint8 InitFinished = 0;

void LCD_init(void)
{
    21ba:	df 93       	push	r29
    21bc:	cf 93       	push	r28
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	e8 97       	sbiw	r28, 0x38	; 56
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
	GPIO_SetupPin_Direction(PORTB_ID,LCD_PIN1,PIN_OUTPUT);/*D4*/
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	60 e0       	ldi	r22, 0x00	; 0
    21d2:	41 e0       	ldi	r20, 0x01	; 1
    21d4:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(PORTB_ID,LCD_PIN2,PIN_OUTPUT);/*D5*/
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	61 e0       	ldi	r22, 0x01	; 1
    21dc:	41 e0       	ldi	r20, 0x01	; 1
    21de:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(PORTB_ID,LCD_PIN3,PIN_OUTPUT);/*D6*/
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	62 e0       	ldi	r22, 0x02	; 2
    21e6:	41 e0       	ldi	r20, 0x01	; 1
    21e8:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(PORTB_ID,LCD_PIN4,PIN_OUTPUT);/*D7*/
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	64 e0       	ldi	r22, 0x04	; 4
    21f0:	41 e0       	ldi	r20, 0x01	; 1
    21f2:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_SetupPin_Direction>

	GPIO_SetupPin_Direction(PORTA_ID,LCD_RS_PIN,PIN_OUTPUT);/*RS*/
    21f6:	80 e0       	ldi	r24, 0x00	; 0
    21f8:	63 e0       	ldi	r22, 0x03	; 3
    21fa:	41 e0       	ldi	r20, 0x01	; 1
    21fc:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(PORTA_ID,LCD_EN_PIN,PIN_OUTPUT); /*EN*/
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	62 e0       	ldi	r22, 0x02	; 2
    2204:	41 e0       	ldi	r20, 0x01	; 1
    2206:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_SetupPin_Direction>
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	a0 e2       	ldi	r26, 0x20	; 32
    2210:	b2 e4       	ldi	r27, 0x42	; 66
    2212:	8d ab       	std	Y+53, r24	; 0x35
    2214:	9e ab       	std	Y+54, r25	; 0x36
    2216:	af ab       	std	Y+55, r26	; 0x37
    2218:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    221a:	6d a9       	ldd	r22, Y+53	; 0x35
    221c:	7e a9       	ldd	r23, Y+54	; 0x36
    221e:	8f a9       	ldd	r24, Y+55	; 0x37
    2220:	98 ad       	ldd	r25, Y+56	; 0x38
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	48 ec       	ldi	r20, 0xC8	; 200
    2228:	53 e4       	ldi	r21, 0x43	; 67
    222a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	89 ab       	std	Y+49, r24	; 0x31
    2234:	9a ab       	std	Y+50, r25	; 0x32
    2236:	ab ab       	std	Y+51, r26	; 0x33
    2238:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    223a:	69 a9       	ldd	r22, Y+49	; 0x31
    223c:	7a a9       	ldd	r23, Y+50	; 0x32
    223e:	8b a9       	ldd	r24, Y+51	; 0x33
    2240:	9c a9       	ldd	r25, Y+52	; 0x34
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e8       	ldi	r20, 0x80	; 128
    2248:	5f e3       	ldi	r21, 0x3F	; 63
    224a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    224e:	88 23       	and	r24, r24
    2250:	2c f4       	brge	.+10     	; 0x225c <LCD_init+0xa2>
		__ticks = 1;
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	98 ab       	std	Y+48, r25	; 0x30
    2258:	8f a7       	std	Y+47, r24	; 0x2f
    225a:	3f c0       	rjmp	.+126    	; 0x22da <LCD_init+0x120>
	else if (__tmp > 65535)
    225c:	69 a9       	ldd	r22, Y+49	; 0x31
    225e:	7a a9       	ldd	r23, Y+50	; 0x32
    2260:	8b a9       	ldd	r24, Y+51	; 0x33
    2262:	9c a9       	ldd	r25, Y+52	; 0x34
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	3f ef       	ldi	r19, 0xFF	; 255
    2268:	4f e7       	ldi	r20, 0x7F	; 127
    226a:	57 e4       	ldi	r21, 0x47	; 71
    226c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2270:	18 16       	cp	r1, r24
    2272:	4c f5       	brge	.+82     	; 0x22c6 <LCD_init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2274:	6d a9       	ldd	r22, Y+53	; 0x35
    2276:	7e a9       	ldd	r23, Y+54	; 0x36
    2278:	8f a9       	ldd	r24, Y+55	; 0x37
    227a:	98 ad       	ldd	r25, Y+56	; 0x38
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e2       	ldi	r20, 0x20	; 32
    2282:	51 e4       	ldi	r21, 0x41	; 65
    2284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	bc 01       	movw	r22, r24
    228e:	cd 01       	movw	r24, r26
    2290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	98 ab       	std	Y+48, r25	; 0x30
    229a:	8f a7       	std	Y+47, r24	; 0x2f
    229c:	0f c0       	rjmp	.+30     	; 0x22bc <LCD_init+0x102>
    229e:	88 e2       	ldi	r24, 0x28	; 40
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9e a7       	std	Y+46, r25	; 0x2e
    22a4:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    22a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	f1 f7       	brne	.-4      	; 0x22aa <LCD_init+0xf0>
    22ae:	9e a7       	std	Y+46, r25	; 0x2e
    22b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    22b4:	98 a9       	ldd	r25, Y+48	; 0x30
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	98 ab       	std	Y+48, r25	; 0x30
    22ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    22be:	98 a9       	ldd	r25, Y+48	; 0x30
    22c0:	00 97       	sbiw	r24, 0x00	; 0
    22c2:	69 f7       	brne	.-38     	; 0x229e <LCD_init+0xe4>
    22c4:	14 c0       	rjmp	.+40     	; 0x22ee <LCD_init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c6:	69 a9       	ldd	r22, Y+49	; 0x31
    22c8:	7a a9       	ldd	r23, Y+50	; 0x32
    22ca:	8b a9       	ldd	r24, Y+51	; 0x33
    22cc:	9c a9       	ldd	r25, Y+52	; 0x34
    22ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	98 ab       	std	Y+48, r25	; 0x30
    22d8:	8f a7       	std	Y+47, r24	; 0x2f
    22da:	8f a5       	ldd	r24, Y+47	; 0x2f
    22dc:	98 a9       	ldd	r25, Y+48	; 0x30
    22de:	9c a7       	std	Y+44, r25	; 0x2c
    22e0:	8b a7       	std	Y+43, r24	; 0x2b
    22e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    22e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	f1 f7       	brne	.-4      	; 0x22e6 <LCD_init+0x12c>
    22ea:	9c a7       	std	Y+44, r25	; 0x2c
    22ec:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);

	LCD_writeCommand(0x20);
    22ee:	80 e2       	ldi	r24, 0x20	; 32
    22f0:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_writeCommand>
	LCD_writeCommand(0x20);
    22f4:	80 e2       	ldi	r24, 0x20	; 32
    22f6:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_writeCommand>
	LCD_writeCommand(0x80);
    22fa:	80 e8       	ldi	r24, 0x80	; 128
    22fc:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_writeCommand>
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	a0 e2       	ldi	r26, 0x20	; 32
    2306:	b2 e4       	ldi	r27, 0x42	; 66
    2308:	8f a3       	std	Y+39, r24	; 0x27
    230a:	98 a7       	std	Y+40, r25	; 0x28
    230c:	a9 a7       	std	Y+41, r26	; 0x29
    230e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2310:	6f a1       	ldd	r22, Y+39	; 0x27
    2312:	78 a5       	ldd	r23, Y+40	; 0x28
    2314:	89 a5       	ldd	r24, Y+41	; 0x29
    2316:	9a a5       	ldd	r25, Y+42	; 0x2a
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	48 ec       	ldi	r20, 0xC8	; 200
    231e:	53 e4       	ldi	r21, 0x43	; 67
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	8b a3       	std	Y+35, r24	; 0x23
    232a:	9c a3       	std	Y+36, r25	; 0x24
    232c:	ad a3       	std	Y+37, r26	; 0x25
    232e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2330:	6b a1       	ldd	r22, Y+35	; 0x23
    2332:	7c a1       	ldd	r23, Y+36	; 0x24
    2334:	8d a1       	ldd	r24, Y+37	; 0x25
    2336:	9e a1       	ldd	r25, Y+38	; 0x26
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e8       	ldi	r20, 0x80	; 128
    233e:	5f e3       	ldi	r21, 0x3F	; 63
    2340:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2344:	88 23       	and	r24, r24
    2346:	2c f4       	brge	.+10     	; 0x2352 <LCD_init+0x198>
		__ticks = 1;
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9a a3       	std	Y+34, r25	; 0x22
    234e:	89 a3       	std	Y+33, r24	; 0x21
    2350:	3f c0       	rjmp	.+126    	; 0x23d0 <LCD_init+0x216>
	else if (__tmp > 65535)
    2352:	6b a1       	ldd	r22, Y+35	; 0x23
    2354:	7c a1       	ldd	r23, Y+36	; 0x24
    2356:	8d a1       	ldd	r24, Y+37	; 0x25
    2358:	9e a1       	ldd	r25, Y+38	; 0x26
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	3f ef       	ldi	r19, 0xFF	; 255
    235e:	4f e7       	ldi	r20, 0x7F	; 127
    2360:	57 e4       	ldi	r21, 0x47	; 71
    2362:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2366:	18 16       	cp	r1, r24
    2368:	4c f5       	brge	.+82     	; 0x23bc <LCD_init+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236a:	6f a1       	ldd	r22, Y+39	; 0x27
    236c:	78 a5       	ldd	r23, Y+40	; 0x28
    236e:	89 a5       	ldd	r24, Y+41	; 0x29
    2370:	9a a5       	ldd	r25, Y+42	; 0x2a
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e2       	ldi	r20, 0x20	; 32
    2378:	51 e4       	ldi	r21, 0x41	; 65
    237a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	bc 01       	movw	r22, r24
    2384:	cd 01       	movw	r24, r26
    2386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	9a a3       	std	Y+34, r25	; 0x22
    2390:	89 a3       	std	Y+33, r24	; 0x21
    2392:	0f c0       	rjmp	.+30     	; 0x23b2 <LCD_init+0x1f8>
    2394:	88 e2       	ldi	r24, 0x28	; 40
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	98 a3       	std	Y+32, r25	; 0x20
    239a:	8f 8f       	std	Y+31, r24	; 0x1f
    239c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    239e:	98 a1       	ldd	r25, Y+32	; 0x20
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <LCD_init+0x1e6>
    23a4:	98 a3       	std	Y+32, r25	; 0x20
    23a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a8:	89 a1       	ldd	r24, Y+33	; 0x21
    23aa:	9a a1       	ldd	r25, Y+34	; 0x22
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	9a a3       	std	Y+34, r25	; 0x22
    23b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b2:	89 a1       	ldd	r24, Y+33	; 0x21
    23b4:	9a a1       	ldd	r25, Y+34	; 0x22
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	69 f7       	brne	.-38     	; 0x2394 <LCD_init+0x1da>
    23ba:	14 c0       	rjmp	.+40     	; 0x23e4 <LCD_init+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23bc:	6b a1       	ldd	r22, Y+35	; 0x23
    23be:	7c a1       	ldd	r23, Y+36	; 0x24
    23c0:	8d a1       	ldd	r24, Y+37	; 0x25
    23c2:	9e a1       	ldd	r25, Y+38	; 0x26
    23c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	9a a3       	std	Y+34, r25	; 0x22
    23ce:	89 a3       	std	Y+33, r24	; 0x21
    23d0:	89 a1       	ldd	r24, Y+33	; 0x21
    23d2:	9a a1       	ldd	r25, Y+34	; 0x22
    23d4:	9e 8f       	std	Y+30, r25	; 0x1e
    23d6:	8d 8f       	std	Y+29, r24	; 0x1d
    23d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	f1 f7       	brne	.-4      	; 0x23dc <LCD_init+0x222>
    23e0:	9e 8f       	std	Y+30, r25	; 0x1e
    23e2:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(40);

	LCD_writeCommand(0x00);
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_writeCommand>
	LCD_writeCommand(0xc0);
    23ea:	80 ec       	ldi	r24, 0xC0	; 192
    23ec:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_writeCommand>
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	a0 e2       	ldi	r26, 0x20	; 32
    23f6:	b2 e4       	ldi	r27, 0x42	; 66
    23f8:	89 8f       	std	Y+25, r24	; 0x19
    23fa:	9a 8f       	std	Y+26, r25	; 0x1a
    23fc:	ab 8f       	std	Y+27, r26	; 0x1b
    23fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2400:	69 8d       	ldd	r22, Y+25	; 0x19
    2402:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2404:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2406:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	48 ec       	ldi	r20, 0xC8	; 200
    240e:	53 e4       	ldi	r21, 0x43	; 67
    2410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	8d 8b       	std	Y+21, r24	; 0x15
    241a:	9e 8b       	std	Y+22, r25	; 0x16
    241c:	af 8b       	std	Y+23, r26	; 0x17
    241e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2420:	6d 89       	ldd	r22, Y+21	; 0x15
    2422:	7e 89       	ldd	r23, Y+22	; 0x16
    2424:	8f 89       	ldd	r24, Y+23	; 0x17
    2426:	98 8d       	ldd	r25, Y+24	; 0x18
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	40 e8       	ldi	r20, 0x80	; 128
    242e:	5f e3       	ldi	r21, 0x3F	; 63
    2430:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2434:	88 23       	and	r24, r24
    2436:	2c f4       	brge	.+10     	; 0x2442 <LCD_init+0x288>
		__ticks = 1;
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	9c 8b       	std	Y+20, r25	; 0x14
    243e:	8b 8b       	std	Y+19, r24	; 0x13
    2440:	3f c0       	rjmp	.+126    	; 0x24c0 <LCD_init+0x306>
	else if (__tmp > 65535)
    2442:	6d 89       	ldd	r22, Y+21	; 0x15
    2444:	7e 89       	ldd	r23, Y+22	; 0x16
    2446:	8f 89       	ldd	r24, Y+23	; 0x17
    2448:	98 8d       	ldd	r25, Y+24	; 0x18
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	3f ef       	ldi	r19, 0xFF	; 255
    244e:	4f e7       	ldi	r20, 0x7F	; 127
    2450:	57 e4       	ldi	r21, 0x47	; 71
    2452:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2456:	18 16       	cp	r1, r24
    2458:	4c f5       	brge	.+82     	; 0x24ac <LCD_init+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245a:	69 8d       	ldd	r22, Y+25	; 0x19
    245c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    245e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2460:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	40 e2       	ldi	r20, 0x20	; 32
    2468:	51 e4       	ldi	r21, 0x41	; 65
    246a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	bc 01       	movw	r22, r24
    2474:	cd 01       	movw	r24, r26
    2476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	9c 8b       	std	Y+20, r25	; 0x14
    2480:	8b 8b       	std	Y+19, r24	; 0x13
    2482:	0f c0       	rjmp	.+30     	; 0x24a2 <LCD_init+0x2e8>
    2484:	88 e2       	ldi	r24, 0x28	; 40
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	9a 8b       	std	Y+18, r25	; 0x12
    248a:	89 8b       	std	Y+17, r24	; 0x11
    248c:	89 89       	ldd	r24, Y+17	; 0x11
    248e:	9a 89       	ldd	r25, Y+18	; 0x12
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	f1 f7       	brne	.-4      	; 0x2490 <LCD_init+0x2d6>
    2494:	9a 8b       	std	Y+18, r25	; 0x12
    2496:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2498:	8b 89       	ldd	r24, Y+19	; 0x13
    249a:	9c 89       	ldd	r25, Y+20	; 0x14
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	9c 8b       	std	Y+20, r25	; 0x14
    24a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a2:	8b 89       	ldd	r24, Y+19	; 0x13
    24a4:	9c 89       	ldd	r25, Y+20	; 0x14
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	69 f7       	brne	.-38     	; 0x2484 <LCD_init+0x2ca>
    24aa:	14 c0       	rjmp	.+40     	; 0x24d4 <LCD_init+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ac:	6d 89       	ldd	r22, Y+21	; 0x15
    24ae:	7e 89       	ldd	r23, Y+22	; 0x16
    24b0:	8f 89       	ldd	r24, Y+23	; 0x17
    24b2:	98 8d       	ldd	r25, Y+24	; 0x18
    24b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	9c 8b       	std	Y+20, r25	; 0x14
    24be:	8b 8b       	std	Y+19, r24	; 0x13
    24c0:	8b 89       	ldd	r24, Y+19	; 0x13
    24c2:	9c 89       	ldd	r25, Y+20	; 0x14
    24c4:	98 8b       	std	Y+16, r25	; 0x10
    24c6:	8f 87       	std	Y+15, r24	; 0x0f
    24c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ca:	98 89       	ldd	r25, Y+16	; 0x10
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	f1 f7       	brne	.-4      	; 0x24cc <LCD_init+0x312>
    24d0:	98 8b       	std	Y+16, r25	; 0x10
    24d2:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(40);

	LCD_writeCommand(0x00);
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_writeCommand>
	LCD_writeCommand(0x10);
    24da:	80 e1       	ldi	r24, 0x10	; 16
    24dc:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_writeCommand>
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	a0 e0       	ldi	r26, 0x00	; 0
    24e6:	b0 e4       	ldi	r27, 0x40	; 64
    24e8:	8b 87       	std	Y+11, r24	; 0x0b
    24ea:	9c 87       	std	Y+12, r25	; 0x0c
    24ec:	ad 87       	std	Y+13, r26	; 0x0d
    24ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	48 ec       	ldi	r20, 0xC8	; 200
    24fe:	53 e4       	ldi	r21, 0x43	; 67
    2500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	8f 83       	std	Y+7, r24	; 0x07
    250a:	98 87       	std	Y+8, r25	; 0x08
    250c:	a9 87       	std	Y+9, r26	; 0x09
    250e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2510:	6f 81       	ldd	r22, Y+7	; 0x07
    2512:	78 85       	ldd	r23, Y+8	; 0x08
    2514:	89 85       	ldd	r24, Y+9	; 0x09
    2516:	9a 85       	ldd	r25, Y+10	; 0x0a
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e8       	ldi	r20, 0x80	; 128
    251e:	5f e3       	ldi	r21, 0x3F	; 63
    2520:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2524:	88 23       	and	r24, r24
    2526:	2c f4       	brge	.+10     	; 0x2532 <LCD_init+0x378>
		__ticks = 1;
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	9e 83       	std	Y+6, r25	; 0x06
    252e:	8d 83       	std	Y+5, r24	; 0x05
    2530:	3f c0       	rjmp	.+126    	; 0x25b0 <LCD_init+0x3f6>
	else if (__tmp > 65535)
    2532:	6f 81       	ldd	r22, Y+7	; 0x07
    2534:	78 85       	ldd	r23, Y+8	; 0x08
    2536:	89 85       	ldd	r24, Y+9	; 0x09
    2538:	9a 85       	ldd	r25, Y+10	; 0x0a
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	3f ef       	ldi	r19, 0xFF	; 255
    253e:	4f e7       	ldi	r20, 0x7F	; 127
    2540:	57 e4       	ldi	r21, 0x47	; 71
    2542:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2546:	18 16       	cp	r1, r24
    2548:	4c f5       	brge	.+82     	; 0x259c <LCD_init+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    254a:	6b 85       	ldd	r22, Y+11	; 0x0b
    254c:	7c 85       	ldd	r23, Y+12	; 0x0c
    254e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2550:	9e 85       	ldd	r25, Y+14	; 0x0e
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	40 e2       	ldi	r20, 0x20	; 32
    2558:	51 e4       	ldi	r21, 0x41	; 65
    255a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	bc 01       	movw	r22, r24
    2564:	cd 01       	movw	r24, r26
    2566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	9e 83       	std	Y+6, r25	; 0x06
    2570:	8d 83       	std	Y+5, r24	; 0x05
    2572:	0f c0       	rjmp	.+30     	; 0x2592 <LCD_init+0x3d8>
    2574:	88 e2       	ldi	r24, 0x28	; 40
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	9c 83       	std	Y+4, r25	; 0x04
    257a:	8b 83       	std	Y+3, r24	; 0x03
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	9c 81       	ldd	r25, Y+4	; 0x04
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	f1 f7       	brne	.-4      	; 0x2580 <LCD_init+0x3c6>
    2584:	9c 83       	std	Y+4, r25	; 0x04
    2586:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2588:	8d 81       	ldd	r24, Y+5	; 0x05
    258a:	9e 81       	ldd	r25, Y+6	; 0x06
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	9e 83       	std	Y+6, r25	; 0x06
    2590:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2592:	8d 81       	ldd	r24, Y+5	; 0x05
    2594:	9e 81       	ldd	r25, Y+6	; 0x06
    2596:	00 97       	sbiw	r24, 0x00	; 0
    2598:	69 f7       	brne	.-38     	; 0x2574 <LCD_init+0x3ba>
    259a:	14 c0       	rjmp	.+40     	; 0x25c4 <LCD_init+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259c:	6f 81       	ldd	r22, Y+7	; 0x07
    259e:	78 85       	ldd	r23, Y+8	; 0x08
    25a0:	89 85       	ldd	r24, Y+9	; 0x09
    25a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	9e 83       	std	Y+6, r25	; 0x06
    25ae:	8d 83       	std	Y+5, r24	; 0x05
    25b0:	8d 81       	ldd	r24, Y+5	; 0x05
    25b2:	9e 81       	ldd	r25, Y+6	; 0x06
    25b4:	9a 83       	std	Y+2, r25	; 0x02
    25b6:	89 83       	std	Y+1, r24	; 0x01
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	9a 81       	ldd	r25, Y+2	; 0x02
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	f1 f7       	brne	.-4      	; 0x25bc <LCD_init+0x402>
    25c0:	9a 83       	std	Y+2, r25	; 0x02
    25c2:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	InitFinished = 1;
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	80 93 8a 00 	sts	0x008A, r24
}
    25ca:	e8 96       	adiw	r28, 0x38	; 56
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	cd bf       	out	0x3d, r28	; 61
    25d6:	cf 91       	pop	r28
    25d8:	df 91       	pop	r29
    25da:	08 95       	ret

000025dc <LCD_writeCommand>:

void LCD_writeCommand(uint8 command)
{
    25dc:	df 93       	push	r29
    25de:	cf 93       	push	r28
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	ab 97       	sbiw	r28, 0x2b	; 43
    25e6:	0f b6       	in	r0, 0x3f	; 63
    25e8:	f8 94       	cli
    25ea:	de bf       	out	0x3e, r29	; 62
    25ec:	0f be       	out	0x3f, r0	; 63
    25ee:	cd bf       	out	0x3d, r28	; 61
    25f0:	8b a7       	std	Y+43, r24	; 0x2b
	GPIO_SetupPin_Value(PORTA_ID,LCD_RS_PIN,LOGIC_LOW);/*RS*/
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	63 e0       	ldi	r22, 0x03	; 3
    25f6:	40 e0       	ldi	r20, 0x00	; 0
    25f8:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>

	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN1,GET_BIT(command,4));
    25fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    25fe:	82 95       	swap	r24
    2600:	8f 70       	andi	r24, 0x0F	; 15
    2602:	98 2f       	mov	r25, r24
    2604:	91 70       	andi	r25, 0x01	; 1
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	60 e0       	ldi	r22, 0x00	; 0
    260a:	49 2f       	mov	r20, r25
    260c:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN2,GET_BIT(command,5));
    2610:	8b a5       	ldd	r24, Y+43	; 0x2b
    2612:	82 95       	swap	r24
    2614:	86 95       	lsr	r24
    2616:	87 70       	andi	r24, 0x07	; 7
    2618:	98 2f       	mov	r25, r24
    261a:	91 70       	andi	r25, 0x01	; 1
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	61 e0       	ldi	r22, 0x01	; 1
    2620:	49 2f       	mov	r20, r25
    2622:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN3,GET_BIT(command,6));
    2626:	8b a5       	ldd	r24, Y+43	; 0x2b
    2628:	82 95       	swap	r24
    262a:	86 95       	lsr	r24
    262c:	86 95       	lsr	r24
    262e:	83 70       	andi	r24, 0x03	; 3
    2630:	98 2f       	mov	r25, r24
    2632:	91 70       	andi	r25, 0x01	; 1
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	62 e0       	ldi	r22, 0x02	; 2
    2638:	49 2f       	mov	r20, r25
    263a:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN4,GET_BIT(command,7));
    263e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2640:	98 2f       	mov	r25, r24
    2642:	99 1f       	adc	r25, r25
    2644:	99 27       	eor	r25, r25
    2646:	99 1f       	adc	r25, r25
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	64 e0       	ldi	r22, 0x04	; 4
    264c:	49 2f       	mov	r20, r25
    264e:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>

	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_HIGH);/*EN*/
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	62 e0       	ldi	r22, 0x02	; 2
    2656:	41 e0       	ldi	r20, 0x01	; 1
    2658:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	a0 e8       	ldi	r26, 0x80	; 128
    2662:	b0 e4       	ldi	r27, 0x40	; 64
    2664:	8f a3       	std	Y+39, r24	; 0x27
    2666:	98 a7       	std	Y+40, r25	; 0x28
    2668:	a9 a7       	std	Y+41, r26	; 0x29
    266a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    266c:	6f a1       	ldd	r22, Y+39	; 0x27
    266e:	78 a5       	ldd	r23, Y+40	; 0x28
    2670:	89 a5       	ldd	r24, Y+41	; 0x29
    2672:	9a a5       	ldd	r25, Y+42	; 0x2a
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	48 ec       	ldi	r20, 0xC8	; 200
    267a:	53 e4       	ldi	r21, 0x43	; 67
    267c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	8b a3       	std	Y+35, r24	; 0x23
    2686:	9c a3       	std	Y+36, r25	; 0x24
    2688:	ad a3       	std	Y+37, r26	; 0x25
    268a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    268c:	6b a1       	ldd	r22, Y+35	; 0x23
    268e:	7c a1       	ldd	r23, Y+36	; 0x24
    2690:	8d a1       	ldd	r24, Y+37	; 0x25
    2692:	9e a1       	ldd	r25, Y+38	; 0x26
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e8       	ldi	r20, 0x80	; 128
    269a:	5f e3       	ldi	r21, 0x3F	; 63
    269c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26a0:	88 23       	and	r24, r24
    26a2:	2c f4       	brge	.+10     	; 0x26ae <LCD_writeCommand+0xd2>
		__ticks = 1;
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	9a a3       	std	Y+34, r25	; 0x22
    26aa:	89 a3       	std	Y+33, r24	; 0x21
    26ac:	3f c0       	rjmp	.+126    	; 0x272c <LCD_writeCommand+0x150>
	else if (__tmp > 65535)
    26ae:	6b a1       	ldd	r22, Y+35	; 0x23
    26b0:	7c a1       	ldd	r23, Y+36	; 0x24
    26b2:	8d a1       	ldd	r24, Y+37	; 0x25
    26b4:	9e a1       	ldd	r25, Y+38	; 0x26
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	3f ef       	ldi	r19, 0xFF	; 255
    26ba:	4f e7       	ldi	r20, 0x7F	; 127
    26bc:	57 e4       	ldi	r21, 0x47	; 71
    26be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26c2:	18 16       	cp	r1, r24
    26c4:	4c f5       	brge	.+82     	; 0x2718 <LCD_writeCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c6:	6f a1       	ldd	r22, Y+39	; 0x27
    26c8:	78 a5       	ldd	r23, Y+40	; 0x28
    26ca:	89 a5       	ldd	r24, Y+41	; 0x29
    26cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	40 e2       	ldi	r20, 0x20	; 32
    26d4:	51 e4       	ldi	r21, 0x41	; 65
    26d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	bc 01       	movw	r22, r24
    26e0:	cd 01       	movw	r24, r26
    26e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	9a a3       	std	Y+34, r25	; 0x22
    26ec:	89 a3       	std	Y+33, r24	; 0x21
    26ee:	0f c0       	rjmp	.+30     	; 0x270e <LCD_writeCommand+0x132>
    26f0:	88 e2       	ldi	r24, 0x28	; 40
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	98 a3       	std	Y+32, r25	; 0x20
    26f6:	8f 8f       	std	Y+31, r24	; 0x1f
    26f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26fa:	98 a1       	ldd	r25, Y+32	; 0x20
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	f1 f7       	brne	.-4      	; 0x26fc <LCD_writeCommand+0x120>
    2700:	98 a3       	std	Y+32, r25	; 0x20
    2702:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2704:	89 a1       	ldd	r24, Y+33	; 0x21
    2706:	9a a1       	ldd	r25, Y+34	; 0x22
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	9a a3       	std	Y+34, r25	; 0x22
    270c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270e:	89 a1       	ldd	r24, Y+33	; 0x21
    2710:	9a a1       	ldd	r25, Y+34	; 0x22
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	69 f7       	brne	.-38     	; 0x26f0 <LCD_writeCommand+0x114>
    2716:	14 c0       	rjmp	.+40     	; 0x2740 <LCD_writeCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2718:	6b a1       	ldd	r22, Y+35	; 0x23
    271a:	7c a1       	ldd	r23, Y+36	; 0x24
    271c:	8d a1       	ldd	r24, Y+37	; 0x25
    271e:	9e a1       	ldd	r25, Y+38	; 0x26
    2720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	9a a3       	std	Y+34, r25	; 0x22
    272a:	89 a3       	std	Y+33, r24	; 0x21
    272c:	89 a1       	ldd	r24, Y+33	; 0x21
    272e:	9a a1       	ldd	r25, Y+34	; 0x22
    2730:	9e 8f       	std	Y+30, r25	; 0x1e
    2732:	8d 8f       	std	Y+29, r24	; 0x1d
    2734:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2736:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	f1 f7       	brne	.-4      	; 0x2738 <LCD_writeCommand+0x15c>
    273c:	9e 8f       	std	Y+30, r25	; 0x1e
    273e:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(4);
	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_LOW);/*EN*/
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	62 e0       	ldi	r22, 0x02	; 2
    2744:	40 e0       	ldi	r20, 0x00	; 0
    2746:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>

	// _delay_ms(4);

	if(InitFinished)
    274a:	80 91 8a 00 	lds	r24, 0x008A
    274e:	88 23       	and	r24, r24
    2750:	09 f4       	brne	.+2      	; 0x2754 <LCD_writeCommand+0x178>
    2752:	a2 c0       	rjmp	.+324    	; 0x2898 <LCD_writeCommand+0x2bc>
	{
		GPIO_SetupPin_Value(PORTB_ID,LCD_PIN1,GET_BIT(command,0));
    2754:	8b a5       	ldd	r24, Y+43	; 0x2b
    2756:	98 2f       	mov	r25, r24
    2758:	91 70       	andi	r25, 0x01	; 1
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	60 e0       	ldi	r22, 0x00	; 0
    275e:	49 2f       	mov	r20, r25
    2760:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
		GPIO_SetupPin_Value(PORTB_ID,LCD_PIN2,GET_BIT(command,1));
    2764:	8b a5       	ldd	r24, Y+43	; 0x2b
    2766:	86 95       	lsr	r24
    2768:	98 2f       	mov	r25, r24
    276a:	91 70       	andi	r25, 0x01	; 1
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	61 e0       	ldi	r22, 0x01	; 1
    2770:	49 2f       	mov	r20, r25
    2772:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
		GPIO_SetupPin_Value(PORTB_ID,LCD_PIN3,GET_BIT(command,2));
    2776:	8b a5       	ldd	r24, Y+43	; 0x2b
    2778:	86 95       	lsr	r24
    277a:	86 95       	lsr	r24
    277c:	98 2f       	mov	r25, r24
    277e:	91 70       	andi	r25, 0x01	; 1
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	62 e0       	ldi	r22, 0x02	; 2
    2784:	49 2f       	mov	r20, r25
    2786:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
		GPIO_SetupPin_Value(PORTB_ID,LCD_PIN4,GET_BIT(command,3));
    278a:	8b a5       	ldd	r24, Y+43	; 0x2b
    278c:	86 95       	lsr	r24
    278e:	86 95       	lsr	r24
    2790:	86 95       	lsr	r24
    2792:	98 2f       	mov	r25, r24
    2794:	91 70       	andi	r25, 0x01	; 1
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	64 e0       	ldi	r22, 0x04	; 4
    279a:	49 2f       	mov	r20, r25
    279c:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>

		GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_HIGH);/*EN*/
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	62 e0       	ldi	r22, 0x02	; 2
    27a4:	41 e0       	ldi	r20, 0x01	; 1
    27a6:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	a0 e8       	ldi	r26, 0x80	; 128
    27b0:	b0 e4       	ldi	r27, 0x40	; 64
    27b2:	89 8f       	std	Y+25, r24	; 0x19
    27b4:	9a 8f       	std	Y+26, r25	; 0x1a
    27b6:	ab 8f       	std	Y+27, r26	; 0x1b
    27b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ba:	69 8d       	ldd	r22, Y+25	; 0x19
    27bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	48 ec       	ldi	r20, 0xC8	; 200
    27c8:	53 e4       	ldi	r21, 0x43	; 67
    27ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	8d 8b       	std	Y+21, r24	; 0x15
    27d4:	9e 8b       	std	Y+22, r25	; 0x16
    27d6:	af 8b       	std	Y+23, r26	; 0x17
    27d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27da:	6d 89       	ldd	r22, Y+21	; 0x15
    27dc:	7e 89       	ldd	r23, Y+22	; 0x16
    27de:	8f 89       	ldd	r24, Y+23	; 0x17
    27e0:	98 8d       	ldd	r25, Y+24	; 0x18
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	40 e8       	ldi	r20, 0x80	; 128
    27e8:	5f e3       	ldi	r21, 0x3F	; 63
    27ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ee:	88 23       	and	r24, r24
    27f0:	2c f4       	brge	.+10     	; 0x27fc <LCD_writeCommand+0x220>
		__ticks = 1;
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	9c 8b       	std	Y+20, r25	; 0x14
    27f8:	8b 8b       	std	Y+19, r24	; 0x13
    27fa:	3f c0       	rjmp	.+126    	; 0x287a <LCD_writeCommand+0x29e>
	else if (__tmp > 65535)
    27fc:	6d 89       	ldd	r22, Y+21	; 0x15
    27fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2800:	8f 89       	ldd	r24, Y+23	; 0x17
    2802:	98 8d       	ldd	r25, Y+24	; 0x18
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	3f ef       	ldi	r19, 0xFF	; 255
    2808:	4f e7       	ldi	r20, 0x7F	; 127
    280a:	57 e4       	ldi	r21, 0x47	; 71
    280c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2810:	18 16       	cp	r1, r24
    2812:	4c f5       	brge	.+82     	; 0x2866 <LCD_writeCommand+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2814:	69 8d       	ldd	r22, Y+25	; 0x19
    2816:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2818:	8b 8d       	ldd	r24, Y+27	; 0x1b
    281a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e2       	ldi	r20, 0x20	; 32
    2822:	51 e4       	ldi	r21, 0x41	; 65
    2824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	bc 01       	movw	r22, r24
    282e:	cd 01       	movw	r24, r26
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	9c 8b       	std	Y+20, r25	; 0x14
    283a:	8b 8b       	std	Y+19, r24	; 0x13
    283c:	0f c0       	rjmp	.+30     	; 0x285c <LCD_writeCommand+0x280>
    283e:	88 e2       	ldi	r24, 0x28	; 40
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	9a 8b       	std	Y+18, r25	; 0x12
    2844:	89 8b       	std	Y+17, r24	; 0x11
    2846:	89 89       	ldd	r24, Y+17	; 0x11
    2848:	9a 89       	ldd	r25, Y+18	; 0x12
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	f1 f7       	brne	.-4      	; 0x284a <LCD_writeCommand+0x26e>
    284e:	9a 8b       	std	Y+18, r25	; 0x12
    2850:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2852:	8b 89       	ldd	r24, Y+19	; 0x13
    2854:	9c 89       	ldd	r25, Y+20	; 0x14
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	9c 8b       	std	Y+20, r25	; 0x14
    285a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285c:	8b 89       	ldd	r24, Y+19	; 0x13
    285e:	9c 89       	ldd	r25, Y+20	; 0x14
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	69 f7       	brne	.-38     	; 0x283e <LCD_writeCommand+0x262>
    2864:	14 c0       	rjmp	.+40     	; 0x288e <LCD_writeCommand+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2866:	6d 89       	ldd	r22, Y+21	; 0x15
    2868:	7e 89       	ldd	r23, Y+22	; 0x16
    286a:	8f 89       	ldd	r24, Y+23	; 0x17
    286c:	98 8d       	ldd	r25, Y+24	; 0x18
    286e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	9c 8b       	std	Y+20, r25	; 0x14
    2878:	8b 8b       	std	Y+19, r24	; 0x13
    287a:	8b 89       	ldd	r24, Y+19	; 0x13
    287c:	9c 89       	ldd	r25, Y+20	; 0x14
    287e:	98 8b       	std	Y+16, r25	; 0x10
    2880:	8f 87       	std	Y+15, r24	; 0x0f
    2882:	8f 85       	ldd	r24, Y+15	; 0x0f
    2884:	98 89       	ldd	r25, Y+16	; 0x10
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	f1 f7       	brne	.-4      	; 0x2886 <LCD_writeCommand+0x2aa>
    288a:	98 8b       	std	Y+16, r25	; 0x10
    288c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(4);
		GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_LOW);/*EN*/
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	62 e0       	ldi	r22, 0x02	; 2
    2892:	40 e0       	ldi	r20, 0x00	; 0
    2894:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	a0 e8       	ldi	r26, 0x80	; 128
    289e:	b0 e4       	ldi	r27, 0x40	; 64
    28a0:	8b 87       	std	Y+11, r24	; 0x0b
    28a2:	9c 87       	std	Y+12, r25	; 0x0c
    28a4:	ad 87       	std	Y+13, r26	; 0x0d
    28a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	48 ec       	ldi	r20, 0xC8	; 200
    28b6:	53 e4       	ldi	r21, 0x43	; 67
    28b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	8f 83       	std	Y+7, r24	; 0x07
    28c2:	98 87       	std	Y+8, r25	; 0x08
    28c4:	a9 87       	std	Y+9, r26	; 0x09
    28c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28c8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ca:	78 85       	ldd	r23, Y+8	; 0x08
    28cc:	89 85       	ldd	r24, Y+9	; 0x09
    28ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	40 e8       	ldi	r20, 0x80	; 128
    28d6:	5f e3       	ldi	r21, 0x3F	; 63
    28d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28dc:	88 23       	and	r24, r24
    28de:	2c f4       	brge	.+10     	; 0x28ea <LCD_writeCommand+0x30e>
		__ticks = 1;
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	9e 83       	std	Y+6, r25	; 0x06
    28e6:	8d 83       	std	Y+5, r24	; 0x05
    28e8:	3f c0       	rjmp	.+126    	; 0x2968 <LCD_writeCommand+0x38c>
	else if (__tmp > 65535)
    28ea:	6f 81       	ldd	r22, Y+7	; 0x07
    28ec:	78 85       	ldd	r23, Y+8	; 0x08
    28ee:	89 85       	ldd	r24, Y+9	; 0x09
    28f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	3f ef       	ldi	r19, 0xFF	; 255
    28f6:	4f e7       	ldi	r20, 0x7F	; 127
    28f8:	57 e4       	ldi	r21, 0x47	; 71
    28fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28fe:	18 16       	cp	r1, r24
    2900:	4c f5       	brge	.+82     	; 0x2954 <LCD_writeCommand+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2902:	6b 85       	ldd	r22, Y+11	; 0x0b
    2904:	7c 85       	ldd	r23, Y+12	; 0x0c
    2906:	8d 85       	ldd	r24, Y+13	; 0x0d
    2908:	9e 85       	ldd	r25, Y+14	; 0x0e
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	40 e2       	ldi	r20, 0x20	; 32
    2910:	51 e4       	ldi	r21, 0x41	; 65
    2912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	bc 01       	movw	r22, r24
    291c:	cd 01       	movw	r24, r26
    291e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	9e 83       	std	Y+6, r25	; 0x06
    2928:	8d 83       	std	Y+5, r24	; 0x05
    292a:	0f c0       	rjmp	.+30     	; 0x294a <LCD_writeCommand+0x36e>
    292c:	88 e2       	ldi	r24, 0x28	; 40
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	9c 83       	std	Y+4, r25	; 0x04
    2932:	8b 83       	std	Y+3, r24	; 0x03
    2934:	8b 81       	ldd	r24, Y+3	; 0x03
    2936:	9c 81       	ldd	r25, Y+4	; 0x04
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	f1 f7       	brne	.-4      	; 0x2938 <LCD_writeCommand+0x35c>
    293c:	9c 83       	std	Y+4, r25	; 0x04
    293e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2940:	8d 81       	ldd	r24, Y+5	; 0x05
    2942:	9e 81       	ldd	r25, Y+6	; 0x06
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	9e 83       	std	Y+6, r25	; 0x06
    2948:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294a:	8d 81       	ldd	r24, Y+5	; 0x05
    294c:	9e 81       	ldd	r25, Y+6	; 0x06
    294e:	00 97       	sbiw	r24, 0x00	; 0
    2950:	69 f7       	brne	.-38     	; 0x292c <LCD_writeCommand+0x350>
    2952:	14 c0       	rjmp	.+40     	; 0x297c <LCD_writeCommand+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2954:	6f 81       	ldd	r22, Y+7	; 0x07
    2956:	78 85       	ldd	r23, Y+8	; 0x08
    2958:	89 85       	ldd	r24, Y+9	; 0x09
    295a:	9a 85       	ldd	r25, Y+10	; 0x0a
    295c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	9e 83       	std	Y+6, r25	; 0x06
    2966:	8d 83       	std	Y+5, r24	; 0x05
    2968:	8d 81       	ldd	r24, Y+5	; 0x05
    296a:	9e 81       	ldd	r25, Y+6	; 0x06
    296c:	9a 83       	std	Y+2, r25	; 0x02
    296e:	89 83       	std	Y+1, r24	; 0x01
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	9a 81       	ldd	r25, Y+2	; 0x02
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	f1 f7       	brne	.-4      	; 0x2974 <LCD_writeCommand+0x398>
    2978:	9a 83       	std	Y+2, r25	; 0x02
    297a:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(4);
}
    297c:	ab 96       	adiw	r28, 0x2b	; 43
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	f8 94       	cli
    2982:	de bf       	out	0x3e, r29	; 62
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	cf 91       	pop	r28
    298a:	df 91       	pop	r29
    298c:	08 95       	ret

0000298e <LCD_writeData>:
void LCD_writeData(uint8 command)
{
    298e:	df 93       	push	r29
    2990:	cf 93       	push	r28
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
    2996:	e9 97       	sbiw	r28, 0x39	; 57
    2998:	0f b6       	in	r0, 0x3f	; 63
    299a:	f8 94       	cli
    299c:	de bf       	out	0x3e, r29	; 62
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	cd bf       	out	0x3d, r28	; 61
    29a2:	89 af       	std	Y+57, r24	; 0x39

	GPIO_SetupPin_Value(PORTA_ID,LCD_RS_PIN,LOGIC_HIGH);
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	63 e0       	ldi	r22, 0x03	; 3
    29a8:	41 e0       	ldi	r20, 0x01	; 1
    29aa:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>

	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN1,GET_BIT(command,4));
    29ae:	89 ad       	ldd	r24, Y+57	; 0x39
    29b0:	82 95       	swap	r24
    29b2:	8f 70       	andi	r24, 0x0F	; 15
    29b4:	98 2f       	mov	r25, r24
    29b6:	91 70       	andi	r25, 0x01	; 1
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	60 e0       	ldi	r22, 0x00	; 0
    29bc:	49 2f       	mov	r20, r25
    29be:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN2,GET_BIT(command,5));
    29c2:	89 ad       	ldd	r24, Y+57	; 0x39
    29c4:	82 95       	swap	r24
    29c6:	86 95       	lsr	r24
    29c8:	87 70       	andi	r24, 0x07	; 7
    29ca:	98 2f       	mov	r25, r24
    29cc:	91 70       	andi	r25, 0x01	; 1
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	61 e0       	ldi	r22, 0x01	; 1
    29d2:	49 2f       	mov	r20, r25
    29d4:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN3,GET_BIT(command,6));
    29d8:	89 ad       	ldd	r24, Y+57	; 0x39
    29da:	82 95       	swap	r24
    29dc:	86 95       	lsr	r24
    29de:	86 95       	lsr	r24
    29e0:	83 70       	andi	r24, 0x03	; 3
    29e2:	98 2f       	mov	r25, r24
    29e4:	91 70       	andi	r25, 0x01	; 1
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	62 e0       	ldi	r22, 0x02	; 2
    29ea:	49 2f       	mov	r20, r25
    29ec:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN4,GET_BIT(command,7));
    29f0:	89 ad       	ldd	r24, Y+57	; 0x39
    29f2:	98 2f       	mov	r25, r24
    29f4:	99 1f       	adc	r25, r25
    29f6:	99 27       	eor	r25, r25
    29f8:	99 1f       	adc	r25, r25
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	64 e0       	ldi	r22, 0x04	; 4
    29fe:	49 2f       	mov	r20, r25
    2a00:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>

	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_HIGH);/*EN*/
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	62 e0       	ldi	r22, 0x02	; 2
    2a08:	41 e0       	ldi	r20, 0x01	; 1
    2a0a:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	a0 e0       	ldi	r26, 0x00	; 0
    2a14:	b0 e4       	ldi	r27, 0x40	; 64
    2a16:	8d ab       	std	Y+53, r24	; 0x35
    2a18:	9e ab       	std	Y+54, r25	; 0x36
    2a1a:	af ab       	std	Y+55, r26	; 0x37
    2a1c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1e:	6d a9       	ldd	r22, Y+53	; 0x35
    2a20:	7e a9       	ldd	r23, Y+54	; 0x36
    2a22:	8f a9       	ldd	r24, Y+55	; 0x37
    2a24:	98 ad       	ldd	r25, Y+56	; 0x38
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	48 ec       	ldi	r20, 0xC8	; 200
    2a2c:	53 e4       	ldi	r21, 0x43	; 67
    2a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	89 ab       	std	Y+49, r24	; 0x31
    2a38:	9a ab       	std	Y+50, r25	; 0x32
    2a3a:	ab ab       	std	Y+51, r26	; 0x33
    2a3c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a3e:	69 a9       	ldd	r22, Y+49	; 0x31
    2a40:	7a a9       	ldd	r23, Y+50	; 0x32
    2a42:	8b a9       	ldd	r24, Y+51	; 0x33
    2a44:	9c a9       	ldd	r25, Y+52	; 0x34
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	40 e8       	ldi	r20, 0x80	; 128
    2a4c:	5f e3       	ldi	r21, 0x3F	; 63
    2a4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a52:	88 23       	and	r24, r24
    2a54:	2c f4       	brge	.+10     	; 0x2a60 <LCD_writeData+0xd2>
		__ticks = 1;
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	98 ab       	std	Y+48, r25	; 0x30
    2a5c:	8f a7       	std	Y+47, r24	; 0x2f
    2a5e:	3f c0       	rjmp	.+126    	; 0x2ade <LCD_writeData+0x150>
	else if (__tmp > 65535)
    2a60:	69 a9       	ldd	r22, Y+49	; 0x31
    2a62:	7a a9       	ldd	r23, Y+50	; 0x32
    2a64:	8b a9       	ldd	r24, Y+51	; 0x33
    2a66:	9c a9       	ldd	r25, Y+52	; 0x34
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	3f ef       	ldi	r19, 0xFF	; 255
    2a6c:	4f e7       	ldi	r20, 0x7F	; 127
    2a6e:	57 e4       	ldi	r21, 0x47	; 71
    2a70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a74:	18 16       	cp	r1, r24
    2a76:	4c f5       	brge	.+82     	; 0x2aca <LCD_writeData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a78:	6d a9       	ldd	r22, Y+53	; 0x35
    2a7a:	7e a9       	ldd	r23, Y+54	; 0x36
    2a7c:	8f a9       	ldd	r24, Y+55	; 0x37
    2a7e:	98 ad       	ldd	r25, Y+56	; 0x38
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	40 e2       	ldi	r20, 0x20	; 32
    2a86:	51 e4       	ldi	r21, 0x41	; 65
    2a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	bc 01       	movw	r22, r24
    2a92:	cd 01       	movw	r24, r26
    2a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	98 ab       	std	Y+48, r25	; 0x30
    2a9e:	8f a7       	std	Y+47, r24	; 0x2f
    2aa0:	0f c0       	rjmp	.+30     	; 0x2ac0 <LCD_writeData+0x132>
    2aa2:	88 e2       	ldi	r24, 0x28	; 40
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	9e a7       	std	Y+46, r25	; 0x2e
    2aa8:	8d a7       	std	Y+45, r24	; 0x2d
    2aaa:	8d a5       	ldd	r24, Y+45	; 0x2d
    2aac:	9e a5       	ldd	r25, Y+46	; 0x2e
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	f1 f7       	brne	.-4      	; 0x2aae <LCD_writeData+0x120>
    2ab2:	9e a7       	std	Y+46, r25	; 0x2e
    2ab4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ab8:	98 a9       	ldd	r25, Y+48	; 0x30
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	98 ab       	std	Y+48, r25	; 0x30
    2abe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ac2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ac4:	00 97       	sbiw	r24, 0x00	; 0
    2ac6:	69 f7       	brne	.-38     	; 0x2aa2 <LCD_writeData+0x114>
    2ac8:	14 c0       	rjmp	.+40     	; 0x2af2 <LCD_writeData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aca:	69 a9       	ldd	r22, Y+49	; 0x31
    2acc:	7a a9       	ldd	r23, Y+50	; 0x32
    2ace:	8b a9       	ldd	r24, Y+51	; 0x33
    2ad0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	98 ab       	std	Y+48, r25	; 0x30
    2adc:	8f a7       	std	Y+47, r24	; 0x2f
    2ade:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ae0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ae2:	9c a7       	std	Y+44, r25	; 0x2c
    2ae4:	8b a7       	std	Y+43, r24	; 0x2b
    2ae6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ae8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <LCD_writeData+0x15c>
    2aee:	9c a7       	std	Y+44, r25	; 0x2c
    2af0:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2);
	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_LOW);/*EN*/
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	62 e0       	ldi	r22, 0x02	; 2
    2af6:	40 e0       	ldi	r20, 0x00	; 0
    2af8:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	a0 e0       	ldi	r26, 0x00	; 0
    2b02:	b0 e4       	ldi	r27, 0x40	; 64
    2b04:	8f a3       	std	Y+39, r24	; 0x27
    2b06:	98 a7       	std	Y+40, r25	; 0x28
    2b08:	a9 a7       	std	Y+41, r26	; 0x29
    2b0a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0c:	6f a1       	ldd	r22, Y+39	; 0x27
    2b0e:	78 a5       	ldd	r23, Y+40	; 0x28
    2b10:	89 a5       	ldd	r24, Y+41	; 0x29
    2b12:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	48 ec       	ldi	r20, 0xC8	; 200
    2b1a:	53 e4       	ldi	r21, 0x43	; 67
    2b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	8b a3       	std	Y+35, r24	; 0x23
    2b26:	9c a3       	std	Y+36, r25	; 0x24
    2b28:	ad a3       	std	Y+37, r26	; 0x25
    2b2a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b2c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b2e:	7c a1       	ldd	r23, Y+36	; 0x24
    2b30:	8d a1       	ldd	r24, Y+37	; 0x25
    2b32:	9e a1       	ldd	r25, Y+38	; 0x26
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e8       	ldi	r20, 0x80	; 128
    2b3a:	5f e3       	ldi	r21, 0x3F	; 63
    2b3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b40:	88 23       	and	r24, r24
    2b42:	2c f4       	brge	.+10     	; 0x2b4e <LCD_writeData+0x1c0>
		__ticks = 1;
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	9a a3       	std	Y+34, r25	; 0x22
    2b4a:	89 a3       	std	Y+33, r24	; 0x21
    2b4c:	3f c0       	rjmp	.+126    	; 0x2bcc <LCD_writeData+0x23e>
	else if (__tmp > 65535)
    2b4e:	6b a1       	ldd	r22, Y+35	; 0x23
    2b50:	7c a1       	ldd	r23, Y+36	; 0x24
    2b52:	8d a1       	ldd	r24, Y+37	; 0x25
    2b54:	9e a1       	ldd	r25, Y+38	; 0x26
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	3f ef       	ldi	r19, 0xFF	; 255
    2b5a:	4f e7       	ldi	r20, 0x7F	; 127
    2b5c:	57 e4       	ldi	r21, 0x47	; 71
    2b5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b62:	18 16       	cp	r1, r24
    2b64:	4c f5       	brge	.+82     	; 0x2bb8 <LCD_writeData+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b66:	6f a1       	ldd	r22, Y+39	; 0x27
    2b68:	78 a5       	ldd	r23, Y+40	; 0x28
    2b6a:	89 a5       	ldd	r24, Y+41	; 0x29
    2b6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e2       	ldi	r20, 0x20	; 32
    2b74:	51 e4       	ldi	r21, 0x41	; 65
    2b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	bc 01       	movw	r22, r24
    2b80:	cd 01       	movw	r24, r26
    2b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	9a a3       	std	Y+34, r25	; 0x22
    2b8c:	89 a3       	std	Y+33, r24	; 0x21
    2b8e:	0f c0       	rjmp	.+30     	; 0x2bae <LCD_writeData+0x220>
    2b90:	88 e2       	ldi	r24, 0x28	; 40
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	98 a3       	std	Y+32, r25	; 0x20
    2b96:	8f 8f       	std	Y+31, r24	; 0x1f
    2b98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b9a:	98 a1       	ldd	r25, Y+32	; 0x20
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	f1 f7       	brne	.-4      	; 0x2b9c <LCD_writeData+0x20e>
    2ba0:	98 a3       	std	Y+32, r25	; 0x20
    2ba2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ba6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	9a a3       	std	Y+34, r25	; 0x22
    2bac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bae:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb0:	9a a1       	ldd	r25, Y+34	; 0x22
    2bb2:	00 97       	sbiw	r24, 0x00	; 0
    2bb4:	69 f7       	brne	.-38     	; 0x2b90 <LCD_writeData+0x202>
    2bb6:	14 c0       	rjmp	.+40     	; 0x2be0 <LCD_writeData+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb8:	6b a1       	ldd	r22, Y+35	; 0x23
    2bba:	7c a1       	ldd	r23, Y+36	; 0x24
    2bbc:	8d a1       	ldd	r24, Y+37	; 0x25
    2bbe:	9e a1       	ldd	r25, Y+38	; 0x26
    2bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	9a a3       	std	Y+34, r25	; 0x22
    2bca:	89 a3       	std	Y+33, r24	; 0x21
    2bcc:	89 a1       	ldd	r24, Y+33	; 0x21
    2bce:	9a a1       	ldd	r25, Y+34	; 0x22
    2bd0:	9e 8f       	std	Y+30, r25	; 0x1e
    2bd2:	8d 8f       	std	Y+29, r24	; 0x1d
    2bd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bd6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	f1 f7       	brne	.-4      	; 0x2bd8 <LCD_writeData+0x24a>
    2bdc:	9e 8f       	std	Y+30, r25	; 0x1e
    2bde:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(2);

	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN1,GET_BIT(command,0));
    2be0:	89 ad       	ldd	r24, Y+57	; 0x39
    2be2:	98 2f       	mov	r25, r24
    2be4:	91 70       	andi	r25, 0x01	; 1
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	60 e0       	ldi	r22, 0x00	; 0
    2bea:	49 2f       	mov	r20, r25
    2bec:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN2,GET_BIT(command,1));
    2bf0:	89 ad       	ldd	r24, Y+57	; 0x39
    2bf2:	86 95       	lsr	r24
    2bf4:	98 2f       	mov	r25, r24
    2bf6:	91 70       	andi	r25, 0x01	; 1
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	61 e0       	ldi	r22, 0x01	; 1
    2bfc:	49 2f       	mov	r20, r25
    2bfe:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN3,GET_BIT(command,2));
    2c02:	89 ad       	ldd	r24, Y+57	; 0x39
    2c04:	86 95       	lsr	r24
    2c06:	86 95       	lsr	r24
    2c08:	98 2f       	mov	r25, r24
    2c0a:	91 70       	andi	r25, 0x01	; 1
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	62 e0       	ldi	r22, 0x02	; 2
    2c10:	49 2f       	mov	r20, r25
    2c12:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN4,GET_BIT(command,3));
    2c16:	89 ad       	ldd	r24, Y+57	; 0x39
    2c18:	86 95       	lsr	r24
    2c1a:	86 95       	lsr	r24
    2c1c:	86 95       	lsr	r24
    2c1e:	98 2f       	mov	r25, r24
    2c20:	91 70       	andi	r25, 0x01	; 1
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	64 e0       	ldi	r22, 0x04	; 4
    2c26:	49 2f       	mov	r20, r25
    2c28:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>


	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_HIGH);/*EN*/
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	62 e0       	ldi	r22, 0x02	; 2
    2c30:	41 e0       	ldi	r20, 0x01	; 1
    2c32:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	a0 e0       	ldi	r26, 0x00	; 0
    2c3c:	b0 e4       	ldi	r27, 0x40	; 64
    2c3e:	89 8f       	std	Y+25, r24	; 0x19
    2c40:	9a 8f       	std	Y+26, r25	; 0x1a
    2c42:	ab 8f       	std	Y+27, r26	; 0x1b
    2c44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c46:	69 8d       	ldd	r22, Y+25	; 0x19
    2c48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	48 ec       	ldi	r20, 0xC8	; 200
    2c54:	53 e4       	ldi	r21, 0x43	; 67
    2c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	8d 8b       	std	Y+21, r24	; 0x15
    2c60:	9e 8b       	std	Y+22, r25	; 0x16
    2c62:	af 8b       	std	Y+23, r26	; 0x17
    2c64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c66:	6d 89       	ldd	r22, Y+21	; 0x15
    2c68:	7e 89       	ldd	r23, Y+22	; 0x16
    2c6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	40 e8       	ldi	r20, 0x80	; 128
    2c74:	5f e3       	ldi	r21, 0x3F	; 63
    2c76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c7a:	88 23       	and	r24, r24
    2c7c:	2c f4       	brge	.+10     	; 0x2c88 <LCD_writeData+0x2fa>
		__ticks = 1;
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	9c 8b       	std	Y+20, r25	; 0x14
    2c84:	8b 8b       	std	Y+19, r24	; 0x13
    2c86:	3f c0       	rjmp	.+126    	; 0x2d06 <LCD_writeData+0x378>
	else if (__tmp > 65535)
    2c88:	6d 89       	ldd	r22, Y+21	; 0x15
    2c8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	3f ef       	ldi	r19, 0xFF	; 255
    2c94:	4f e7       	ldi	r20, 0x7F	; 127
    2c96:	57 e4       	ldi	r21, 0x47	; 71
    2c98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c9c:	18 16       	cp	r1, r24
    2c9e:	4c f5       	brge	.+82     	; 0x2cf2 <LCD_writeData+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca0:	69 8d       	ldd	r22, Y+25	; 0x19
    2ca2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ca4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ca6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e2       	ldi	r20, 0x20	; 32
    2cae:	51 e4       	ldi	r21, 0x41	; 65
    2cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	bc 01       	movw	r22, r24
    2cba:	cd 01       	movw	r24, r26
    2cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	9c 8b       	std	Y+20, r25	; 0x14
    2cc6:	8b 8b       	std	Y+19, r24	; 0x13
    2cc8:	0f c0       	rjmp	.+30     	; 0x2ce8 <LCD_writeData+0x35a>
    2cca:	88 e2       	ldi	r24, 0x28	; 40
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	9a 8b       	std	Y+18, r25	; 0x12
    2cd0:	89 8b       	std	Y+17, r24	; 0x11
    2cd2:	89 89       	ldd	r24, Y+17	; 0x11
    2cd4:	9a 89       	ldd	r25, Y+18	; 0x12
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <LCD_writeData+0x348>
    2cda:	9a 8b       	std	Y+18, r25	; 0x12
    2cdc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cde:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	9c 8b       	std	Y+20, r25	; 0x14
    2ce6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cea:	9c 89       	ldd	r25, Y+20	; 0x14
    2cec:	00 97       	sbiw	r24, 0x00	; 0
    2cee:	69 f7       	brne	.-38     	; 0x2cca <LCD_writeData+0x33c>
    2cf0:	14 c0       	rjmp	.+40     	; 0x2d1a <LCD_writeData+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf2:	6d 89       	ldd	r22, Y+21	; 0x15
    2cf4:	7e 89       	ldd	r23, Y+22	; 0x16
    2cf6:	8f 89       	ldd	r24, Y+23	; 0x17
    2cf8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	9c 8b       	std	Y+20, r25	; 0x14
    2d04:	8b 8b       	std	Y+19, r24	; 0x13
    2d06:	8b 89       	ldd	r24, Y+19	; 0x13
    2d08:	9c 89       	ldd	r25, Y+20	; 0x14
    2d0a:	98 8b       	std	Y+16, r25	; 0x10
    2d0c:	8f 87       	std	Y+15, r24	; 0x0f
    2d0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d10:	98 89       	ldd	r25, Y+16	; 0x10
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	f1 f7       	brne	.-4      	; 0x2d12 <LCD_writeData+0x384>
    2d16:	98 8b       	std	Y+16, r25	; 0x10
    2d18:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);
	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_LOW);/*EN*/
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	62 e0       	ldi	r22, 0x02	; 2
    2d1e:	40 e0       	ldi	r20, 0x00	; 0
    2d20:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	a0 e0       	ldi	r26, 0x00	; 0
    2d2a:	b0 e4       	ldi	r27, 0x40	; 64
    2d2c:	8b 87       	std	Y+11, r24	; 0x0b
    2d2e:	9c 87       	std	Y+12, r25	; 0x0c
    2d30:	ad 87       	std	Y+13, r26	; 0x0d
    2d32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	48 ec       	ldi	r20, 0xC8	; 200
    2d42:	53 e4       	ldi	r21, 0x43	; 67
    2d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	8f 83       	std	Y+7, r24	; 0x07
    2d4e:	98 87       	std	Y+8, r25	; 0x08
    2d50:	a9 87       	std	Y+9, r26	; 0x09
    2d52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d54:	6f 81       	ldd	r22, Y+7	; 0x07
    2d56:	78 85       	ldd	r23, Y+8	; 0x08
    2d58:	89 85       	ldd	r24, Y+9	; 0x09
    2d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	40 e8       	ldi	r20, 0x80	; 128
    2d62:	5f e3       	ldi	r21, 0x3F	; 63
    2d64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d68:	88 23       	and	r24, r24
    2d6a:	2c f4       	brge	.+10     	; 0x2d76 <LCD_writeData+0x3e8>
		__ticks = 1;
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	9e 83       	std	Y+6, r25	; 0x06
    2d72:	8d 83       	std	Y+5, r24	; 0x05
    2d74:	3f c0       	rjmp	.+126    	; 0x2df4 <LCD_writeData+0x466>
	else if (__tmp > 65535)
    2d76:	6f 81       	ldd	r22, Y+7	; 0x07
    2d78:	78 85       	ldd	r23, Y+8	; 0x08
    2d7a:	89 85       	ldd	r24, Y+9	; 0x09
    2d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	3f ef       	ldi	r19, 0xFF	; 255
    2d82:	4f e7       	ldi	r20, 0x7F	; 127
    2d84:	57 e4       	ldi	r21, 0x47	; 71
    2d86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d8a:	18 16       	cp	r1, r24
    2d8c:	4c f5       	brge	.+82     	; 0x2de0 <LCD_writeData+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	40 e2       	ldi	r20, 0x20	; 32
    2d9c:	51 e4       	ldi	r21, 0x41	; 65
    2d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da2:	dc 01       	movw	r26, r24
    2da4:	cb 01       	movw	r24, r22
    2da6:	bc 01       	movw	r22, r24
    2da8:	cd 01       	movw	r24, r26
    2daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	9e 83       	std	Y+6, r25	; 0x06
    2db4:	8d 83       	std	Y+5, r24	; 0x05
    2db6:	0f c0       	rjmp	.+30     	; 0x2dd6 <LCD_writeData+0x448>
    2db8:	88 e2       	ldi	r24, 0x28	; 40
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	9c 83       	std	Y+4, r25	; 0x04
    2dbe:	8b 83       	std	Y+3, r24	; 0x03
    2dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc4:	01 97       	sbiw	r24, 0x01	; 1
    2dc6:	f1 f7       	brne	.-4      	; 0x2dc4 <LCD_writeData+0x436>
    2dc8:	9c 83       	std	Y+4, r25	; 0x04
    2dca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dce:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	9e 83       	std	Y+6, r25	; 0x06
    2dd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dda:	00 97       	sbiw	r24, 0x00	; 0
    2ddc:	69 f7       	brne	.-38     	; 0x2db8 <LCD_writeData+0x42a>
    2dde:	14 c0       	rjmp	.+40     	; 0x2e08 <LCD_writeData+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de0:	6f 81       	ldd	r22, Y+7	; 0x07
    2de2:	78 85       	ldd	r23, Y+8	; 0x08
    2de4:	89 85       	ldd	r24, Y+9	; 0x09
    2de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	9e 83       	std	Y+6, r25	; 0x06
    2df2:	8d 83       	std	Y+5, r24	; 0x05
    2df4:	8d 81       	ldd	r24, Y+5	; 0x05
    2df6:	9e 81       	ldd	r25, Y+6	; 0x06
    2df8:	9a 83       	std	Y+2, r25	; 0x02
    2dfa:	89 83       	std	Y+1, r24	; 0x01
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2e00:	01 97       	sbiw	r24, 0x01	; 1
    2e02:	f1 f7       	brne	.-4      	; 0x2e00 <LCD_writeData+0x472>
    2e04:	9a 83       	std	Y+2, r25	; 0x02
    2e06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2e08:	e9 96       	adiw	r28, 0x39	; 57
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	f8 94       	cli
    2e0e:	de bf       	out	0x3e, r29	; 62
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	cd bf       	out	0x3d, r28	; 61
    2e14:	cf 91       	pop	r28
    2e16:	df 91       	pop	r29
    2e18:	08 95       	ret

00002e1a <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2e1a:	df 93       	push	r29
    2e1c:	cf 93       	push	r28
    2e1e:	00 d0       	rcall	.+0      	; 0x2e20 <LCD_goToRowColumn+0x6>
    2e20:	00 d0       	rcall	.+0      	; 0x2e22 <LCD_goToRowColumn+0x8>
    2e22:	0f 92       	push	r0
    2e24:	cd b7       	in	r28, 0x3d	; 61
    2e26:	de b7       	in	r29, 0x3e	; 62
    2e28:	8a 83       	std	Y+2, r24	; 0x02
    2e2a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    2e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2e:	28 2f       	mov	r18, r24
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	3d 83       	std	Y+5, r19	; 0x05
    2e34:	2c 83       	std	Y+4, r18	; 0x04
    2e36:	8c 81       	ldd	r24, Y+4	; 0x04
    2e38:	9d 81       	ldd	r25, Y+5	; 0x05
    2e3a:	81 30       	cpi	r24, 0x01	; 1
    2e3c:	91 05       	cpc	r25, r1
    2e3e:	c9 f0       	breq	.+50     	; 0x2e72 <LCD_goToRowColumn+0x58>
    2e40:	2c 81       	ldd	r18, Y+4	; 0x04
    2e42:	3d 81       	ldd	r19, Y+5	; 0x05
    2e44:	22 30       	cpi	r18, 0x02	; 2
    2e46:	31 05       	cpc	r19, r1
    2e48:	2c f4       	brge	.+10     	; 0x2e54 <LCD_goToRowColumn+0x3a>
    2e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e4e:	00 97       	sbiw	r24, 0x00	; 0
    2e50:	61 f0       	breq	.+24     	; 0x2e6a <LCD_goToRowColumn+0x50>
    2e52:	1a c0       	rjmp	.+52     	; 0x2e88 <LCD_goToRowColumn+0x6e>
    2e54:	2c 81       	ldd	r18, Y+4	; 0x04
    2e56:	3d 81       	ldd	r19, Y+5	; 0x05
    2e58:	22 30       	cpi	r18, 0x02	; 2
    2e5a:	31 05       	cpc	r19, r1
    2e5c:	71 f0       	breq	.+28     	; 0x2e7a <LCD_goToRowColumn+0x60>
    2e5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e60:	9d 81       	ldd	r25, Y+5	; 0x05
    2e62:	83 30       	cpi	r24, 0x03	; 3
    2e64:	91 05       	cpc	r25, r1
    2e66:	69 f0       	breq	.+26     	; 0x2e82 <LCD_goToRowColumn+0x68>
    2e68:	0f c0       	rjmp	.+30     	; 0x2e88 <LCD_goToRowColumn+0x6e>
	{
		case 0:
				Address=0x80+col;
    2e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6c:	80 58       	subi	r24, 0x80	; 128
    2e6e:	89 83       	std	Y+1, r24	; 0x01
    2e70:	0b c0       	rjmp	.+22     	; 0x2e88 <LCD_goToRowColumn+0x6e>
				break;
		case 1:
				Address=0xC0+col;
    2e72:	8b 81       	ldd	r24, Y+3	; 0x03
    2e74:	80 54       	subi	r24, 0x40	; 64
    2e76:	89 83       	std	Y+1, r24	; 0x01
    2e78:	07 c0       	rjmp	.+14     	; 0x2e88 <LCD_goToRowColumn+0x6e>
				break;
		case 2:
				Address=0x94+col;
    2e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7c:	8c 56       	subi	r24, 0x6C	; 108
    2e7e:	89 83       	std	Y+1, r24	; 0x01
    2e80:	03 c0       	rjmp	.+6      	; 0x2e88 <LCD_goToRowColumn+0x6e>
				break;
		case 3:
				Address=0xD4+col;
    2e82:	8b 81       	ldd	r24, Y+3	; 0x03
    2e84:	8c 52       	subi	r24, 0x2C	; 44
    2e86:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_writeCommand(Address);
    2e88:	89 81       	ldd	r24, Y+1	; 0x01
    2e8a:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_writeCommand>
}
    2e8e:	0f 90       	pop	r0
    2e90:	0f 90       	pop	r0
    2e92:	0f 90       	pop	r0
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	cf 91       	pop	r28
    2e9a:	df 91       	pop	r29
    2e9c:	08 95       	ret

00002e9e <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2e9e:	df 93       	push	r29
    2ea0:	cf 93       	push	r28
    2ea2:	00 d0       	rcall	.+0      	; 0x2ea4 <LCD_displayString+0x6>
    2ea4:	0f 92       	push	r0
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
    2eaa:	9b 83       	std	Y+3, r25	; 0x03
    2eac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2eae:	19 82       	std	Y+1, r1	; 0x01
    2eb0:	0e c0       	rjmp	.+28     	; 0x2ece <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_writeData(Str[i]);
    2eb2:	89 81       	ldd	r24, Y+1	; 0x01
    2eb4:	28 2f       	mov	r18, r24
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eba:	9b 81       	ldd	r25, Y+3	; 0x03
    2ebc:	fc 01       	movw	r30, r24
    2ebe:	e2 0f       	add	r30, r18
    2ec0:	f3 1f       	adc	r31, r19
    2ec2:	80 81       	ld	r24, Z
    2ec4:	0e 94 c7 14 	call	0x298e	; 0x298e <LCD_writeData>
		i++;
    2ec8:	89 81       	ldd	r24, Y+1	; 0x01
    2eca:	8f 5f       	subi	r24, 0xFF	; 255
    2ecc:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2ece:	89 81       	ldd	r24, Y+1	; 0x01
    2ed0:	28 2f       	mov	r18, r24
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed8:	fc 01       	movw	r30, r24
    2eda:	e2 0f       	add	r30, r18
    2edc:	f3 1f       	adc	r31, r19
    2ede:	80 81       	ld	r24, Z
    2ee0:	88 23       	and	r24, r24
    2ee2:	39 f7       	brne	.-50     	; 0x2eb2 <LCD_displayString+0x14>
	{
		LCD_writeData(Str[i]);
		i++;
	}
}
    2ee4:	0f 90       	pop	r0
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	cf 91       	pop	r28
    2eec:	df 91       	pop	r29
    2eee:	08 95       	ret

00002ef0 <LCD_clearScreen>:
void LCD_clearScreen(void)
{
    2ef0:	df 93       	push	r29
    2ef2:	cf 93       	push	r28
    2ef4:	cd b7       	in	r28, 0x3d	; 61
    2ef6:	de b7       	in	r29, 0x3e	; 62
	LCD_writeCommand(CLEAR_COMMAND); //clear display
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_writeCommand>
}
    2efe:	cf 91       	pop	r28
    2f00:	df 91       	pop	r29
    2f02:	08 95       	ret

00002f04 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2f04:	df 93       	push	r29
    2f06:	cf 93       	push	r28
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
    2f0c:	62 97       	sbiw	r28, 0x12	; 18
    2f0e:	0f b6       	in	r0, 0x3f	; 63
    2f10:	f8 94       	cli
    2f12:	de bf       	out	0x3e, r29	; 62
    2f14:	0f be       	out	0x3f, r0	; 63
    2f16:	cd bf       	out	0x3d, r28	; 61
    2f18:	9a 8b       	std	Y+18, r25	; 0x12
    2f1a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2f1c:	89 89       	ldd	r24, Y+17	; 0x11
    2f1e:	9a 89       	ldd	r25, Y+18	; 0x12
    2f20:	9e 01       	movw	r18, r28
    2f22:	2f 5f       	subi	r18, 0xFF	; 255
    2f24:	3f 4f       	sbci	r19, 0xFF	; 255
    2f26:	b9 01       	movw	r22, r18
    2f28:	4a e0       	ldi	r20, 0x0A	; 10
    2f2a:	50 e0       	ldi	r21, 0x00	; 0
    2f2c:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <itoa>
   LCD_displayString(buff);
    2f30:	ce 01       	movw	r24, r28
    2f32:	01 96       	adiw	r24, 0x01	; 1
    2f34:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <LCD_displayString>
}
    2f38:	62 96       	adiw	r28, 0x12	; 18
    2f3a:	0f b6       	in	r0, 0x3f	; 63
    2f3c:	f8 94       	cli
    2f3e:	de bf       	out	0x3e, r29	; 62
    2f40:	0f be       	out	0x3f, r0	; 63
    2f42:	cd bf       	out	0x3d, r28	; 61
    2f44:	cf 91       	pop	r28
    2f46:	df 91       	pop	r29
    2f48:	08 95       	ret

00002f4a <KeyPad_init>:

#include "KeyPad.h"


void KeyPad_init()
{
    2f4a:	df 93       	push	r29
    2f4c:	cf 93       	push	r28
    2f4e:	cd b7       	in	r28, 0x3d	; 61
    2f50:	de b7       	in	r29, 0x3e	; 62
	/*Configure Direction of Rows*/
	GPIO_SetupPin_Direction(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW1,PIN_OUTPUT);
    2f52:	82 e0       	ldi	r24, 0x02	; 2
    2f54:	62 e0       	ldi	r22, 0x02	; 2
    2f56:	41 e0       	ldi	r20, 0x01	; 1
    2f58:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW2,PIN_OUTPUT);
    2f5c:	82 e0       	ldi	r24, 0x02	; 2
    2f5e:	63 e0       	ldi	r22, 0x03	; 3
    2f60:	41 e0       	ldi	r20, 0x01	; 1
    2f62:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW3,PIN_OUTPUT);
    2f66:	82 e0       	ldi	r24, 0x02	; 2
    2f68:	64 e0       	ldi	r22, 0x04	; 4
    2f6a:	41 e0       	ldi	r20, 0x01	; 1
    2f6c:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW4,PIN_OUTPUT);
    2f70:	82 e0       	ldi	r24, 0x02	; 2
    2f72:	65 e0       	ldi	r22, 0x05	; 5
    2f74:	41 e0       	ldi	r20, 0x01	; 1
    2f76:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_SetupPin_Direction>

	GPIO_SetupPin_Direction(KEYPAD_COLS_PORT_ID,KEYPAD_COL1,PIN_INPUT);
    2f7a:	83 e0       	ldi	r24, 0x03	; 3
    2f7c:	63 e0       	ldi	r22, 0x03	; 3
    2f7e:	40 e0       	ldi	r20, 0x00	; 0
    2f80:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_COLS_PORT_ID,KEYPAD_COL2,PIN_INPUT);
    2f84:	83 e0       	ldi	r24, 0x03	; 3
    2f86:	65 e0       	ldi	r22, 0x05	; 5
    2f88:	40 e0       	ldi	r20, 0x00	; 0
    2f8a:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_COLS_PORT_ID,KEYPAD_COL3,PIN_INPUT);
    2f8e:	83 e0       	ldi	r24, 0x03	; 3
    2f90:	66 e0       	ldi	r22, 0x06	; 6
    2f92:	40 e0       	ldi	r20, 0x00	; 0
    2f94:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_COLS_PORT_ID,KEYPAD_COL4,PIN_INPUT);
    2f98:	83 e0       	ldi	r24, 0x03	; 3
    2f9a:	67 e0       	ldi	r22, 0x07	; 7
    2f9c:	40 e0       	ldi	r20, 0x00	; 0
    2f9e:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_SetupPin_Direction>

	GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW1,LOGIC_HIGH);
    2fa2:	82 e0       	ldi	r24, 0x02	; 2
    2fa4:	62 e0       	ldi	r22, 0x02	; 2
    2fa6:	41 e0       	ldi	r20, 0x01	; 1
    2fa8:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW2,LOGIC_HIGH);
    2fac:	82 e0       	ldi	r24, 0x02	; 2
    2fae:	63 e0       	ldi	r22, 0x03	; 3
    2fb0:	41 e0       	ldi	r20, 0x01	; 1
    2fb2:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW3,LOGIC_HIGH);
    2fb6:	82 e0       	ldi	r24, 0x02	; 2
    2fb8:	64 e0       	ldi	r22, 0x04	; 4
    2fba:	41 e0       	ldi	r20, 0x01	; 1
    2fbc:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW4,LOGIC_HIGH);
    2fc0:	82 e0       	ldi	r24, 0x02	; 2
    2fc2:	65 e0       	ldi	r22, 0x05	; 5
    2fc4:	41 e0       	ldi	r20, 0x01	; 1
    2fc6:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>

	GPIO_SetupPin_Value(KEYPAD_COLS_PORT_ID,KEYPAD_ROW1,LOGIC_LOW);
    2fca:	83 e0       	ldi	r24, 0x03	; 3
    2fcc:	62 e0       	ldi	r22, 0x02	; 2
    2fce:	40 e0       	ldi	r20, 0x00	; 0
    2fd0:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_COLS_PORT_ID,KEYPAD_ROW2,LOGIC_LOW);
    2fd4:	83 e0       	ldi	r24, 0x03	; 3
    2fd6:	63 e0       	ldi	r22, 0x03	; 3
    2fd8:	40 e0       	ldi	r20, 0x00	; 0
    2fda:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_COLS_PORT_ID,KEYPAD_ROW3,LOGIC_LOW);
    2fde:	83 e0       	ldi	r24, 0x03	; 3
    2fe0:	64 e0       	ldi	r22, 0x04	; 4
    2fe2:	40 e0       	ldi	r20, 0x00	; 0
    2fe4:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_COLS_PORT_ID,KEYPAD_ROW4,LOGIC_LOW);
    2fe8:	83 e0       	ldi	r24, 0x03	; 3
    2fea:	65 e0       	ldi	r22, 0x05	; 5
    2fec:	40 e0       	ldi	r20, 0x00	; 0
    2fee:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>

}
    2ff2:	cf 91       	pop	r28
    2ff4:	df 91       	pop	r29
    2ff6:	08 95       	ret

00002ff8 <KeyPad_getPressedKey>:

uint8 KeyPad_getPressedKey()
{
    2ff8:	df 93       	push	r29
    2ffa:	cf 93       	push	r28
    2ffc:	cd b7       	in	r28, 0x3d	; 61
    2ffe:	de b7       	in	r29, 0x3e	; 62
    3000:	a0 97       	sbiw	r28, 0x20	; 32
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	f8 94       	cli
    3006:	de bf       	out	0x3e, r29	; 62
    3008:	0f be       	out	0x3f, r0	; 63
    300a:	cd bf       	out	0x3d, r28	; 61
	uint8 KeyPad_data[NUMBER_OF_ROWS][NUMBER_OF_COLS]=KEYPAD_DATA;
    300c:	9e 01       	movw	r18, r28
    300e:	2c 5f       	subi	r18, 0xFC	; 252
    3010:	3f 4f       	sbci	r19, 0xFF	; 255
    3012:	3d 8f       	std	Y+29, r19	; 0x1d
    3014:	2c 8f       	std	Y+28, r18	; 0x1c
    3016:	88 e6       	ldi	r24, 0x68	; 104
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	9f 8f       	std	Y+31, r25	; 0x1f
    301c:	8e 8f       	std	Y+30, r24	; 0x1e
    301e:	90 e1       	ldi	r25, 0x10	; 16
    3020:	98 a3       	std	Y+32, r25	; 0x20
    3022:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3024:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3026:	00 80       	ld	r0, Z
    3028:	2e 8d       	ldd	r18, Y+30	; 0x1e
    302a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    302c:	2f 5f       	subi	r18, 0xFF	; 255
    302e:	3f 4f       	sbci	r19, 0xFF	; 255
    3030:	3f 8f       	std	Y+31, r19	; 0x1f
    3032:	2e 8f       	std	Y+30, r18	; 0x1e
    3034:	ec 8d       	ldd	r30, Y+28	; 0x1c
    3036:	fd 8d       	ldd	r31, Y+29	; 0x1d
    3038:	00 82       	st	Z, r0
    303a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    303c:	3d 8d       	ldd	r19, Y+29	; 0x1d
    303e:	2f 5f       	subi	r18, 0xFF	; 255
    3040:	3f 4f       	sbci	r19, 0xFF	; 255
    3042:	3d 8f       	std	Y+29, r19	; 0x1d
    3044:	2c 8f       	std	Y+28, r18	; 0x1c
    3046:	38 a1       	ldd	r19, Y+32	; 0x20
    3048:	31 50       	subi	r19, 0x01	; 1
    304a:	38 a3       	std	Y+32, r19	; 0x20
    304c:	88 a1       	ldd	r24, Y+32	; 0x20
    304e:	88 23       	and	r24, r24
    3050:	41 f7       	brne	.-48     	; 0x3022 <KeyPad_getPressedKey+0x2a>

	uint8 KeyPad_col_Pins[NUMBER_OF_COLS]=KEYPAD_COL_PINS;
    3052:	83 e0       	ldi	r24, 0x03	; 3
    3054:	8c 8b       	std	Y+20, r24	; 0x14
    3056:	85 e0       	ldi	r24, 0x05	; 5
    3058:	8d 8b       	std	Y+21, r24	; 0x15
    305a:	86 e0       	ldi	r24, 0x06	; 6
    305c:	8e 8b       	std	Y+22, r24	; 0x16
    305e:	87 e0       	ldi	r24, 0x07	; 7
    3060:	8f 8b       	std	Y+23, r24	; 0x17

	uint8 KeyPad_row_Pins[NUMBER_OF_ROWS]=KEYPAD_ROW_PINS;
    3062:	82 e0       	ldi	r24, 0x02	; 2
    3064:	88 8f       	std	Y+24, r24	; 0x18
    3066:	83 e0       	ldi	r24, 0x03	; 3
    3068:	89 8f       	std	Y+25, r24	; 0x19
    306a:	84 e0       	ldi	r24, 0x04	; 4
    306c:	8a 8f       	std	Y+26, r24	; 0x1a
    306e:	85 e0       	ldi	r24, 0x05	; 5
    3070:	8b 8f       	std	Y+27, r24	; 0x1b

	uint8 Data=0XFF;
    3072:	8f ef       	ldi	r24, 0xFF	; 255
    3074:	8b 83       	std	Y+3, r24	; 0x03

	for(uint8 row=0;row<NUMBER_OF_ROWS;row++)
    3076:	1a 82       	std	Y+2, r1	; 0x02
    3078:	56 c0       	rjmp	.+172    	; 0x3126 <KeyPad_getPressedKey+0x12e>
	{
		GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KeyPad_row_Pins[row],LOGIC_LOW);
    307a:	8a 81       	ldd	r24, Y+2	; 0x02
    307c:	28 2f       	mov	r18, r24
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	ce 01       	movw	r24, r28
    3082:	48 96       	adiw	r24, 0x18	; 24
    3084:	fc 01       	movw	r30, r24
    3086:	e2 0f       	add	r30, r18
    3088:	f3 1f       	adc	r31, r19
    308a:	90 81       	ld	r25, Z
    308c:	82 e0       	ldi	r24, 0x02	; 2
    308e:	69 2f       	mov	r22, r25
    3090:	40 e0       	ldi	r20, 0x00	; 0
    3092:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>
		for(uint8 col=0;col<NUMBER_OF_COLS;col++)
    3096:	19 82       	std	Y+1, r1	; 0x01
    3098:	32 c0       	rjmp	.+100    	; 0x30fe <KeyPad_getPressedKey+0x106>
		{


			while(GET_BIT(KEYPAD_COLS_PORT,KeyPad_col_Pins[col])==LOGIC_LOW)
			{
				Data=KeyPad_data[row][col];
    309a:	8a 81       	ldd	r24, Y+2	; 0x02
    309c:	28 2f       	mov	r18, r24
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	89 81       	ldd	r24, Y+1	; 0x01
    30a2:	48 2f       	mov	r20, r24
    30a4:	50 e0       	ldi	r21, 0x00	; 0
    30a6:	22 0f       	add	r18, r18
    30a8:	33 1f       	adc	r19, r19
    30aa:	22 0f       	add	r18, r18
    30ac:	33 1f       	adc	r19, r19
    30ae:	ce 01       	movw	r24, r28
    30b0:	01 96       	adiw	r24, 0x01	; 1
    30b2:	82 0f       	add	r24, r18
    30b4:	93 1f       	adc	r25, r19
    30b6:	84 0f       	add	r24, r20
    30b8:	95 1f       	adc	r25, r21
    30ba:	fc 01       	movw	r30, r24
    30bc:	33 96       	adiw	r30, 0x03	; 3
    30be:	80 81       	ld	r24, Z
    30c0:	8b 83       	std	Y+3, r24	; 0x03
		GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KeyPad_row_Pins[row],LOGIC_LOW);
		for(uint8 col=0;col<NUMBER_OF_COLS;col++)
		{


			while(GET_BIT(KEYPAD_COLS_PORT,KeyPad_col_Pins[col])==LOGIC_LOW)
    30c2:	e0 e3       	ldi	r30, 0x30	; 48
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	48 2f       	mov	r20, r24
    30ca:	50 e0       	ldi	r21, 0x00	; 0
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	28 2f       	mov	r18, r24
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	ce 01       	movw	r24, r28
    30d4:	44 96       	adiw	r24, 0x14	; 20
    30d6:	fc 01       	movw	r30, r24
    30d8:	e2 0f       	add	r30, r18
    30da:	f3 1f       	adc	r31, r19
    30dc:	80 81       	ld	r24, Z
    30de:	88 2f       	mov	r24, r24
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	fa 01       	movw	r30, r20
    30e4:	02 c0       	rjmp	.+4      	; 0x30ea <KeyPad_getPressedKey+0xf2>
    30e6:	f5 95       	asr	r31
    30e8:	e7 95       	ror	r30
    30ea:	8a 95       	dec	r24
    30ec:	e2 f7       	brpl	.-8      	; 0x30e6 <KeyPad_getPressedKey+0xee>
    30ee:	cf 01       	movw	r24, r30
    30f0:	81 70       	andi	r24, 0x01	; 1
    30f2:	90 70       	andi	r25, 0x00	; 0
    30f4:	00 97       	sbiw	r24, 0x00	; 0
    30f6:	89 f2       	breq	.-94     	; 0x309a <KeyPad_getPressedKey+0xa2>
	uint8 Data=0XFF;

	for(uint8 row=0;row<NUMBER_OF_ROWS;row++)
	{
		GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KeyPad_row_Pins[row],LOGIC_LOW);
		for(uint8 col=0;col<NUMBER_OF_COLS;col++)
    30f8:	89 81       	ldd	r24, Y+1	; 0x01
    30fa:	8f 5f       	subi	r24, 0xFF	; 255
    30fc:	89 83       	std	Y+1, r24	; 0x01
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
    3100:	84 30       	cpi	r24, 0x04	; 4
    3102:	f8 f2       	brcs	.-66     	; 0x30c2 <KeyPad_getPressedKey+0xca>
				Data=KeyPad_data[row][col];
			}


		}
		GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KeyPad_row_Pins[row],LOGIC_HIGH);
    3104:	8a 81       	ldd	r24, Y+2	; 0x02
    3106:	28 2f       	mov	r18, r24
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	ce 01       	movw	r24, r28
    310c:	48 96       	adiw	r24, 0x18	; 24
    310e:	fc 01       	movw	r30, r24
    3110:	e2 0f       	add	r30, r18
    3112:	f3 1f       	adc	r31, r19
    3114:	90 81       	ld	r25, Z
    3116:	82 e0       	ldi	r24, 0x02	; 2
    3118:	69 2f       	mov	r22, r25
    311a:	41 e0       	ldi	r20, 0x01	; 1
    311c:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_SetupPin_Value>

	uint8 KeyPad_row_Pins[NUMBER_OF_ROWS]=KEYPAD_ROW_PINS;

	uint8 Data=0XFF;

	for(uint8 row=0;row<NUMBER_OF_ROWS;row++)
    3120:	8a 81       	ldd	r24, Y+2	; 0x02
    3122:	8f 5f       	subi	r24, 0xFF	; 255
    3124:	8a 83       	std	Y+2, r24	; 0x02
    3126:	8a 81       	ldd	r24, Y+2	; 0x02
    3128:	84 30       	cpi	r24, 0x04	; 4
    312a:	08 f4       	brcc	.+2      	; 0x312e <KeyPad_getPressedKey+0x136>
    312c:	a6 cf       	rjmp	.-180    	; 0x307a <KeyPad_getPressedKey+0x82>


		}
		GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KeyPad_row_Pins[row],LOGIC_HIGH);
	}
	return Data;
    312e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3130:	a0 96       	adiw	r28, 0x20	; 32
    3132:	0f b6       	in	r0, 0x3f	; 63
    3134:	f8 94       	cli
    3136:	de bf       	out	0x3e, r29	; 62
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	cd bf       	out	0x3d, r28	; 61
    313c:	cf 91       	pop	r28
    313e:	df 91       	pop	r29
    3140:	08 95       	ret

00003142 <main>:
#include "MCAL/EXTI/EXTI_config.h"
#include "MCAL/ADC/ADC_interface.h"
#include "HAL/KeyPad/KeyPad.h"
uint32 g_tempVal = 0;
int  main(void)
{
    3142:	df 93       	push	r29
    3144:	cf 93       	push	r28
    3146:	cd b7       	in	r28, 0x3d	; 61
    3148:	de b7       	in	r29, 0x3e	; 62
    314a:	ff cf       	rjmp	.-2      	; 0x314a <main+0x8>

0000314c <__udivmodqi4>:
    314c:	99 1b       	sub	r25, r25
    314e:	79 e0       	ldi	r23, 0x09	; 9
    3150:	04 c0       	rjmp	.+8      	; 0x315a <__udivmodqi4_ep>

00003152 <__udivmodqi4_loop>:
    3152:	99 1f       	adc	r25, r25
    3154:	96 17       	cp	r25, r22
    3156:	08 f0       	brcs	.+2      	; 0x315a <__udivmodqi4_ep>
    3158:	96 1b       	sub	r25, r22

0000315a <__udivmodqi4_ep>:
    315a:	88 1f       	adc	r24, r24
    315c:	7a 95       	dec	r23
    315e:	c9 f7       	brne	.-14     	; 0x3152 <__udivmodqi4_loop>
    3160:	80 95       	com	r24
    3162:	08 95       	ret

00003164 <__prologue_saves__>:
    3164:	2f 92       	push	r2
    3166:	3f 92       	push	r3
    3168:	4f 92       	push	r4
    316a:	5f 92       	push	r5
    316c:	6f 92       	push	r6
    316e:	7f 92       	push	r7
    3170:	8f 92       	push	r8
    3172:	9f 92       	push	r9
    3174:	af 92       	push	r10
    3176:	bf 92       	push	r11
    3178:	cf 92       	push	r12
    317a:	df 92       	push	r13
    317c:	ef 92       	push	r14
    317e:	ff 92       	push	r15
    3180:	0f 93       	push	r16
    3182:	1f 93       	push	r17
    3184:	cf 93       	push	r28
    3186:	df 93       	push	r29
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
    318c:	ca 1b       	sub	r28, r26
    318e:	db 0b       	sbc	r29, r27
    3190:	0f b6       	in	r0, 0x3f	; 63
    3192:	f8 94       	cli
    3194:	de bf       	out	0x3e, r29	; 62
    3196:	0f be       	out	0x3f, r0	; 63
    3198:	cd bf       	out	0x3d, r28	; 61
    319a:	09 94       	ijmp

0000319c <__epilogue_restores__>:
    319c:	2a 88       	ldd	r2, Y+18	; 0x12
    319e:	39 88       	ldd	r3, Y+17	; 0x11
    31a0:	48 88       	ldd	r4, Y+16	; 0x10
    31a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    31a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    31a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    31a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    31aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    31ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    31ae:	b9 84       	ldd	r11, Y+9	; 0x09
    31b0:	c8 84       	ldd	r12, Y+8	; 0x08
    31b2:	df 80       	ldd	r13, Y+7	; 0x07
    31b4:	ee 80       	ldd	r14, Y+6	; 0x06
    31b6:	fd 80       	ldd	r15, Y+5	; 0x05
    31b8:	0c 81       	ldd	r16, Y+4	; 0x04
    31ba:	1b 81       	ldd	r17, Y+3	; 0x03
    31bc:	aa 81       	ldd	r26, Y+2	; 0x02
    31be:	b9 81       	ldd	r27, Y+1	; 0x01
    31c0:	ce 0f       	add	r28, r30
    31c2:	d1 1d       	adc	r29, r1
    31c4:	0f b6       	in	r0, 0x3f	; 63
    31c6:	f8 94       	cli
    31c8:	de bf       	out	0x3e, r29	; 62
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	cd bf       	out	0x3d, r28	; 61
    31ce:	ed 01       	movw	r28, r26
    31d0:	08 95       	ret

000031d2 <itoa>:
    31d2:	fb 01       	movw	r30, r22
    31d4:	9f 01       	movw	r18, r30
    31d6:	e8 94       	clt
    31d8:	42 30       	cpi	r20, 0x02	; 2
    31da:	c4 f0       	brlt	.+48     	; 0x320c <itoa+0x3a>
    31dc:	45 32       	cpi	r20, 0x25	; 37
    31de:	b4 f4       	brge	.+44     	; 0x320c <itoa+0x3a>
    31e0:	4a 30       	cpi	r20, 0x0A	; 10
    31e2:	29 f4       	brne	.+10     	; 0x31ee <itoa+0x1c>
    31e4:	97 fb       	bst	r25, 7
    31e6:	1e f4       	brtc	.+6      	; 0x31ee <itoa+0x1c>
    31e8:	90 95       	com	r25
    31ea:	81 95       	neg	r24
    31ec:	9f 4f       	sbci	r25, 0xFF	; 255
    31ee:	64 2f       	mov	r22, r20
    31f0:	77 27       	eor	r23, r23
    31f2:	0e 94 1a 19 	call	0x3234	; 0x3234 <__udivmodhi4>
    31f6:	80 5d       	subi	r24, 0xD0	; 208
    31f8:	8a 33       	cpi	r24, 0x3A	; 58
    31fa:	0c f0       	brlt	.+2      	; 0x31fe <itoa+0x2c>
    31fc:	89 5d       	subi	r24, 0xD9	; 217
    31fe:	81 93       	st	Z+, r24
    3200:	cb 01       	movw	r24, r22
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	a1 f7       	brne	.-24     	; 0x31ee <itoa+0x1c>
    3206:	16 f4       	brtc	.+4      	; 0x320c <itoa+0x3a>
    3208:	5d e2       	ldi	r21, 0x2D	; 45
    320a:	51 93       	st	Z+, r21
    320c:	10 82       	st	Z, r1
    320e:	c9 01       	movw	r24, r18
    3210:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <strrev>

00003214 <strrev>:
    3214:	dc 01       	movw	r26, r24
    3216:	fc 01       	movw	r30, r24
    3218:	67 2f       	mov	r22, r23
    321a:	71 91       	ld	r23, Z+
    321c:	77 23       	and	r23, r23
    321e:	e1 f7       	brne	.-8      	; 0x3218 <strrev+0x4>
    3220:	32 97       	sbiw	r30, 0x02	; 2
    3222:	04 c0       	rjmp	.+8      	; 0x322c <strrev+0x18>
    3224:	7c 91       	ld	r23, X
    3226:	6d 93       	st	X+, r22
    3228:	70 83       	st	Z, r23
    322a:	62 91       	ld	r22, -Z
    322c:	ae 17       	cp	r26, r30
    322e:	bf 07       	cpc	r27, r31
    3230:	c8 f3       	brcs	.-14     	; 0x3224 <strrev+0x10>
    3232:	08 95       	ret

00003234 <__udivmodhi4>:
    3234:	aa 1b       	sub	r26, r26
    3236:	bb 1b       	sub	r27, r27
    3238:	51 e1       	ldi	r21, 0x11	; 17
    323a:	07 c0       	rjmp	.+14     	; 0x324a <__udivmodhi4_ep>

0000323c <__udivmodhi4_loop>:
    323c:	aa 1f       	adc	r26, r26
    323e:	bb 1f       	adc	r27, r27
    3240:	a6 17       	cp	r26, r22
    3242:	b7 07       	cpc	r27, r23
    3244:	10 f0       	brcs	.+4      	; 0x324a <__udivmodhi4_ep>
    3246:	a6 1b       	sub	r26, r22
    3248:	b7 0b       	sbc	r27, r23

0000324a <__udivmodhi4_ep>:
    324a:	88 1f       	adc	r24, r24
    324c:	99 1f       	adc	r25, r25
    324e:	5a 95       	dec	r21
    3250:	a9 f7       	brne	.-22     	; 0x323c <__udivmodhi4_loop>
    3252:	80 95       	com	r24
    3254:	90 95       	com	r25
    3256:	bc 01       	movw	r22, r24
    3258:	cd 01       	movw	r24, r26
    325a:	08 95       	ret

0000325c <_exit>:
    325c:	f8 94       	cli

0000325e <__stop_program>:
    325e:	ff cf       	rjmp	.-2      	; 0x325e <__stop_program>
