
TIM1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002c88  00002d1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800080  00800080  00002d3c  2**0
                  ALLOC
  3 .stab         00003354  00000000  00000000  00002d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f8c  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000801c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000815c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000082cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ae00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bbb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bd10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bf9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c76b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__vector_1>
       8:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <__vector_2>
       c:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <main>
      8a:	0c 94 42 16 	jmp	0x2c84	; 0x2c84 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c6 15 	jmp	0x2b8c	; 0x2b8c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e6       	ldi	r26, 0x67	; 103
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e2 15 	jmp	0x2bc4	; 0x2bc4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c6 15 	jmp	0x2b8c	; 0x2b8c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	87 e6       	ldi	r24, 0x67	; 103
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e2 15 	jmp	0x2bc4	; 0x2bc4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIM0_init>:

void (*TIM0_callBackOV_ptr)(void) = NULL;
void (*TIM0_callBackCOMP_ptr)(void) = NULL;

void TIM0_init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG->FOC0=0;
     b4e:	e3 e5       	ldi	r30, 0x53	; 83
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	8f 77       	andi	r24, 0x7F	; 127
     b56:	80 83       	st	Z, r24
#if(NORMAL)

	TCCR0_REG->WGM00=0;
	TCCR0_REG->WGM01=0;
#elif(PHASE_CORRECT)
	TCCR0_REG->WGM00=1;
     b58:	e3 e5       	ldi	r30, 0x53	; 83
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	80 64       	ori	r24, 0x40	; 64
     b60:	80 83       	st	Z, r24
	TCCR0_REG->WGM01=0;
     b62:	e3 e5       	ldi	r30, 0x53	; 83
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	87 7f       	andi	r24, 0xF7	; 247
     b6a:	80 83       	st	Z, r24
#elif(FAST_PWM)
	TCCR0_REG->WGM00=1;
	TCCR0_REG->WGM01=1;
#endif

	TCCR0_REG->COM=COM_MODE;
     b6c:	e3 e5       	ldi	r30, 0x53	; 83
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	8f 7c       	andi	r24, 0xCF	; 207
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	80 83       	st	Z, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <TIM0_stop>:

void TIM0_stop(void)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG->CS=NoClockSource;
     b86:	e3 e5       	ldi	r30, 0x53	; 83
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	88 7f       	andi	r24, 0xF8	; 248
     b8e:	80 83       	st	Z, r24
}
     b90:	cf 91       	pop	r28
     b92:	df 91       	pop	r29
     b94:	08 95       	ret

00000b96 <TIM0_start>:

void TIM0_start(void)
{
     b96:	df 93       	push	r29
     b98:	cf 93       	push	r28
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG->CS=Prescaler;
     b9e:	e3 e5       	ldi	r30, 0x53	; 83
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	88 7f       	andi	r24, 0xF8	; 248
     ba6:	82 60       	ori	r24, 0x02	; 2
     ba8:	80 83       	st	Z, r24
}
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <TIM0_setPreload>:
void TIM0_setPreload(uint8 preload_Val)
{
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	0f 92       	push	r0
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
     bba:	89 83       	std	Y+1, r24	; 0x01
	TCNT0_REG=preload_Val;
     bbc:	e2 e5       	ldi	r30, 0x52	; 82
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	80 83       	st	Z, r24
}
     bc4:	0f 90       	pop	r0
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret

00000bcc <TIM0_dutyCycle>:
void TIM0_dutyCycle(uint8 dc)
{
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	df 93       	push	r29
     bd2:	cf 93       	push	r28
     bd4:	0f 92       	push	r0
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	89 83       	std	Y+1, r24	; 0x01

	OCR0_REG=1-(((uint32)dc*255)/100);
     bdc:	0c e5       	ldi	r16, 0x5C	; 92
     bde:	10 e0       	ldi	r17, 0x00	; 0
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	88 2f       	mov	r24, r24
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	a0 e0       	ldi	r26, 0x00	; 0
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	2f ef       	ldi	r18, 0xFF	; 255
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	bc 01       	movw	r22, r24
     bf4:	cd 01       	movw	r24, r26
     bf6:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <__mulsi3>
     bfa:	dc 01       	movw	r26, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	24 e6       	ldi	r18, 0x64	; 100
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	40 e0       	ldi	r20, 0x00	; 0
     c04:	50 e0       	ldi	r21, 0x00	; 0
     c06:	bc 01       	movw	r22, r24
     c08:	cd 01       	movw	r24, r26
     c0a:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__udivmodsi4>
     c0e:	da 01       	movw	r26, r20
     c10:	c9 01       	movw	r24, r18
     c12:	98 2f       	mov	r25, r24
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	89 1b       	sub	r24, r25
     c18:	f8 01       	movw	r30, r16
     c1a:	80 83       	st	Z, r24

}
     c1c:	0f 90       	pop	r0
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	08 95       	ret

00000c28 <TIM0_getVal>:
uint8 TIM0_getVal(void)
{
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
	return TCNT0_REG;
     c30:	e2 e5       	ldi	r30, 0x52	; 82
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
}
     c36:	cf 91       	pop	r28
     c38:	df 91       	pop	r29
     c3a:	08 95       	ret

00000c3c <delay_ms>:


void delay_ms(uint32 msec)
{
     c3c:	df 93       	push	r29
     c3e:	cf 93       	push	r28
     c40:	00 d0       	rcall	.+0      	; 0xc42 <delay_ms+0x6>
     c42:	00 d0       	rcall	.+0      	; 0xc44 <delay_ms+0x8>
     c44:	0f 92       	push	r0
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
     c4a:	69 83       	std	Y+1, r22	; 0x01
     c4c:	7a 83       	std	Y+2, r23	; 0x02
     c4e:	8b 83       	std	Y+3, r24	; 0x03
     c50:	9c 83       	std	Y+4, r25	; 0x04
	TIFR_REG->TOV0=1;
     c52:	e8 e5       	ldi	r30, 0x58	; 88
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	81 60       	ori	r24, 0x01	; 1
     c5a:	80 83       	st	Z, r24
	TIMSK_REG->TOIE0=0;
     c5c:	e9 e5       	ldi	r30, 0x59	; 89
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	8e 7f       	andi	r24, 0xFE	; 254
     c64:	80 83       	st	Z, r24
     c66:	0e c0       	rjmp	.+28     	; 0xc84 <delay_ms+0x48>

	while(msec--)
	{
		TIM0_setPreload(6);
     c68:	86 e0       	ldi	r24, 0x06	; 6
     c6a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <TIM0_setPreload>
		while(TIFR_REG->TOV0 != 1);
     c6e:	e8 e5       	ldi	r30, 0x58	; 88
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	81 70       	andi	r24, 0x01	; 1
     c76:	88 23       	and	r24, r24
     c78:	d1 f3       	breq	.-12     	; 0xc6e <delay_ms+0x32>
		TIFR_REG->TOV0=1;
     c7a:	e8 e5       	ldi	r30, 0x58	; 88
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	81 60       	ori	r24, 0x01	; 1
     c82:	80 83       	st	Z, r24
void delay_ms(uint32 msec)
{
	TIFR_REG->TOV0=1;
	TIMSK_REG->TOIE0=0;

	while(msec--)
     c84:	1d 82       	std	Y+5, r1	; 0x05
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	9a 81       	ldd	r25, Y+2	; 0x02
     c8a:	ab 81       	ldd	r26, Y+3	; 0x03
     c8c:	bc 81       	ldd	r27, Y+4	; 0x04
     c8e:	00 97       	sbiw	r24, 0x00	; 0
     c90:	a1 05       	cpc	r26, r1
     c92:	b1 05       	cpc	r27, r1
     c94:	11 f0       	breq	.+4      	; 0xc9a <delay_ms+0x5e>
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	8d 83       	std	Y+5, r24	; 0x05
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	9a 81       	ldd	r25, Y+2	; 0x02
     c9e:	ab 81       	ldd	r26, Y+3	; 0x03
     ca0:	bc 81       	ldd	r27, Y+4	; 0x04
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	a1 09       	sbc	r26, r1
     ca6:	b1 09       	sbc	r27, r1
     ca8:	89 83       	std	Y+1, r24	; 0x01
     caa:	9a 83       	std	Y+2, r25	; 0x02
     cac:	ab 83       	std	Y+3, r26	; 0x03
     cae:	bc 83       	std	Y+4, r27	; 0x04
     cb0:	8d 81       	ldd	r24, Y+5	; 0x05
     cb2:	88 23       	and	r24, r24
     cb4:	c9 f6       	brne	.-78     	; 0xc68 <delay_ms+0x2c>

	}



}
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	08 95       	ret

00000cc6 <TIM0_EnableOVFInterrupt>:
void TIM0_EnableOVFInterrupt(void(*CallbackFunction)(void))
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	00 d0       	rcall	.+0      	; 0xccc <TIM0_EnableOVFInterrupt+0x6>
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	9a 83       	std	Y+2, r25	; 0x02
     cd2:	89 83       	std	Y+1, r24	; 0x01
	TIFR_REG->TOV0=1;
     cd4:	e8 e5       	ldi	r30, 0x58	; 88
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	81 60       	ori	r24, 0x01	; 1
     cdc:	80 83       	st	Z, r24
	TIMSK_REG->TOIE0=1;
     cde:	e9 e5       	ldi	r30, 0x59	; 89
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	81 60       	ori	r24, 0x01	; 1
     ce6:	80 83       	st	Z, r24
	if(CallbackFunction !=NULL)
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	9a 81       	ldd	r25, Y+2	; 0x02
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	31 f0       	breq	.+12     	; 0xcfc <TIM0_EnableOVFInterrupt+0x36>
	{
		TIM0_callBackOV_ptr=CallbackFunction;
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	9a 81       	ldd	r25, Y+2	; 0x02
     cf4:	90 93 81 00 	sts	0x0081, r25
     cf8:	80 93 80 00 	sts	0x0080, r24
	}

}
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	cf 91       	pop	r28
     d02:	df 91       	pop	r29
     d04:	08 95       	ret

00000d06 <TIM0_EnableCOMInterrupt>:
void TIM0_EnableCOMInterrupt(void(*CallbackFunction)(void))
{
     d06:	df 93       	push	r29
     d08:	cf 93       	push	r28
     d0a:	00 d0       	rcall	.+0      	; 0xd0c <TIM0_EnableCOMInterrupt+0x6>
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	9a 83       	std	Y+2, r25	; 0x02
     d12:	89 83       	std	Y+1, r24	; 0x01
	TIFR_REG->OCF0=1;
     d14:	e8 e5       	ldi	r30, 0x58	; 88
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	82 60       	ori	r24, 0x02	; 2
     d1c:	80 83       	st	Z, r24
	TIMSK_REG->OCIE0=1;
     d1e:	e9 e5       	ldi	r30, 0x59	; 89
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	82 60       	ori	r24, 0x02	; 2
     d26:	80 83       	st	Z, r24
	{
		TIM0_callBackCOMP_ptr=CallbackFunction;
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	9a 81       	ldd	r25, Y+2	; 0x02
     d2c:	90 93 83 00 	sts	0x0083, r25
     d30:	80 93 82 00 	sts	0x0082, r24
	}

}
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <__vector_11>:
void __vector_11(void)	__attribute__((signal, used));
void __vector_11(void)
{
     d3e:	1f 92       	push	r1
     d40:	0f 92       	push	r0
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	0f 92       	push	r0
     d46:	11 24       	eor	r1, r1
     d48:	2f 93       	push	r18
     d4a:	3f 93       	push	r19
     d4c:	4f 93       	push	r20
     d4e:	5f 93       	push	r21
     d50:	6f 93       	push	r22
     d52:	7f 93       	push	r23
     d54:	8f 93       	push	r24
     d56:	9f 93       	push	r25
     d58:	af 93       	push	r26
     d5a:	bf 93       	push	r27
     d5c:	ef 93       	push	r30
     d5e:	ff 93       	push	r31
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
	if(TIM0_callBackOV_ptr != NULL)
     d68:	80 91 80 00 	lds	r24, 0x0080
     d6c:	90 91 81 00 	lds	r25, 0x0081
     d70:	00 97       	sbiw	r24, 0x00	; 0
     d72:	29 f0       	breq	.+10     	; 0xd7e <__vector_11+0x40>
	{
		TIM0_callBackOV_ptr();
     d74:	e0 91 80 00 	lds	r30, 0x0080
     d78:	f0 91 81 00 	lds	r31, 0x0081
     d7c:	09 95       	icall
	}
}
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	ff 91       	pop	r31
     d84:	ef 91       	pop	r30
     d86:	bf 91       	pop	r27
     d88:	af 91       	pop	r26
     d8a:	9f 91       	pop	r25
     d8c:	8f 91       	pop	r24
     d8e:	7f 91       	pop	r23
     d90:	6f 91       	pop	r22
     d92:	5f 91       	pop	r21
     d94:	4f 91       	pop	r20
     d96:	3f 91       	pop	r19
     d98:	2f 91       	pop	r18
     d9a:	0f 90       	pop	r0
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	0f 90       	pop	r0
     da0:	1f 90       	pop	r1
     da2:	18 95       	reti

00000da4 <GPIO_SetupPin_Direction>:
#include "GPIO_Config.h"
#include "GPIO_Private.h"


void GPIO_SetupPin_Direction(uint8 port_id,uint8 pin_num,GPIO_PinDirection direction)
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	00 d0       	rcall	.+0      	; 0xdaa <GPIO_SetupPin_Direction+0x6>
     daa:	00 d0       	rcall	.+0      	; 0xdac <GPIO_SetupPin_Direction+0x8>
     dac:	0f 92       	push	r0
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	6a 83       	std	Y+2, r22	; 0x02
     db6:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num > NUM_OF_PINS || port_id > NUM_OF_PORTS)
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	89 30       	cpi	r24, 0x09	; 9
     dbc:	08 f0       	brcs	.+2      	; 0xdc0 <GPIO_SetupPin_Direction+0x1c>
     dbe:	e4 c0       	rjmp	.+456    	; 0xf88 <GPIO_SetupPin_Direction+0x1e4>
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	85 30       	cpi	r24, 0x05	; 5
     dc4:	08 f0       	brcs	.+2      	; 0xdc8 <GPIO_SetupPin_Direction+0x24>
     dc6:	e0 c0       	rjmp	.+448    	; 0xf88 <GPIO_SetupPin_Direction+0x1e4>
	}
	else
	{


		switch(port_id)
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	3d 83       	std	Y+5, r19	; 0x05
     dd0:	2c 83       	std	Y+4, r18	; 0x04
     dd2:	8c 81       	ldd	r24, Y+4	; 0x04
     dd4:	9d 81       	ldd	r25, Y+5	; 0x05
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	91 05       	cpc	r25, r1
     dda:	09 f4       	brne	.+2      	; 0xdde <GPIO_SetupPin_Direction+0x3a>
     ddc:	47 c0       	rjmp	.+142    	; 0xe6c <GPIO_SetupPin_Direction+0xc8>
     dde:	2c 81       	ldd	r18, Y+4	; 0x04
     de0:	3d 81       	ldd	r19, Y+5	; 0x05
     de2:	22 30       	cpi	r18, 0x02	; 2
     de4:	31 05       	cpc	r19, r1
     de6:	2c f4       	brge	.+10     	; 0xdf2 <GPIO_SetupPin_Direction+0x4e>
     de8:	8c 81       	ldd	r24, Y+4	; 0x04
     dea:	9d 81       	ldd	r25, Y+5	; 0x05
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	71 f0       	breq	.+28     	; 0xe0c <GPIO_SetupPin_Direction+0x68>
     df0:	cb c0       	rjmp	.+406    	; 0xf88 <GPIO_SetupPin_Direction+0x1e4>
     df2:	2c 81       	ldd	r18, Y+4	; 0x04
     df4:	3d 81       	ldd	r19, Y+5	; 0x05
     df6:	22 30       	cpi	r18, 0x02	; 2
     df8:	31 05       	cpc	r19, r1
     dfa:	09 f4       	brne	.+2      	; 0xdfe <GPIO_SetupPin_Direction+0x5a>
     dfc:	67 c0       	rjmp	.+206    	; 0xecc <GPIO_SetupPin_Direction+0x128>
     dfe:	8c 81       	ldd	r24, Y+4	; 0x04
     e00:	9d 81       	ldd	r25, Y+5	; 0x05
     e02:	83 30       	cpi	r24, 0x03	; 3
     e04:	91 05       	cpc	r25, r1
     e06:	09 f4       	brne	.+2      	; 0xe0a <GPIO_SetupPin_Direction+0x66>
     e08:	91 c0       	rjmp	.+290    	; 0xf2c <GPIO_SetupPin_Direction+0x188>
     e0a:	be c0       	rjmp	.+380    	; 0xf88 <GPIO_SetupPin_Direction+0x1e4>
		{
			case PORTA_ID:
				if(direction==PIN_INPUT)
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	88 23       	and	r24, r24
     e10:	a9 f4       	brne	.+42     	; 0xe3c <GPIO_SetupPin_Direction+0x98>
				{

					CLEAR_BIT(DDRA,pin_num);
     e12:	aa e3       	ldi	r26, 0x3A	; 58
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	ea e3       	ldi	r30, 0x3A	; 58
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	48 2f       	mov	r20, r24
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 2e       	mov	r0, r18
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <GPIO_SetupPin_Direction+0x8c>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <GPIO_SetupPin_Direction+0x88>
     e34:	80 95       	com	r24
     e36:	84 23       	and	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	a6 c0       	rjmp	.+332    	; 0xf88 <GPIO_SetupPin_Direction+0x1e4>
				}
				else if(direction==PIN_OUTPUT)
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	09 f0       	breq	.+2      	; 0xe44 <GPIO_SetupPin_Direction+0xa0>
     e42:	a2 c0       	rjmp	.+324    	; 0xf88 <GPIO_SetupPin_Direction+0x1e4>
				{
					SET_BIT(DDRA,pin_num);
     e44:	aa e3       	ldi	r26, 0x3A	; 58
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	ea e3       	ldi	r30, 0x3A	; 58
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	48 2f       	mov	r20, r24
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	02 2e       	mov	r0, r18
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <GPIO_SetupPin_Direction+0xbe>
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	0a 94       	dec	r0
     e64:	e2 f7       	brpl	.-8      	; 0xe5e <GPIO_SetupPin_Direction+0xba>
     e66:	84 2b       	or	r24, r20
     e68:	8c 93       	st	X, r24
     e6a:	8e c0       	rjmp	.+284    	; 0xf88 <GPIO_SetupPin_Direction+0x1e4>
				}
				break;
			case PORTB_ID:
				if(direction==PIN_INPUT)
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	88 23       	and	r24, r24
     e70:	a9 f4       	brne	.+42     	; 0xe9c <GPIO_SetupPin_Direction+0xf8>
				{
					CLEAR_BIT(DDRB,pin_num);
     e72:	a7 e3       	ldi	r26, 0x37	; 55
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e7 e3       	ldi	r30, 0x37	; 55
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 2e       	mov	r0, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <GPIO_SetupPin_Direction+0xec>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <GPIO_SetupPin_Direction+0xe8>
     e94:	80 95       	com	r24
     e96:	84 23       	and	r24, r20
     e98:	8c 93       	st	X, r24
     e9a:	76 c0       	rjmp	.+236    	; 0xf88 <GPIO_SetupPin_Direction+0x1e4>
				}
				else if(direction==PIN_OUTPUT)
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	09 f0       	breq	.+2      	; 0xea4 <GPIO_SetupPin_Direction+0x100>
     ea2:	72 c0       	rjmp	.+228    	; 0xf88 <GPIO_SetupPin_Direction+0x1e4>
				{
					SET_BIT(DDRB,pin_num);
     ea4:	a7 e3       	ldi	r26, 0x37	; 55
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e7 e3       	ldi	r30, 0x37	; 55
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	48 2f       	mov	r20, r24
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	02 2e       	mov	r0, r18
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <GPIO_SetupPin_Direction+0x11e>
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	0a 94       	dec	r0
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <GPIO_SetupPin_Direction+0x11a>
     ec6:	84 2b       	or	r24, r20
     ec8:	8c 93       	st	X, r24
     eca:	5e c0       	rjmp	.+188    	; 0xf88 <GPIO_SetupPin_Direction+0x1e4>
				}
				break;
			case PORTC_ID:
				if(direction==PIN_INPUT)
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	88 23       	and	r24, r24
     ed0:	a9 f4       	brne	.+42     	; 0xefc <GPIO_SetupPin_Direction+0x158>
				{
					CLEAR_BIT(DDRC,pin_num);
     ed2:	a4 e3       	ldi	r26, 0x34	; 52
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e4 e3       	ldi	r30, 0x34	; 52
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 2e       	mov	r0, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <GPIO_SetupPin_Direction+0x14c>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	0a 94       	dec	r0
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <GPIO_SetupPin_Direction+0x148>
     ef4:	80 95       	com	r24
     ef6:	84 23       	and	r24, r20
     ef8:	8c 93       	st	X, r24
     efa:	46 c0       	rjmp	.+140    	; 0xf88 <GPIO_SetupPin_Direction+0x1e4>
				}
				else if(direction==PIN_OUTPUT)
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	09 f0       	breq	.+2      	; 0xf04 <GPIO_SetupPin_Direction+0x160>
     f02:	42 c0       	rjmp	.+132    	; 0xf88 <GPIO_SetupPin_Direction+0x1e4>
				{
					SET_BIT(DDRC,pin_num);
     f04:	a4 e3       	ldi	r26, 0x34	; 52
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e4 e3       	ldi	r30, 0x34	; 52
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2f       	mov	r20, r24
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <GPIO_SetupPin_Direction+0x17e>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <GPIO_SetupPin_Direction+0x17a>
     f26:	84 2b       	or	r24, r20
     f28:	8c 93       	st	X, r24
     f2a:	2e c0       	rjmp	.+92     	; 0xf88 <GPIO_SetupPin_Direction+0x1e4>
				}
				break;
			case PORTD_ID:
				if(direction==PIN_INPUT)
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	88 23       	and	r24, r24
     f30:	a9 f4       	brne	.+42     	; 0xf5c <GPIO_SetupPin_Direction+0x1b8>
				{
					CLEAR_BIT(DDRD,pin_num);
     f32:	a1 e3       	ldi	r26, 0x31	; 49
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e1 e3       	ldi	r30, 0x31	; 49
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	48 2f       	mov	r20, r24
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 2e       	mov	r0, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <GPIO_SetupPin_Direction+0x1ac>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	0a 94       	dec	r0
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <GPIO_SetupPin_Direction+0x1a8>
     f54:	80 95       	com	r24
     f56:	84 23       	and	r24, r20
     f58:	8c 93       	st	X, r24
     f5a:	16 c0       	rjmp	.+44     	; 0xf88 <GPIO_SetupPin_Direction+0x1e4>
				}
				else if(direction==PIN_OUTPUT)
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	99 f4       	brne	.+38     	; 0xf88 <GPIO_SetupPin_Direction+0x1e4>
				{
					SET_BIT(DDRD,pin_num);
     f62:	a1 e3       	ldi	r26, 0x31	; 49
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e1 e3       	ldi	r30, 0x31	; 49
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <GPIO_SetupPin_Direction+0x1dc>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <GPIO_SetupPin_Direction+0x1d8>
     f84:	84 2b       	or	r24, r20
     f86:	8c 93       	st	X, r24
				}
				break;

			}
	}
}
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <GPIO_SetupPort_Direction>:
void GPIO_SetupPort_Direction(uint8 port_id,GPIO_PortDirection direction)
{
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <GPIO_SetupPort_Direction+0x6>
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <GPIO_SetupPort_Direction+0x8>
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	89 83       	std	Y+1, r24	; 0x01
     fa6:	6a 83       	std	Y+2, r22	; 0x02
	if(port_id > NUM_OF_PORTS)
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	85 30       	cpi	r24, 0x05	; 5
     fac:	08 f0       	brcs	.+2      	; 0xfb0 <GPIO_SetupPort_Direction+0x18>
     fae:	5a c0       	rjmp	.+180    	; 0x1064 <GPIO_SetupPort_Direction+0xcc>
	{

	}
	else
	{
		switch(port_id)
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	3c 83       	std	Y+4, r19	; 0x04
     fb8:	2b 83       	std	Y+3, r18	; 0x03
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	9c 81       	ldd	r25, Y+4	; 0x04
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	91 05       	cpc	r25, r1
     fc2:	21 f1       	breq	.+72     	; 0x100c <GPIO_SetupPort_Direction+0x74>
     fc4:	2b 81       	ldd	r18, Y+3	; 0x03
     fc6:	3c 81       	ldd	r19, Y+4	; 0x04
     fc8:	22 30       	cpi	r18, 0x02	; 2
     fca:	31 05       	cpc	r19, r1
     fcc:	2c f4       	brge	.+10     	; 0xfd8 <GPIO_SetupPort_Direction+0x40>
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	9c 81       	ldd	r25, Y+4	; 0x04
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	61 f0       	breq	.+24     	; 0xfee <GPIO_SetupPort_Direction+0x56>
     fd6:	46 c0       	rjmp	.+140    	; 0x1064 <GPIO_SetupPort_Direction+0xcc>
     fd8:	2b 81       	ldd	r18, Y+3	; 0x03
     fda:	3c 81       	ldd	r19, Y+4	; 0x04
     fdc:	22 30       	cpi	r18, 0x02	; 2
     fde:	31 05       	cpc	r19, r1
     fe0:	21 f1       	breq	.+72     	; 0x102a <GPIO_SetupPort_Direction+0x92>
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	9c 81       	ldd	r25, Y+4	; 0x04
     fe6:	83 30       	cpi	r24, 0x03	; 3
     fe8:	91 05       	cpc	r25, r1
     fea:	71 f1       	breq	.+92     	; 0x1048 <GPIO_SetupPort_Direction+0xb0>
     fec:	3b c0       	rjmp	.+118    	; 0x1064 <GPIO_SetupPort_Direction+0xcc>
			{
			case PORTA_ID:
				if(direction==Port_INPUT)
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	88 23       	and	r24, r24
     ff2:	21 f4       	brne	.+8      	; 0xffc <GPIO_SetupPort_Direction+0x64>
				{

					CLEAR_BYTE(DDRA);
     ff4:	ea e3       	ldi	r30, 0x3A	; 58
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	10 82       	st	Z, r1
     ffa:	34 c0       	rjmp	.+104    	; 0x1064 <GPIO_SetupPort_Direction+0xcc>
				}
				else if(direction==port_OUTPUT)
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	89 f5       	brne	.+98     	; 0x1064 <GPIO_SetupPort_Direction+0xcc>
				{
					SET_BYTE(DDRA,0xFF);
    1002:	ea e3       	ldi	r30, 0x3A	; 58
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	8f ef       	ldi	r24, 0xFF	; 255
    1008:	80 83       	st	Z, r24
    100a:	2c c0       	rjmp	.+88     	; 0x1064 <GPIO_SetupPort_Direction+0xcc>
				}
				break;
			case PORTB_ID:
				if(direction==Port_INPUT)
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	88 23       	and	r24, r24
    1010:	21 f4       	brne	.+8      	; 0x101a <GPIO_SetupPort_Direction+0x82>
				{

					CLEAR_BYTE(DDRB);
    1012:	e7 e3       	ldi	r30, 0x37	; 55
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	10 82       	st	Z, r1
    1018:	25 c0       	rjmp	.+74     	; 0x1064 <GPIO_SetupPort_Direction+0xcc>
				}
				else if(direction==port_OUTPUT)
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	11 f5       	brne	.+68     	; 0x1064 <GPIO_SetupPort_Direction+0xcc>
				{
					SET_BYTE(DDRB,0xFF);
    1020:	e7 e3       	ldi	r30, 0x37	; 55
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	8f ef       	ldi	r24, 0xFF	; 255
    1026:	80 83       	st	Z, r24
    1028:	1d c0       	rjmp	.+58     	; 0x1064 <GPIO_SetupPort_Direction+0xcc>
				}
				break;
			case PORTC_ID:
				if(direction==Port_INPUT)
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	88 23       	and	r24, r24
    102e:	21 f4       	brne	.+8      	; 0x1038 <GPIO_SetupPort_Direction+0xa0>
				{

					CLEAR_BYTE(DDRC);
    1030:	e4 e3       	ldi	r30, 0x34	; 52
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	10 82       	st	Z, r1
    1036:	16 c0       	rjmp	.+44     	; 0x1064 <GPIO_SetupPort_Direction+0xcc>
				}
				else if(direction==port_OUTPUT)
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	81 30       	cpi	r24, 0x01	; 1
    103c:	99 f4       	brne	.+38     	; 0x1064 <GPIO_SetupPort_Direction+0xcc>
				{
					SET_BYTE(DDRC,0xFF);
    103e:	e4 e3       	ldi	r30, 0x34	; 52
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	8f ef       	ldi	r24, 0xFF	; 255
    1044:	80 83       	st	Z, r24
    1046:	0e c0       	rjmp	.+28     	; 0x1064 <GPIO_SetupPort_Direction+0xcc>
				}
				break;
			case PORTD_ID:
				if(direction==Port_INPUT)
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	88 23       	and	r24, r24
    104c:	21 f4       	brne	.+8      	; 0x1056 <GPIO_SetupPort_Direction+0xbe>
				{

					CLEAR_BYTE(DDRD);
    104e:	e1 e3       	ldi	r30, 0x31	; 49
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	10 82       	st	Z, r1
    1054:	07 c0       	rjmp	.+14     	; 0x1064 <GPIO_SetupPort_Direction+0xcc>
				}
				else if(direction==port_OUTPUT)
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	21 f4       	brne	.+8      	; 0x1064 <GPIO_SetupPort_Direction+0xcc>
				{
					SET_BYTE(DDRD,0xFF);
    105c:	e1 e3       	ldi	r30, 0x31	; 49
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	8f ef       	ldi	r24, 0xFF	; 255
    1062:	80 83       	st	Z, r24
				}
				break;

			}
	}
}
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <GPIO_SetupPin_Value>:

void GPIO_SetupPin_Value(uint8 port_id,uint8 pin_num,uint8 pin_value)
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	00 d0       	rcall	.+0      	; 0x1078 <GPIO_SetupPin_Value+0x6>
    1078:	00 d0       	rcall	.+0      	; 0x107a <GPIO_SetupPin_Value+0x8>
    107a:	0f 92       	push	r0
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	6a 83       	std	Y+2, r22	; 0x02
    1084:	4b 83       	std	Y+3, r20	; 0x03

		switch(port_id)
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	3d 83       	std	Y+5, r19	; 0x05
    108e:	2c 83       	std	Y+4, r18	; 0x04
    1090:	8c 81       	ldd	r24, Y+4	; 0x04
    1092:	9d 81       	ldd	r25, Y+5	; 0x05
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	91 05       	cpc	r25, r1
    1098:	09 f4       	brne	.+2      	; 0x109c <GPIO_SetupPin_Value+0x2a>
    109a:	47 c0       	rjmp	.+142    	; 0x112a <GPIO_SetupPin_Value+0xb8>
    109c:	2c 81       	ldd	r18, Y+4	; 0x04
    109e:	3d 81       	ldd	r19, Y+5	; 0x05
    10a0:	22 30       	cpi	r18, 0x02	; 2
    10a2:	31 05       	cpc	r19, r1
    10a4:	2c f4       	brge	.+10     	; 0x10b0 <GPIO_SetupPin_Value+0x3e>
    10a6:	8c 81       	ldd	r24, Y+4	; 0x04
    10a8:	9d 81       	ldd	r25, Y+5	; 0x05
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	71 f0       	breq	.+28     	; 0x10ca <GPIO_SetupPin_Value+0x58>
    10ae:	cb c0       	rjmp	.+406    	; 0x1246 <GPIO_SetupPin_Value+0x1d4>
    10b0:	2c 81       	ldd	r18, Y+4	; 0x04
    10b2:	3d 81       	ldd	r19, Y+5	; 0x05
    10b4:	22 30       	cpi	r18, 0x02	; 2
    10b6:	31 05       	cpc	r19, r1
    10b8:	09 f4       	brne	.+2      	; 0x10bc <GPIO_SetupPin_Value+0x4a>
    10ba:	67 c0       	rjmp	.+206    	; 0x118a <GPIO_SetupPin_Value+0x118>
    10bc:	8c 81       	ldd	r24, Y+4	; 0x04
    10be:	9d 81       	ldd	r25, Y+5	; 0x05
    10c0:	83 30       	cpi	r24, 0x03	; 3
    10c2:	91 05       	cpc	r25, r1
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <GPIO_SetupPin_Value+0x56>
    10c6:	91 c0       	rjmp	.+290    	; 0x11ea <GPIO_SetupPin_Value+0x178>
    10c8:	be c0       	rjmp	.+380    	; 0x1246 <GPIO_SetupPin_Value+0x1d4>
			{
			case PORTA_ID:
				if(pin_value ==LOGIC_LOW)
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	88 23       	and	r24, r24
    10ce:	a9 f4       	brne	.+42     	; 0x10fa <GPIO_SetupPin_Value+0x88>
				{
					CLEAR_BIT(PORTA,pin_num);
    10d0:	ab e3       	ldi	r26, 0x3B	; 59
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	eb e3       	ldi	r30, 0x3B	; 59
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	48 2f       	mov	r20, r24
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 2e       	mov	r0, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <GPIO_SetupPin_Value+0x7c>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	0a 94       	dec	r0
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <GPIO_SetupPin_Value+0x78>
    10f2:	80 95       	com	r24
    10f4:	84 23       	and	r24, r20
    10f6:	8c 93       	st	X, r24
    10f8:	a6 c0       	rjmp	.+332    	; 0x1246 <GPIO_SetupPin_Value+0x1d4>
				}
				else if(pin_value == LOGIC_HIGH)
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	09 f0       	breq	.+2      	; 0x1102 <GPIO_SetupPin_Value+0x90>
    1100:	a2 c0       	rjmp	.+324    	; 0x1246 <GPIO_SetupPin_Value+0x1d4>
				{
					SET_BIT(PORTA,pin_num);
    1102:	ab e3       	ldi	r26, 0x3B	; 59
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	eb e3       	ldi	r30, 0x3B	; 59
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	48 2f       	mov	r20, r24
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	02 2e       	mov	r0, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <GPIO_SetupPin_Value+0xae>
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	0a 94       	dec	r0
    1122:	e2 f7       	brpl	.-8      	; 0x111c <GPIO_SetupPin_Value+0xaa>
    1124:	84 2b       	or	r24, r20
    1126:	8c 93       	st	X, r24
    1128:	8e c0       	rjmp	.+284    	; 0x1246 <GPIO_SetupPin_Value+0x1d4>
				}

				break;
			case PORTB_ID:
				if(pin_value ==LOGIC_LOW)
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	88 23       	and	r24, r24
    112e:	a9 f4       	brne	.+42     	; 0x115a <GPIO_SetupPin_Value+0xe8>
				{
					CLEAR_BIT(PORTB,pin_num);
    1130:	a8 e3       	ldi	r26, 0x38	; 56
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e8 e3       	ldi	r30, 0x38	; 56
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <GPIO_SetupPin_Value+0xdc>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <GPIO_SetupPin_Value+0xd8>
    1152:	80 95       	com	r24
    1154:	84 23       	and	r24, r20
    1156:	8c 93       	st	X, r24
    1158:	76 c0       	rjmp	.+236    	; 0x1246 <GPIO_SetupPin_Value+0x1d4>
				}
				else if(pin_value == LOGIC_HIGH)
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	09 f0       	breq	.+2      	; 0x1162 <GPIO_SetupPin_Value+0xf0>
    1160:	72 c0       	rjmp	.+228    	; 0x1246 <GPIO_SetupPin_Value+0x1d4>
				{
					SET_BIT(PORTB,pin_num);
    1162:	a8 e3       	ldi	r26, 0x38	; 56
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e8 e3       	ldi	r30, 0x38	; 56
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <GPIO_SetupPin_Value+0x10e>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <GPIO_SetupPin_Value+0x10a>
    1184:	84 2b       	or	r24, r20
    1186:	8c 93       	st	X, r24
    1188:	5e c0       	rjmp	.+188    	; 0x1246 <GPIO_SetupPin_Value+0x1d4>
				}
				break;
			case PORTC_ID:
				if(pin_value ==LOGIC_LOW)
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	88 23       	and	r24, r24
    118e:	a9 f4       	brne	.+42     	; 0x11ba <GPIO_SetupPin_Value+0x148>
				{
					CLEAR_BIT(PORTC,pin_num);
    1190:	a5 e3       	ldi	r26, 0x35	; 53
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e5 e3       	ldi	r30, 0x35	; 53
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <GPIO_SetupPin_Value+0x13c>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <GPIO_SetupPin_Value+0x138>
    11b2:	80 95       	com	r24
    11b4:	84 23       	and	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	46 c0       	rjmp	.+140    	; 0x1246 <GPIO_SetupPin_Value+0x1d4>
				}
				else if(pin_value == LOGIC_HIGH)
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	09 f0       	breq	.+2      	; 0x11c2 <GPIO_SetupPin_Value+0x150>
    11c0:	42 c0       	rjmp	.+132    	; 0x1246 <GPIO_SetupPin_Value+0x1d4>
				{
					SET_BIT(PORTC,pin_num);
    11c2:	a5 e3       	ldi	r26, 0x35	; 53
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e5 e3       	ldi	r30, 0x35	; 53
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <GPIO_SetupPin_Value+0x16e>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <GPIO_SetupPin_Value+0x16a>
    11e4:	84 2b       	or	r24, r20
    11e6:	8c 93       	st	X, r24
    11e8:	2e c0       	rjmp	.+92     	; 0x1246 <GPIO_SetupPin_Value+0x1d4>
				}
				break;
			case PORTD_ID:
				if(pin_value ==LOGIC_LOW)
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	88 23       	and	r24, r24
    11ee:	a9 f4       	brne	.+42     	; 0x121a <GPIO_SetupPin_Value+0x1a8>
				{
					CLEAR_BIT(PORTD,pin_num);
    11f0:	a2 e3       	ldi	r26, 0x32	; 50
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e2 e3       	ldi	r30, 0x32	; 50
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <GPIO_SetupPin_Value+0x19c>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <GPIO_SetupPin_Value+0x198>
    1212:	80 95       	com	r24
    1214:	84 23       	and	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	16 c0       	rjmp	.+44     	; 0x1246 <GPIO_SetupPin_Value+0x1d4>
				}
				else if(pin_value == LOGIC_HIGH)
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	99 f4       	brne	.+38     	; 0x1246 <GPIO_SetupPin_Value+0x1d4>
				{
					SET_BIT(PORTD,pin_num);
    1220:	a2 e3       	ldi	r26, 0x32	; 50
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e2 e3       	ldi	r30, 0x32	; 50
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <GPIO_SetupPin_Value+0x1cc>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <GPIO_SetupPin_Value+0x1c8>
    1242:	84 2b       	or	r24, r20
    1244:	8c 93       	st	X, r24
				}
				break;

			}

}
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <GPIO_SetupPort_Value>:
void GPIO_SetupPort_Value(uint8 port_id,uint8 port_value)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	00 d0       	rcall	.+0      	; 0x125c <GPIO_SetupPort_Value+0x6>
    125c:	00 d0       	rcall	.+0      	; 0x125e <GPIO_SetupPort_Value+0x8>
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	89 83       	std	Y+1, r24	; 0x01
    1264:	6a 83       	std	Y+2, r22	; 0x02
	if( port_id > NUM_OF_PORTS)
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	85 30       	cpi	r24, 0x05	; 5
    126a:	90 f5       	brcc	.+100    	; 0x12d0 <GPIO_SetupPort_Value+0x7a>
	}
	else
	{


		switch(port_id)
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	3c 83       	std	Y+4, r19	; 0x04
    1274:	2b 83       	std	Y+3, r18	; 0x03
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	91 05       	cpc	r25, r1
    127e:	d1 f0       	breq	.+52     	; 0x12b4 <GPIO_SetupPort_Value+0x5e>
    1280:	2b 81       	ldd	r18, Y+3	; 0x03
    1282:	3c 81       	ldd	r19, Y+4	; 0x04
    1284:	22 30       	cpi	r18, 0x02	; 2
    1286:	31 05       	cpc	r19, r1
    1288:	2c f4       	brge	.+10     	; 0x1294 <GPIO_SetupPort_Value+0x3e>
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	9c 81       	ldd	r25, Y+4	; 0x04
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	61 f0       	breq	.+24     	; 0x12aa <GPIO_SetupPort_Value+0x54>
    1292:	1e c0       	rjmp	.+60     	; 0x12d0 <GPIO_SetupPort_Value+0x7a>
    1294:	2b 81       	ldd	r18, Y+3	; 0x03
    1296:	3c 81       	ldd	r19, Y+4	; 0x04
    1298:	22 30       	cpi	r18, 0x02	; 2
    129a:	31 05       	cpc	r19, r1
    129c:	81 f0       	breq	.+32     	; 0x12be <GPIO_SetupPort_Value+0x68>
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	9c 81       	ldd	r25, Y+4	; 0x04
    12a2:	83 30       	cpi	r24, 0x03	; 3
    12a4:	91 05       	cpc	r25, r1
    12a6:	81 f0       	breq	.+32     	; 0x12c8 <GPIO_SetupPort_Value+0x72>
    12a8:	13 c0       	rjmp	.+38     	; 0x12d0 <GPIO_SetupPort_Value+0x7a>
			{
			case PORTA_ID:
				PORTA=port_value;
    12aa:	eb e3       	ldi	r30, 0x3B	; 59
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	80 83       	st	Z, r24
    12b2:	0e c0       	rjmp	.+28     	; 0x12d0 <GPIO_SetupPort_Value+0x7a>

				break;
			case PORTB_ID:
				PORTB=port_value;
    12b4:	e8 e3       	ldi	r30, 0x38	; 56
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	80 83       	st	Z, r24
    12bc:	09 c0       	rjmp	.+18     	; 0x12d0 <GPIO_SetupPort_Value+0x7a>
				break;
			case PORTC_ID:
				PORTC=port_value;
    12be:	e5 e3       	ldi	r30, 0x35	; 53
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	80 83       	st	Z, r24
    12c6:	04 c0       	rjmp	.+8      	; 0x12d0 <GPIO_SetupPort_Value+0x7a>
				break;
			case PORTD_ID:
				PORTD=port_value;
    12c8:	e2 e3       	ldi	r30, 0x32	; 50
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	80 83       	st	Z, r24
				break;

			}
	}
}
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <GPIO_GetPin_Value>:
uint8 GPIO_GetPin_Value(uint8 port_id,uint8 pin_num)
{
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <GPIO_GetPin_Value+0x6>
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <GPIO_GetPin_Value+0x8>
    12e6:	0f 92       	push	r0
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	8a 83       	std	Y+2, r24	; 0x02
    12ee:	6b 83       	std	Y+3, r22	; 0x03
	uint8 valu=0;
    12f0:	19 82       	std	Y+1, r1	; 0x01
	if(pin_num > NUM_OF_PINS || port_id > NUM_OF_PORTS)
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	89 30       	cpi	r24, 0x09	; 9
    12f6:	08 f0       	brcs	.+2      	; 0x12fa <GPIO_GetPin_Value+0x1c>
    12f8:	6b c0       	rjmp	.+214    	; 0x13d0 <GPIO_GetPin_Value+0xf2>
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	85 30       	cpi	r24, 0x05	; 5
    12fe:	08 f0       	brcs	.+2      	; 0x1302 <GPIO_GetPin_Value+0x24>
    1300:	67 c0       	rjmp	.+206    	; 0x13d0 <GPIO_GetPin_Value+0xf2>

	}
   else
	{

	switch(port_id)
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	3d 83       	std	Y+5, r19	; 0x05
    130a:	2c 83       	std	Y+4, r18	; 0x04
    130c:	4c 81       	ldd	r20, Y+4	; 0x04
    130e:	5d 81       	ldd	r21, Y+5	; 0x05
    1310:	41 30       	cpi	r20, 0x01	; 1
    1312:	51 05       	cpc	r21, r1
    1314:	41 f1       	breq	.+80     	; 0x1366 <GPIO_GetPin_Value+0x88>
    1316:	8c 81       	ldd	r24, Y+4	; 0x04
    1318:	9d 81       	ldd	r25, Y+5	; 0x05
    131a:	82 30       	cpi	r24, 0x02	; 2
    131c:	91 05       	cpc	r25, r1
    131e:	34 f4       	brge	.+12     	; 0x132c <GPIO_GetPin_Value+0x4e>
    1320:	2c 81       	ldd	r18, Y+4	; 0x04
    1322:	3d 81       	ldd	r19, Y+5	; 0x05
    1324:	21 15       	cp	r18, r1
    1326:	31 05       	cpc	r19, r1
    1328:	61 f0       	breq	.+24     	; 0x1342 <GPIO_GetPin_Value+0x64>
    132a:	52 c0       	rjmp	.+164    	; 0x13d0 <GPIO_GetPin_Value+0xf2>
    132c:	4c 81       	ldd	r20, Y+4	; 0x04
    132e:	5d 81       	ldd	r21, Y+5	; 0x05
    1330:	42 30       	cpi	r20, 0x02	; 2
    1332:	51 05       	cpc	r21, r1
    1334:	51 f1       	breq	.+84     	; 0x138a <GPIO_GetPin_Value+0xac>
    1336:	8c 81       	ldd	r24, Y+4	; 0x04
    1338:	9d 81       	ldd	r25, Y+5	; 0x05
    133a:	83 30       	cpi	r24, 0x03	; 3
    133c:	91 05       	cpc	r25, r1
    133e:	b9 f1       	breq	.+110    	; 0x13ae <GPIO_GetPin_Value+0xd0>
    1340:	47 c0       	rjmp	.+142    	; 0x13d0 <GPIO_GetPin_Value+0xf2>
		{
		case PORTA_ID:
			valu=GET_BIT(PINA,pin_num);
    1342:	e9 e3       	ldi	r30, 0x39	; 57
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	88 2f       	mov	r24, r24
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	a9 01       	movw	r20, r18
    1354:	02 c0       	rjmp	.+4      	; 0x135a <GPIO_GetPin_Value+0x7c>
    1356:	55 95       	asr	r21
    1358:	47 95       	ror	r20
    135a:	8a 95       	dec	r24
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <GPIO_GetPin_Value+0x78>
    135e:	ca 01       	movw	r24, r20
    1360:	81 70       	andi	r24, 0x01	; 1
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	35 c0       	rjmp	.+106    	; 0x13d0 <GPIO_GetPin_Value+0xf2>

			break;
		case PORTB_ID:
			valu= GET_BIT(PINB,pin_num);
    1366:	e6 e3       	ldi	r30, 0x36	; 54
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	88 2f       	mov	r24, r24
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	a9 01       	movw	r20, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <GPIO_GetPin_Value+0xa0>
    137a:	55 95       	asr	r21
    137c:	47 95       	ror	r20
    137e:	8a 95       	dec	r24
    1380:	e2 f7       	brpl	.-8      	; 0x137a <GPIO_GetPin_Value+0x9c>
    1382:	ca 01       	movw	r24, r20
    1384:	81 70       	andi	r24, 0x01	; 1
    1386:	89 83       	std	Y+1, r24	; 0x01
    1388:	23 c0       	rjmp	.+70     	; 0x13d0 <GPIO_GetPin_Value+0xf2>
			break;
		case PORTC_ID:
			valu= GET_BIT(PINC,pin_num);
    138a:	e3 e3       	ldi	r30, 0x33	; 51
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a9 01       	movw	r20, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <GPIO_GetPin_Value+0xc4>
    139e:	55 95       	asr	r21
    13a0:	47 95       	ror	r20
    13a2:	8a 95       	dec	r24
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <GPIO_GetPin_Value+0xc0>
    13a6:	ca 01       	movw	r24, r20
    13a8:	81 70       	andi	r24, 0x01	; 1
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	11 c0       	rjmp	.+34     	; 0x13d0 <GPIO_GetPin_Value+0xf2>
			break;
		case PORTD_ID:
			valu= GET_BIT(PIND,pin_num);
    13ae:	e0 e3       	ldi	r30, 0x30	; 48
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a9 01       	movw	r20, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <GPIO_GetPin_Value+0xe8>
    13c2:	55 95       	asr	r21
    13c4:	47 95       	ror	r20
    13c6:	8a 95       	dec	r24
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <GPIO_GetPin_Value+0xe4>
    13ca:	ca 01       	movw	r24, r20
    13cc:	81 70       	andi	r24, 0x01	; 1
    13ce:	89 83       	std	Y+1, r24	; 0x01
			break;

		}

}
	return valu;
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <GPIO_GetPort_Value>:
uint8 GPIO_GetPort_Value(uint8 port_id)
{
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <GPIO_GetPort_Value+0x6>
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <GPIO_GetPort_Value+0x8>
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 pin=0x00;
    13f0:	19 82       	std	Y+1, r1	; 0x01
	if( port_id > NUM_OF_PORTS)
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	85 30       	cpi	r24, 0x05	; 5
    13f6:	90 f5       	brcc	.+100    	; 0x145c <GPIO_GetPort_Value+0x7a>

	}
	else
	{

		switch(port_id)
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	3c 83       	std	Y+4, r19	; 0x04
    1400:	2b 83       	std	Y+3, r18	; 0x03
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	9c 81       	ldd	r25, Y+4	; 0x04
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	91 05       	cpc	r25, r1
    140a:	d1 f0       	breq	.+52     	; 0x1440 <GPIO_GetPort_Value+0x5e>
    140c:	2b 81       	ldd	r18, Y+3	; 0x03
    140e:	3c 81       	ldd	r19, Y+4	; 0x04
    1410:	22 30       	cpi	r18, 0x02	; 2
    1412:	31 05       	cpc	r19, r1
    1414:	2c f4       	brge	.+10     	; 0x1420 <GPIO_GetPort_Value+0x3e>
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	9c 81       	ldd	r25, Y+4	; 0x04
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	61 f0       	breq	.+24     	; 0x1436 <GPIO_GetPort_Value+0x54>
    141e:	1e c0       	rjmp	.+60     	; 0x145c <GPIO_GetPort_Value+0x7a>
    1420:	2b 81       	ldd	r18, Y+3	; 0x03
    1422:	3c 81       	ldd	r19, Y+4	; 0x04
    1424:	22 30       	cpi	r18, 0x02	; 2
    1426:	31 05       	cpc	r19, r1
    1428:	81 f0       	breq	.+32     	; 0x144a <GPIO_GetPort_Value+0x68>
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	9c 81       	ldd	r25, Y+4	; 0x04
    142e:	83 30       	cpi	r24, 0x03	; 3
    1430:	91 05       	cpc	r25, r1
    1432:	81 f0       	breq	.+32     	; 0x1454 <GPIO_GetPort_Value+0x72>
    1434:	13 c0       	rjmp	.+38     	; 0x145c <GPIO_GetPort_Value+0x7a>
			{
			case PORTA_ID:
				pin= PINA;
    1436:	e9 e3       	ldi	r30, 0x39	; 57
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	0e c0       	rjmp	.+28     	; 0x145c <GPIO_GetPort_Value+0x7a>
				break;
			case PORTB_ID:
				pin= PINB;
    1440:	e6 e3       	ldi	r30, 0x36	; 54
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	89 83       	std	Y+1, r24	; 0x01
    1448:	09 c0       	rjmp	.+18     	; 0x145c <GPIO_GetPort_Value+0x7a>
				break;
			case PORTC_ID:
				pin= PINC;
    144a:	e3 e3       	ldi	r30, 0x33	; 51
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	04 c0       	rjmp	.+8      	; 0x145c <GPIO_GetPort_Value+0x7a>
				break;
			case PORTD_ID:
				pin= PIND;
    1454:	e0 e3       	ldi	r30, 0x30	; 48
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
	}
	return pin;
    145c:	89 81       	ldd	r24, Y+1	; 0x01
}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <GPIO_TogglePin_Value>:
void GPIO_TogglePin_Value(uint8 port_id,uint8 pin_num)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	00 d0       	rcall	.+0      	; 0x1472 <GPIO_TogglePin_Value+0x6>
    1472:	00 d0       	rcall	.+0      	; 0x1474 <GPIO_TogglePin_Value+0x8>
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	6a 83       	std	Y+2, r22	; 0x02
	if(pin_num > NUM_OF_PINS || port_id > NUM_OF_PORTS)
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	89 30       	cpi	r24, 0x09	; 9
    1480:	08 f0       	brcs	.+2      	; 0x1484 <GPIO_TogglePin_Value+0x18>
    1482:	72 c0       	rjmp	.+228    	; 0x1568 <GPIO_TogglePin_Value+0xfc>
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	85 30       	cpi	r24, 0x05	; 5
    1488:	08 f0       	brcs	.+2      	; 0x148c <GPIO_TogglePin_Value+0x20>
    148a:	6e c0       	rjmp	.+220    	; 0x1568 <GPIO_TogglePin_Value+0xfc>
	{

	}
	else
	{
		switch(port_id)
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	3c 83       	std	Y+4, r19	; 0x04
    1494:	2b 83       	std	Y+3, r18	; 0x03
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	9c 81       	ldd	r25, Y+4	; 0x04
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	91 05       	cpc	r25, r1
    149e:	49 f1       	breq	.+82     	; 0x14f2 <GPIO_TogglePin_Value+0x86>
    14a0:	2b 81       	ldd	r18, Y+3	; 0x03
    14a2:	3c 81       	ldd	r19, Y+4	; 0x04
    14a4:	22 30       	cpi	r18, 0x02	; 2
    14a6:	31 05       	cpc	r19, r1
    14a8:	2c f4       	brge	.+10     	; 0x14b4 <GPIO_TogglePin_Value+0x48>
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	9c 81       	ldd	r25, Y+4	; 0x04
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	61 f0       	breq	.+24     	; 0x14ca <GPIO_TogglePin_Value+0x5e>
    14b2:	5a c0       	rjmp	.+180    	; 0x1568 <GPIO_TogglePin_Value+0xfc>
    14b4:	2b 81       	ldd	r18, Y+3	; 0x03
    14b6:	3c 81       	ldd	r19, Y+4	; 0x04
    14b8:	22 30       	cpi	r18, 0x02	; 2
    14ba:	31 05       	cpc	r19, r1
    14bc:	71 f1       	breq	.+92     	; 0x151a <GPIO_TogglePin_Value+0xae>
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	83 30       	cpi	r24, 0x03	; 3
    14c4:	91 05       	cpc	r25, r1
    14c6:	e9 f1       	breq	.+122    	; 0x1542 <GPIO_TogglePin_Value+0xd6>
    14c8:	4f c0       	rjmp	.+158    	; 0x1568 <GPIO_TogglePin_Value+0xfc>
		{
			case PORTA_ID:
				TOGGLE_BIT(PORTA,pin_num);
    14ca:	ab e3       	ldi	r26, 0x3B	; 59
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	eb e3       	ldi	r30, 0x3B	; 59
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	48 2f       	mov	r20, r24
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	02 2e       	mov	r0, r18
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <GPIO_TogglePin_Value+0x7c>
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	0a 94       	dec	r0
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <GPIO_TogglePin_Value+0x78>
    14ec:	84 27       	eor	r24, r20
    14ee:	8c 93       	st	X, r24
    14f0:	3b c0       	rjmp	.+118    	; 0x1568 <GPIO_TogglePin_Value+0xfc>
				break;

			case PORTB_ID:
				TOGGLE_BIT(PORTB,pin_num);
    14f2:	a8 e3       	ldi	r26, 0x38	; 56
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e8 e3       	ldi	r30, 0x38	; 56
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <GPIO_TogglePin_Value+0xa4>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <GPIO_TogglePin_Value+0xa0>
    1514:	84 27       	eor	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	27 c0       	rjmp	.+78     	; 0x1568 <GPIO_TogglePin_Value+0xfc>
				break;

			case PORTC_ID:
				TOGGLE_BIT(PORTC,pin_num);
    151a:	a5 e3       	ldi	r26, 0x35	; 53
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e5 e3       	ldi	r30, 0x35	; 53
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 2e       	mov	r0, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <GPIO_TogglePin_Value+0xcc>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	0a 94       	dec	r0
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <GPIO_TogglePin_Value+0xc8>
    153c:	84 27       	eor	r24, r20
    153e:	8c 93       	st	X, r24
    1540:	13 c0       	rjmp	.+38     	; 0x1568 <GPIO_TogglePin_Value+0xfc>
				break;

			case PORTD_ID:
				TOGGLE_BIT(PORTD,pin_num);
    1542:	a2 e3       	ldi	r26, 0x32	; 50
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e2 e3       	ldi	r30, 0x32	; 50
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 2e       	mov	r0, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <GPIO_TogglePin_Value+0xf4>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <GPIO_TogglePin_Value+0xf0>
    1564:	84 27       	eor	r24, r20
    1566:	8c 93       	st	X, r24
				break;

			}
	}

}
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	08 95       	ret

00001576 <GINT_Enable>:
#include "GINT_Config.h"



void GINT_Enable()
{
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,SREG_I_BIT);
    157e:	af e5       	ldi	r26, 0x5F	; 95
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	ef e5       	ldi	r30, 0x5F	; 95
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	80 68       	ori	r24, 0x80	; 128
    158a:	8c 93       	st	X, r24
}
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <GINT_Disable>:
void GINT_Disable()
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG_REG,SREG_I_BIT);
    159a:	af e5       	ldi	r26, 0x5F	; 95
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	ef e5       	ldi	r30, 0x5F	; 95
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	8f 77       	andi	r24, 0x7F	; 127
    15a6:	8c 93       	st	X, r24
}
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <EXTI_initINT1>:
void (*callback_Ptr_INT0)(void)=NULL;
void (*callback_Ptr_INT1)(void)=NULL;
void (*callback_Ptr_INT2)(void)=NULL;

void EXTI_initINT1(interupt_sense_control control)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	0f 92       	push	r0
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	89 83       	std	Y+1, r24	; 0x01
	GPIO_SetupPin_Direction(PORTD_ID, EXINT1_PIN, PIN_INPUT);
    15ba:	83 e0       	ldi	r24, 0x03	; 3
    15bc:	63 e0       	ldi	r22, 0x03	; 3
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Value(PORTD_ID, EXINT1_PIN, LOGIC_HIGH);
    15c4:	83 e0       	ldi	r24, 0x03	; 3
    15c6:	63 e0       	ldi	r22, 0x03	; 3
    15c8:	41 e0       	ldi	r20, 0x01	; 1
    15ca:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>

	if(control ==rising_edge)
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	79 f4       	brne	.+30     	; 0x15f2 <EXTI_initINT1+0x44>
	{
		SET_BIT(MCUCR_REG,MCUCR_ISC10);
    15d4:	a5 e5       	ldi	r26, 0x55	; 85
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e5 e5       	ldi	r30, 0x55	; 85
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	84 60       	ori	r24, 0x04	; 4
    15e0:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,MCUCR_ISC11);
    15e2:	a5 e5       	ldi	r26, 0x55	; 85
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e5 e5       	ldi	r30, 0x55	; 85
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	88 60       	ori	r24, 0x08	; 8
    15ee:	8c 93       	st	X, r24
    15f0:	11 c0       	rjmp	.+34     	; 0x1614 <EXTI_initINT1+0x66>
	}
	else if(control==falling_edge)
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	88 23       	and	r24, r24
    15f6:	71 f4       	brne	.+28     	; 0x1614 <EXTI_initINT1+0x66>
	{
		CLEAR_BIT(MCUCR_REG,MCUCR_ISC10);
    15f8:	a5 e5       	ldi	r26, 0x55	; 85
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e5 e5       	ldi	r30, 0x55	; 85
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	8b 7f       	andi	r24, 0xFB	; 251
    1604:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,MCUCR_ISC11);
    1606:	a5 e5       	ldi	r26, 0x55	; 85
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e5 e5       	ldi	r30, 0x55	; 85
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	88 60       	ori	r24, 0x08	; 8
    1612:	8c 93       	st	X, r24
	}
}
    1614:	0f 90       	pop	r0
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <EXTI_initINT0>:
void EXTI_initINT0(interupt_sense_control control)
{
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	0f 92       	push	r0
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
    1626:	89 83       	std	Y+1, r24	; 0x01
	GPIO_SetupPin_Direction(PORTD_ID, EXINT0_PIN, PIN_INPUT);
    1628:	83 e0       	ldi	r24, 0x03	; 3
    162a:	62 e0       	ldi	r22, 0x02	; 2
    162c:	40 e0       	ldi	r20, 0x00	; 0
    162e:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Value(PORTD_ID, EXINT0_PIN, LOGIC_HIGH);
    1632:	83 e0       	ldi	r24, 0x03	; 3
    1634:	62 e0       	ldi	r22, 0x02	; 2
    1636:	41 e0       	ldi	r20, 0x01	; 1
    1638:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
	if(control ==rising_edge)
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	81 30       	cpi	r24, 0x01	; 1
    1640:	79 f4       	brne	.+30     	; 0x1660 <EXTI_initINT0+0x44>
	{
		SET_BIT(MCUCR_REG,MCUCR_ISC00);
    1642:	a5 e5       	ldi	r26, 0x55	; 85
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e5 e5       	ldi	r30, 0x55	; 85
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	81 60       	ori	r24, 0x01	; 1
    164e:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,MCUCR_ISC01);
    1650:	a5 e5       	ldi	r26, 0x55	; 85
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e5 e5       	ldi	r30, 0x55	; 85
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	82 60       	ori	r24, 0x02	; 2
    165c:	8c 93       	st	X, r24
    165e:	11 c0       	rjmp	.+34     	; 0x1682 <EXTI_initINT0+0x66>

	}
	else if(control==falling_edge)
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	88 23       	and	r24, r24
    1664:	71 f4       	brne	.+28     	; 0x1682 <EXTI_initINT0+0x66>
	{
		CLEAR_BIT(MCUCR_REG,MCUCR_ISC00);
    1666:	a5 e5       	ldi	r26, 0x55	; 85
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e5 e5       	ldi	r30, 0x55	; 85
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	8e 7f       	andi	r24, 0xFE	; 254
    1672:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,MCUCR_ISC01);
    1674:	a5 e5       	ldi	r26, 0x55	; 85
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e5 e5       	ldi	r30, 0x55	; 85
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	82 60       	ori	r24, 0x02	; 2
    1680:	8c 93       	st	X, r24
	}

}
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <EXTI_initINT2>:
void EXTI_initINT2(interupt_sense_control control)
{
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	0f 92       	push	r0
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	89 83       	std	Y+1, r24	; 0x01
	GPIO_SetupPin_Direction(PORTD_ID, EXINT2_PIN, PIN_INPUT);
    1696:	83 e0       	ldi	r24, 0x03	; 3
    1698:	62 e0       	ldi	r22, 0x02	; 2
    169a:	40 e0       	ldi	r20, 0x00	; 0
    169c:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Value(PORTD_ID, EXINT2_PIN, LOGIC_HIGH);
    16a0:	83 e0       	ldi	r24, 0x03	; 3
    16a2:	62 e0       	ldi	r22, 0x02	; 2
    16a4:	41 e0       	ldi	r20, 0x01	; 1
    16a6:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
	if(control ==rising_edge)
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	81 30       	cpi	r24, 0x01	; 1
    16ae:	41 f4       	brne	.+16     	; 0x16c0 <EXTI_initINT2+0x36>
	{
		SET_BIT(MCUCSR_REG,MCUCSR_ISC2);
    16b0:	a5 e4       	ldi	r26, 0x45	; 69
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e5 e4       	ldi	r30, 0x45	; 69
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	80 64       	ori	r24, 0x40	; 64
    16bc:	8c 93       	st	X, r24
    16be:	0a c0       	rjmp	.+20     	; 0x16d4 <EXTI_initINT2+0x4a>
	}
	else if(control==falling_edge)
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	88 23       	and	r24, r24
    16c4:	39 f4       	brne	.+14     	; 0x16d4 <EXTI_initINT2+0x4a>
	{
		CLEAR_BIT(MCUCSR_REG,MCUCSR_ISC2);
    16c6:	a5 e4       	ldi	r26, 0x45	; 69
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e5 e4       	ldi	r30, 0x45	; 69
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	8f 7b       	andi	r24, 0xBF	; 191
    16d2:	8c 93       	st	X, r24
	}
}
    16d4:	0f 90       	pop	r0
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <EXTI_Enable>:

void EXTI_Enable(GINT_Control GControl, void (*callbackPtr)(void), interupt_sense_control control)
{
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <EXTI_Enable+0x6>
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <EXTI_Enable+0x8>
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	7b 83       	std	Y+3, r23	; 0x03
    16ec:	6a 83       	std	Y+2, r22	; 0x02
    16ee:	4c 83       	std	Y+4, r20	; 0x04
	if(GControl==INT0)
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	89 f4       	brne	.+34     	; 0x1718 <EXTI_Enable+0x3c>
	{
		SET_BIT(GICR_REG,GICR_INT0);
    16f6:	ab e5       	ldi	r26, 0x5B	; 91
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	eb e5       	ldi	r30, 0x5B	; 91
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	80 64       	ori	r24, 0x40	; 64
    1702:	8c 93       	st	X, r24
		callback_Ptr_INT0=callbackPtr;
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	9b 81       	ldd	r25, Y+3	; 0x03
    1708:	90 93 85 00 	sts	0x0085, r25
    170c:	80 93 84 00 	sts	0x0084, r24
		EXTI_initINT0(control);
    1710:	8c 81       	ldd	r24, Y+4	; 0x04
    1712:	0e 94 0e 0b 	call	0x161c	; 0x161c <EXTI_initINT0>
    1716:	27 c0       	rjmp	.+78     	; 0x1766 <EXTI_Enable+0x8a>
	}
	else if(GControl==INT1)
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	88 23       	and	r24, r24
    171c:	89 f4       	brne	.+34     	; 0x1740 <EXTI_Enable+0x64>
	{
		SET_BIT(GICR_REG,GICR_INT1);
    171e:	ab e5       	ldi	r26, 0x5B	; 91
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	eb e5       	ldi	r30, 0x5B	; 91
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	80 68       	ori	r24, 0x80	; 128
    172a:	8c 93       	st	X, r24
		callback_Ptr_INT1=callbackPtr;
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	9b 81       	ldd	r25, Y+3	; 0x03
    1730:	90 93 87 00 	sts	0x0087, r25
    1734:	80 93 86 00 	sts	0x0086, r24
		EXTI_initINT1(control);
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <EXTI_initINT1>
    173e:	13 c0       	rjmp	.+38     	; 0x1766 <EXTI_Enable+0x8a>
	}
	else if(GControl==INT2)
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	82 30       	cpi	r24, 0x02	; 2
    1744:	81 f4       	brne	.+32     	; 0x1766 <EXTI_Enable+0x8a>
	{
		SET_BIT(GICR_REG,GICR_INT2);
    1746:	ab e5       	ldi	r26, 0x5B	; 91
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	eb e5       	ldi	r30, 0x5B	; 91
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	80 62       	ori	r24, 0x20	; 32
    1752:	8c 93       	st	X, r24
		callback_Ptr_INT2=callbackPtr;
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	9b 81       	ldd	r25, Y+3	; 0x03
    1758:	90 93 89 00 	sts	0x0089, r25
    175c:	80 93 88 00 	sts	0x0088, r24
		EXTI_initINT2(control);
    1760:	8c 81       	ldd	r24, Y+4	; 0x04
    1762:	0e 94 45 0b 	call	0x168a	; 0x168a <EXTI_initINT2>
	}
}
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <Read_flags>:

uint8 Read_flags(GINT_Control GControl)
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	00 d0       	rcall	.+0      	; 0x177a <Read_flags+0x6>
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 flag='3';
    1780:	83 e3       	ldi	r24, 0x33	; 51
    1782:	89 83       	std	Y+1, r24	; 0x01
	if(GControl==INT0)
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	51 f4       	brne	.+20     	; 0x179e <Read_flags+0x2a>
	{
		flag=GET_BIT(GIFR_REG,GIFR_INTF0);
    178a:	ea e5       	ldi	r30, 0x5A	; 90
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	82 95       	swap	r24
    1792:	86 95       	lsr	r24
    1794:	86 95       	lsr	r24
    1796:	83 70       	andi	r24, 0x03	; 3
    1798:	81 70       	andi	r24, 0x01	; 1
    179a:	89 83       	std	Y+1, r24	; 0x01
    179c:	16 c0       	rjmp	.+44     	; 0x17ca <Read_flags+0x56>
	}
	else if(GControl==INT1)
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	88 23       	and	r24, r24
    17a2:	41 f4       	brne	.+16     	; 0x17b4 <Read_flags+0x40>
	{
		flag=GET_BIT(GIFR_REG,GIFR_INTF1);
    17a4:	ea e5       	ldi	r30, 0x5A	; 90
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	88 1f       	adc	r24, r24
    17ac:	88 27       	eor	r24, r24
    17ae:	88 1f       	adc	r24, r24
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	0b c0       	rjmp	.+22     	; 0x17ca <Read_flags+0x56>
	}
	else if(GControl==INT2)
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	82 30       	cpi	r24, 0x02	; 2
    17b8:	41 f4       	brne	.+16     	; 0x17ca <Read_flags+0x56>
	{
		flag=GET_BIT(GIFR_REG,GIFR_INTF2);
    17ba:	ea e5       	ldi	r30, 0x5A	; 90
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	82 95       	swap	r24
    17c2:	86 95       	lsr	r24
    17c4:	87 70       	andi	r24, 0x07	; 7
    17c6:	81 70       	andi	r24, 0x01	; 1
    17c8:	89 83       	std	Y+1, r24	; 0x01
	}
	return flag ;
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <__vector_1>:



void __vector_1(void)__attribute__((signal)); // command to the compiler
void __vector_1(void)
{
    17d6:	1f 92       	push	r1
    17d8:	0f 92       	push	r0
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	0f 92       	push	r0
    17de:	11 24       	eor	r1, r1
    17e0:	2f 93       	push	r18
    17e2:	3f 93       	push	r19
    17e4:	4f 93       	push	r20
    17e6:	5f 93       	push	r21
    17e8:	6f 93       	push	r22
    17ea:	7f 93       	push	r23
    17ec:	8f 93       	push	r24
    17ee:	9f 93       	push	r25
    17f0:	af 93       	push	r26
    17f2:	bf 93       	push	r27
    17f4:	ef 93       	push	r30
    17f6:	ff 93       	push	r31
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
	if(callback_Ptr_INT0 !=NULL)
    1800:	80 91 84 00 	lds	r24, 0x0084
    1804:	90 91 85 00 	lds	r25, 0x0085
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	29 f0       	breq	.+10     	; 0x1816 <__vector_1+0x40>
	{
		callback_Ptr_INT0();
    180c:	e0 91 84 00 	lds	r30, 0x0084
    1810:	f0 91 85 00 	lds	r31, 0x0085
    1814:	09 95       	icall
	}
}
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	ff 91       	pop	r31
    181c:	ef 91       	pop	r30
    181e:	bf 91       	pop	r27
    1820:	af 91       	pop	r26
    1822:	9f 91       	pop	r25
    1824:	8f 91       	pop	r24
    1826:	7f 91       	pop	r23
    1828:	6f 91       	pop	r22
    182a:	5f 91       	pop	r21
    182c:	4f 91       	pop	r20
    182e:	3f 91       	pop	r19
    1830:	2f 91       	pop	r18
    1832:	0f 90       	pop	r0
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	0f 90       	pop	r0
    1838:	1f 90       	pop	r1
    183a:	18 95       	reti

0000183c <__vector_2>:

void __vector_2(void)__attribute__((signal));
void __vector_2(void)
{
    183c:	1f 92       	push	r1
    183e:	0f 92       	push	r0
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	0f 92       	push	r0
    1844:	11 24       	eor	r1, r1
    1846:	2f 93       	push	r18
    1848:	3f 93       	push	r19
    184a:	4f 93       	push	r20
    184c:	5f 93       	push	r21
    184e:	6f 93       	push	r22
    1850:	7f 93       	push	r23
    1852:	8f 93       	push	r24
    1854:	9f 93       	push	r25
    1856:	af 93       	push	r26
    1858:	bf 93       	push	r27
    185a:	ef 93       	push	r30
    185c:	ff 93       	push	r31
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
	if(callback_Ptr_INT1 !=NULL)
    1866:	80 91 86 00 	lds	r24, 0x0086
    186a:	90 91 87 00 	lds	r25, 0x0087
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	29 f0       	breq	.+10     	; 0x187c <__vector_2+0x40>
	{
		callback_Ptr_INT1();
    1872:	e0 91 86 00 	lds	r30, 0x0086
    1876:	f0 91 87 00 	lds	r31, 0x0087
    187a:	09 95       	icall
	}
}
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	ff 91       	pop	r31
    1882:	ef 91       	pop	r30
    1884:	bf 91       	pop	r27
    1886:	af 91       	pop	r26
    1888:	9f 91       	pop	r25
    188a:	8f 91       	pop	r24
    188c:	7f 91       	pop	r23
    188e:	6f 91       	pop	r22
    1890:	5f 91       	pop	r21
    1892:	4f 91       	pop	r20
    1894:	3f 91       	pop	r19
    1896:	2f 91       	pop	r18
    1898:	0f 90       	pop	r0
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	0f 90       	pop	r0
    189e:	1f 90       	pop	r1
    18a0:	18 95       	reti

000018a2 <__vector_3>:

void __vector_3(void)__attribute__((signal));
void __vector_3(void)
{
    18a2:	1f 92       	push	r1
    18a4:	0f 92       	push	r0
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	0f 92       	push	r0
    18aa:	11 24       	eor	r1, r1
    18ac:	2f 93       	push	r18
    18ae:	3f 93       	push	r19
    18b0:	4f 93       	push	r20
    18b2:	5f 93       	push	r21
    18b4:	6f 93       	push	r22
    18b6:	7f 93       	push	r23
    18b8:	8f 93       	push	r24
    18ba:	9f 93       	push	r25
    18bc:	af 93       	push	r26
    18be:	bf 93       	push	r27
    18c0:	ef 93       	push	r30
    18c2:	ff 93       	push	r31
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
	if(callback_Ptr_INT2 !=NULL)
    18cc:	80 91 88 00 	lds	r24, 0x0088
    18d0:	90 91 89 00 	lds	r25, 0x0089
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	29 f0       	breq	.+10     	; 0x18e2 <__vector_3+0x40>
	{
		callback_Ptr_INT2();
    18d8:	e0 91 88 00 	lds	r30, 0x0088
    18dc:	f0 91 89 00 	lds	r31, 0x0089
    18e0:	09 95       	icall
	}
}
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	ff 91       	pop	r31
    18e8:	ef 91       	pop	r30
    18ea:	bf 91       	pop	r27
    18ec:	af 91       	pop	r26
    18ee:	9f 91       	pop	r25
    18f0:	8f 91       	pop	r24
    18f2:	7f 91       	pop	r23
    18f4:	6f 91       	pop	r22
    18f6:	5f 91       	pop	r21
    18f8:	4f 91       	pop	r20
    18fa:	3f 91       	pop	r19
    18fc:	2f 91       	pop	r18
    18fe:	0f 90       	pop	r0
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	0f 90       	pop	r0
    1904:	1f 90       	pop	r1
    1906:	18 95       	reti

00001908 <ADC_init>:
/** ======================= Defining global variables ======================= */
void (*ADC_callBack_ptr)(void) = NULL;
/** ========================================================================= */

void ADC_init(void)
{
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
	/* Set the ADC VREF */
	ADMUX_REG->REF=ADC_VOLTAGE_REFERENCE;
    1910:	e7 e2       	ldi	r30, 0x27	; 39
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	8f 73       	andi	r24, 0x3F	; 63
    1918:	80 64       	ori	r24, 0x40	; 64
    191a:	80 83       	st	Z, r24

	/* Enable/Disable the ADC left adjust */
#if	(ADC_LEFT_ADJUST == 1)
	ADMUX_REG->ADLAR = LeftAdjustResult;
#else
	ADMUX_REG->ADLAR = RightAdjustResult;
    191c:	e7 e2       	ldi	r30, 0x27	; 39
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	8f 7d       	andi	r24, 0xDF	; 223
    1924:	80 83       	st	Z, r24
#endif

	/* Enable/Disable the ADC Auto trigger mode (ADATE)*/
#if (ADC_AUTO_TRIGGER_ENABLE == AutoTriggered)
	/* Enable the ADC Auto trigger mode */
	ADCSRA_REG->ADATE = AutoTriggered;
    1926:	e6 e2       	ldi	r30, 0x26	; 38
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	80 62       	ori	r24, 0x20	; 32
    192e:	80 83       	st	Z, r24

	/* Set the Auto trigger mode source (ADTS)*/
	SFIOR_REG->ADTS = ADC_AUTO_TRIG_SOURCE;
    1930:	e0 e5       	ldi	r30, 0x50	; 80
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	8f 71       	andi	r24, 0x1F	; 31
    1938:	80 83       	st	Z, r24
#else
	ADCSRA_REG->ADATE = DisableAutoTriggered;
#endif

	/* Set the ADC clock division */
	ADCSRA_REG->ADPS = ADC_PRESCALER_FACTOR;
    193a:	e6 e2       	ldi	r30, 0x26	; 38
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	88 7f       	andi	r24, 0xF8	; 248
    1942:	86 60       	ori	r24, 0x06	; 6
    1944:	80 83       	st	Z, r24

	/* Enable the ADC */

	ADCSRA_REG->ADEN = 1;
    1946:	e6 e2       	ldi	r30, 0x26	; 38
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	80 68       	ori	r24, 0x80	; 128
    194e:	80 83       	st	Z, r24
}
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <ADC_selectChannel>:


void ADC_selectChannel(ADC_channel Channel)
{
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	0f 92       	push	r0
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	89 83       	std	Y+1, r24	; 0x01
	/* Set the channel selection */
	ADMUX_REG->MUX = Channel;
    1962:	e7 e2       	ldi	r30, 0x27	; 39
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	8f 71       	andi	r24, 0x1F	; 31
    196a:	98 2f       	mov	r25, r24
    196c:	9f 71       	andi	r25, 0x1F	; 31
    196e:	80 81       	ld	r24, Z
    1970:	80 7e       	andi	r24, 0xE0	; 224
    1972:	89 2b       	or	r24, r25
    1974:	80 83       	st	Z, r24
}
    1976:	0f 90       	pop	r0
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	08 95       	ret

0000197e <ADC_startConversionPollingMode>:

void ADC_startConversionPollingMode(void)
{
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
	/* Make sure the ADC Interrupt is disabled */
	if(ADCSRA_REG->ADIE == 1)
    1986:	e6 e2       	ldi	r30, 0x26	; 38
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	88 70       	andi	r24, 0x08	; 8
    198e:	88 23       	and	r24, r24
    1990:	51 f0       	breq	.+20     	; 0x19a6 <ADC_startConversionPollingMode+0x28>
	{
		ADCSRA_REG->ADIF = 1;	// Clear the ADC Interrupt flag (ADIF)
    1992:	e6 e2       	ldi	r30, 0x26	; 38
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	80 61       	ori	r24, 0x10	; 16
    199a:	80 83       	st	Z, r24
		ADCSRA_REG->ADIE = 0;	// Clear ADIE
    199c:	e6 e2       	ldi	r30, 0x26	; 38
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	87 7f       	andi	r24, 0xF7	; 247
    19a4:	80 83       	st	Z, r24
	}

	/* Start the ADC conversion */
	ADC_startConversion();
    19a6:	0e 94 de 0c 	call	0x19bc	; 0x19bc <ADC_startConversion>
	/* Poll for the ADC conversion */
	while(ADCSRA_REG->ADSC == startConversion);
    19aa:	e6 e2       	ldi	r30, 0x26	; 38
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	80 74       	andi	r24, 0x40	; 64
    19b2:	88 23       	and	r24, r24
    19b4:	d1 f7       	brne	.-12     	; 0x19aa <ADC_startConversionPollingMode+0x2c>
}
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <ADC_startConversion>:

void ADC_startConversion(void)
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
	/* Start the ADC conversion */
	ADCSRA_REG->ADSC = startConversion;
    19c4:	e6 e2       	ldi	r30, 0x26	; 38
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	80 64       	ori	r24, 0x40	; 64
    19cc:	80 83       	st	Z, r24
}
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <ADC_readChannel>:

uint16 ADC_readChannel(void)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
	uint16 data=0;
	data = (ADCL_REG >> 6);
	data |= (ADCH_REG << 2);
	return data;
#else
	return ADC_DATA_REG;
    19dc:	e4 e2       	ldi	r30, 0x24	; 36
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	91 81       	ldd	r25, Z+1	; 0x01
#endif
}
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <ADC_setCallBackFunction>:
void ADC_setCallBackFunction(void (*callBackPtr)(void))
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <ADC_setCallBackFunction+0x6>
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	9a 83       	std	Y+2, r25	; 0x02
    19f6:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA_REG->ADIF=1;
    19f8:	e6 e2       	ldi	r30, 0x26	; 38
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	80 61       	ori	r24, 0x10	; 16
    1a00:	80 83       	st	Z, r24
	ADCSRA_REG->ADIE=1;
    1a02:	e6 e2       	ldi	r30, 0x26	; 38
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	88 60       	ori	r24, 0x08	; 8
    1a0a:	80 83       	st	Z, r24
	if(callBackPtr != NULL)
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a10:	00 97       	sbiw	r24, 0x00	; 0
    1a12:	31 f0       	breq	.+12     	; 0x1a20 <ADC_setCallBackFunction+0x36>
	{
		ADC_callBack_ptr = callBackPtr;
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	90 93 8b 00 	sts	0x008B, r25
    1a1c:	80 93 8a 00 	sts	0x008A, r24
	}
	ADC_startConversion();
    1a20:	0e 94 de 0c 	call	0x19bc	; 0x19bc <ADC_startConversion>
}
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <__vector_16>:

/** ===================== ADC ISRs Implementation ========================== */
/* ADC Conversion Complete ISR */
void __vector_16(void)	__attribute__((signal, used));
void __vector_16(void)
{
    1a2e:	1f 92       	push	r1
    1a30:	0f 92       	push	r0
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	0f 92       	push	r0
    1a36:	11 24       	eor	r1, r1
    1a38:	2f 93       	push	r18
    1a3a:	3f 93       	push	r19
    1a3c:	4f 93       	push	r20
    1a3e:	5f 93       	push	r21
    1a40:	6f 93       	push	r22
    1a42:	7f 93       	push	r23
    1a44:	8f 93       	push	r24
    1a46:	9f 93       	push	r25
    1a48:	af 93       	push	r26
    1a4a:	bf 93       	push	r27
    1a4c:	ef 93       	push	r30
    1a4e:	ff 93       	push	r31
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
	if(ADC_callBack_ptr != NULL)
    1a58:	80 91 8a 00 	lds	r24, 0x008A
    1a5c:	90 91 8b 00 	lds	r25, 0x008B
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	29 f0       	breq	.+10     	; 0x1a6e <__vector_16+0x40>
	{
		ADC_callBack_ptr();
    1a64:	e0 91 8a 00 	lds	r30, 0x008A
    1a68:	f0 91 8b 00 	lds	r31, 0x008B
    1a6c:	09 95       	icall
	}
}
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	ff 91       	pop	r31
    1a74:	ef 91       	pop	r30
    1a76:	bf 91       	pop	r27
    1a78:	af 91       	pop	r26
    1a7a:	9f 91       	pop	r25
    1a7c:	8f 91       	pop	r24
    1a7e:	7f 91       	pop	r23
    1a80:	6f 91       	pop	r22
    1a82:	5f 91       	pop	r21
    1a84:	4f 91       	pop	r20
    1a86:	3f 91       	pop	r19
    1a88:	2f 91       	pop	r18
    1a8a:	0f 90       	pop	r0
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	0f 90       	pop	r0
    1a90:	1f 90       	pop	r1
    1a92:	18 95       	reti

00001a94 <LED_setUpDirection>:
 */

#include "LED.h"

void LED_setUpDirection(uint8 port_id,uint8 pin_num,GPIO_PinDirection direction)
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	00 d0       	rcall	.+0      	; 0x1a9a <LED_setUpDirection+0x6>
    1a9a:	0f 92       	push	r0
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	6a 83       	std	Y+2, r22	; 0x02
    1aa4:	4b 83       	std	Y+3, r20	; 0x03
	GPIO_SetupPin_Direction(port_id,pin_num, direction);
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	6a 81       	ldd	r22, Y+2	; 0x02
    1aaa:	4b 81       	ldd	r20, Y+3	; 0x03
    1aac:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_SetupPin_Direction>


}
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <LED_ON>:

void LED_ON(uint8 port_id,uint8 pin_num)
{
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <LED_ON+0x6>
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_SetupPin_Value(port_id,pin_num,LOGIC_HIGH);
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	6a 81       	ldd	r22, Y+2	; 0x02
    1ace:	41 e0       	ldi	r20, 0x01	; 1
    1ad0:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
}
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <LED_OFF>:
void LED_OFF(uint8 port_id,uint8 pin_num)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <LED_OFF+0x6>
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	89 83       	std	Y+1, r24	; 0x01
    1aea:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_SetupPin_Value(port_id,pin_num,LOGIC_LOW);
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	6a 81       	ldd	r22, Y+2	; 0x02
    1af0:	40 e0       	ldi	r20, 0x00	; 0
    1af2:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
}
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	08 95       	ret

00001b00 <LED_Toggle>:

void LED_Toggle(uint8 port_id, uint8 pin_num)
{
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	00 d0       	rcall	.+0      	; 0x1b06 <LED_Toggle+0x6>
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    1b0c:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_TogglePin_Value(port_id, pin_num);
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	6a 81       	ldd	r22, Y+2	; 0x02
    1b12:	0e 94 36 0a 	call	0x146c	; 0x146c <GPIO_TogglePin_Value>
}
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <LCD_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
static uint8 InitFinished = 0;

void LCD_init(void)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	e8 97       	sbiw	r28, 0x38	; 56
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	de bf       	out	0x3e, r29	; 62
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	cd bf       	out	0x3d, r28	; 61
	GPIO_SetupPin_Direction(PORTB_ID,LCD_PIN1,PIN_OUTPUT);/*D4*/
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	60 e0       	ldi	r22, 0x00	; 0
    1b38:	41 e0       	ldi	r20, 0x01	; 1
    1b3a:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(PORTB_ID,LCD_PIN2,PIN_OUTPUT);/*D5*/
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	61 e0       	ldi	r22, 0x01	; 1
    1b42:	41 e0       	ldi	r20, 0x01	; 1
    1b44:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(PORTB_ID,LCD_PIN3,PIN_OUTPUT);/*D6*/
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	62 e0       	ldi	r22, 0x02	; 2
    1b4c:	41 e0       	ldi	r20, 0x01	; 1
    1b4e:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(PORTB_ID,LCD_PIN4,PIN_OUTPUT);/*D7*/
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	64 e0       	ldi	r22, 0x04	; 4
    1b56:	41 e0       	ldi	r20, 0x01	; 1
    1b58:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_SetupPin_Direction>

	GPIO_SetupPin_Direction(PORTA_ID,LCD_RS_PIN,PIN_OUTPUT);/*RS*/
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	63 e0       	ldi	r22, 0x03	; 3
    1b60:	41 e0       	ldi	r20, 0x01	; 1
    1b62:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(PORTA_ID,LCD_EN_PIN,PIN_OUTPUT); /*EN*/
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	62 e0       	ldi	r22, 0x02	; 2
    1b6a:	41 e0       	ldi	r20, 0x01	; 1
    1b6c:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_SetupPin_Direction>
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	a0 e2       	ldi	r26, 0x20	; 32
    1b76:	b2 e4       	ldi	r27, 0x42	; 66
    1b78:	8d ab       	std	Y+53, r24	; 0x35
    1b7a:	9e ab       	std	Y+54, r25	; 0x36
    1b7c:	af ab       	std	Y+55, r26	; 0x37
    1b7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b80:	6d a9       	ldd	r22, Y+53	; 0x35
    1b82:	7e a9       	ldd	r23, Y+54	; 0x36
    1b84:	8f a9       	ldd	r24, Y+55	; 0x37
    1b86:	98 ad       	ldd	r25, Y+56	; 0x38
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	4a e7       	ldi	r20, 0x7A	; 122
    1b8e:	53 e4       	ldi	r21, 0x43	; 67
    1b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	89 ab       	std	Y+49, r24	; 0x31
    1b9a:	9a ab       	std	Y+50, r25	; 0x32
    1b9c:	ab ab       	std	Y+51, r26	; 0x33
    1b9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ba0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ba2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ba4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ba6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e8       	ldi	r20, 0x80	; 128
    1bae:	5f e3       	ldi	r21, 0x3F	; 63
    1bb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb4:	88 23       	and	r24, r24
    1bb6:	2c f4       	brge	.+10     	; 0x1bc2 <LCD_init+0xa2>
		__ticks = 1;
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	98 ab       	std	Y+48, r25	; 0x30
    1bbe:	8f a7       	std	Y+47, r24	; 0x2f
    1bc0:	3f c0       	rjmp	.+126    	; 0x1c40 <LCD_init+0x120>
	else if (__tmp > 65535)
    1bc2:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc4:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc6:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc8:	9c a9       	ldd	r25, Y+52	; 0x34
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	3f ef       	ldi	r19, 0xFF	; 255
    1bce:	4f e7       	ldi	r20, 0x7F	; 127
    1bd0:	57 e4       	ldi	r21, 0x47	; 71
    1bd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bd6:	18 16       	cp	r1, r24
    1bd8:	4c f5       	brge	.+82     	; 0x1c2c <LCD_init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bda:	6d a9       	ldd	r22, Y+53	; 0x35
    1bdc:	7e a9       	ldd	r23, Y+54	; 0x36
    1bde:	8f a9       	ldd	r24, Y+55	; 0x37
    1be0:	98 ad       	ldd	r25, Y+56	; 0x38
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e2       	ldi	r20, 0x20	; 32
    1be8:	51 e4       	ldi	r21, 0x41	; 65
    1bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	bc 01       	movw	r22, r24
    1bf4:	cd 01       	movw	r24, r26
    1bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	98 ab       	std	Y+48, r25	; 0x30
    1c00:	8f a7       	std	Y+47, r24	; 0x2f
    1c02:	0f c0       	rjmp	.+30     	; 0x1c22 <LCD_init+0x102>
    1c04:	89 e1       	ldi	r24, 0x19	; 25
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9e a7       	std	Y+46, r25	; 0x2e
    1c0a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c0c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c0e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	f1 f7       	brne	.-4      	; 0x1c10 <LCD_init+0xf0>
    1c14:	9e a7       	std	Y+46, r25	; 0x2e
    1c16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	98 ab       	std	Y+48, r25	; 0x30
    1c20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c24:	98 a9       	ldd	r25, Y+48	; 0x30
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	69 f7       	brne	.-38     	; 0x1c04 <LCD_init+0xe4>
    1c2a:	14 c0       	rjmp	.+40     	; 0x1c54 <LCD_init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c30:	8b a9       	ldd	r24, Y+51	; 0x33
    1c32:	9c a9       	ldd	r25, Y+52	; 0x34
    1c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	98 ab       	std	Y+48, r25	; 0x30
    1c3e:	8f a7       	std	Y+47, r24	; 0x2f
    1c40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c42:	98 a9       	ldd	r25, Y+48	; 0x30
    1c44:	9c a7       	std	Y+44, r25	; 0x2c
    1c46:	8b a7       	std	Y+43, r24	; 0x2b
    1c48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <LCD_init+0x12c>
    1c50:	9c a7       	std	Y+44, r25	; 0x2c
    1c52:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);

	LCD_writeCommand(0x20);
    1c54:	80 e2       	ldi	r24, 0x20	; 32
    1c56:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <LCD_writeCommand>
	LCD_writeCommand(0x20);
    1c5a:	80 e2       	ldi	r24, 0x20	; 32
    1c5c:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <LCD_writeCommand>
	LCD_writeCommand(0x80);
    1c60:	80 e8       	ldi	r24, 0x80	; 128
    1c62:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <LCD_writeCommand>
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	a0 e2       	ldi	r26, 0x20	; 32
    1c6c:	b2 e4       	ldi	r27, 0x42	; 66
    1c6e:	8f a3       	std	Y+39, r24	; 0x27
    1c70:	98 a7       	std	Y+40, r25	; 0x28
    1c72:	a9 a7       	std	Y+41, r26	; 0x29
    1c74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c76:	6f a1       	ldd	r22, Y+39	; 0x27
    1c78:	78 a5       	ldd	r23, Y+40	; 0x28
    1c7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	4a e7       	ldi	r20, 0x7A	; 122
    1c84:	53 e4       	ldi	r21, 0x43	; 67
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	8b a3       	std	Y+35, r24	; 0x23
    1c90:	9c a3       	std	Y+36, r25	; 0x24
    1c92:	ad a3       	std	Y+37, r26	; 0x25
    1c94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c96:	6b a1       	ldd	r22, Y+35	; 0x23
    1c98:	7c a1       	ldd	r23, Y+36	; 0x24
    1c9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e8       	ldi	r20, 0x80	; 128
    1ca4:	5f e3       	ldi	r21, 0x3F	; 63
    1ca6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1caa:	88 23       	and	r24, r24
    1cac:	2c f4       	brge	.+10     	; 0x1cb8 <LCD_init+0x198>
		__ticks = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	9a a3       	std	Y+34, r25	; 0x22
    1cb4:	89 a3       	std	Y+33, r24	; 0x21
    1cb6:	3f c0       	rjmp	.+126    	; 0x1d36 <LCD_init+0x216>
	else if (__tmp > 65535)
    1cb8:	6b a1       	ldd	r22, Y+35	; 0x23
    1cba:	7c a1       	ldd	r23, Y+36	; 0x24
    1cbc:	8d a1       	ldd	r24, Y+37	; 0x25
    1cbe:	9e a1       	ldd	r25, Y+38	; 0x26
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	3f ef       	ldi	r19, 0xFF	; 255
    1cc4:	4f e7       	ldi	r20, 0x7F	; 127
    1cc6:	57 e4       	ldi	r21, 0x47	; 71
    1cc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ccc:	18 16       	cp	r1, r24
    1cce:	4c f5       	brge	.+82     	; 0x1d22 <LCD_init+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd0:	6f a1       	ldd	r22, Y+39	; 0x27
    1cd2:	78 a5       	ldd	r23, Y+40	; 0x28
    1cd4:	89 a5       	ldd	r24, Y+41	; 0x29
    1cd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e2       	ldi	r20, 0x20	; 32
    1cde:	51 e4       	ldi	r21, 0x41	; 65
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9a a3       	std	Y+34, r25	; 0x22
    1cf6:	89 a3       	std	Y+33, r24	; 0x21
    1cf8:	0f c0       	rjmp	.+30     	; 0x1d18 <LCD_init+0x1f8>
    1cfa:	89 e1       	ldi	r24, 0x19	; 25
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	98 a3       	std	Y+32, r25	; 0x20
    1d00:	8f 8f       	std	Y+31, r24	; 0x1f
    1d02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d04:	98 a1       	ldd	r25, Y+32	; 0x20
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <LCD_init+0x1e6>
    1d0a:	98 a3       	std	Y+32, r25	; 0x20
    1d0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d10:	9a a1       	ldd	r25, Y+34	; 0x22
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	9a a3       	std	Y+34, r25	; 0x22
    1d16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d18:	89 a1       	ldd	r24, Y+33	; 0x21
    1d1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	69 f7       	brne	.-38     	; 0x1cfa <LCD_init+0x1da>
    1d20:	14 c0       	rjmp	.+40     	; 0x1d4a <LCD_init+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d22:	6b a1       	ldd	r22, Y+35	; 0x23
    1d24:	7c a1       	ldd	r23, Y+36	; 0x24
    1d26:	8d a1       	ldd	r24, Y+37	; 0x25
    1d28:	9e a1       	ldd	r25, Y+38	; 0x26
    1d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	9a a3       	std	Y+34, r25	; 0x22
    1d34:	89 a3       	std	Y+33, r24	; 0x21
    1d36:	89 a1       	ldd	r24, Y+33	; 0x21
    1d38:	9a a1       	ldd	r25, Y+34	; 0x22
    1d3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <LCD_init+0x222>
    1d46:	9e 8f       	std	Y+30, r25	; 0x1e
    1d48:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(40);

	LCD_writeCommand(0x00);
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <LCD_writeCommand>
	LCD_writeCommand(0xc0);
    1d50:	80 ec       	ldi	r24, 0xC0	; 192
    1d52:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <LCD_writeCommand>
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	a0 e2       	ldi	r26, 0x20	; 32
    1d5c:	b2 e4       	ldi	r27, 0x42	; 66
    1d5e:	89 8f       	std	Y+25, r24	; 0x19
    1d60:	9a 8f       	std	Y+26, r25	; 0x1a
    1d62:	ab 8f       	std	Y+27, r26	; 0x1b
    1d64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d66:	69 8d       	ldd	r22, Y+25	; 0x19
    1d68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	4a e7       	ldi	r20, 0x7A	; 122
    1d74:	53 e4       	ldi	r21, 0x43	; 67
    1d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	8d 8b       	std	Y+21, r24	; 0x15
    1d80:	9e 8b       	std	Y+22, r25	; 0x16
    1d82:	af 8b       	std	Y+23, r26	; 0x17
    1d84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d86:	6d 89       	ldd	r22, Y+21	; 0x15
    1d88:	7e 89       	ldd	r23, Y+22	; 0x16
    1d8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e8       	ldi	r20, 0x80	; 128
    1d94:	5f e3       	ldi	r21, 0x3F	; 63
    1d96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d9a:	88 23       	and	r24, r24
    1d9c:	2c f4       	brge	.+10     	; 0x1da8 <LCD_init+0x288>
		__ticks = 1;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	9c 8b       	std	Y+20, r25	; 0x14
    1da4:	8b 8b       	std	Y+19, r24	; 0x13
    1da6:	3f c0       	rjmp	.+126    	; 0x1e26 <LCD_init+0x306>
	else if (__tmp > 65535)
    1da8:	6d 89       	ldd	r22, Y+21	; 0x15
    1daa:	7e 89       	ldd	r23, Y+22	; 0x16
    1dac:	8f 89       	ldd	r24, Y+23	; 0x17
    1dae:	98 8d       	ldd	r25, Y+24	; 0x18
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	3f ef       	ldi	r19, 0xFF	; 255
    1db4:	4f e7       	ldi	r20, 0x7F	; 127
    1db6:	57 e4       	ldi	r21, 0x47	; 71
    1db8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dbc:	18 16       	cp	r1, r24
    1dbe:	4c f5       	brge	.+82     	; 0x1e12 <LCD_init+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc0:	69 8d       	ldd	r22, Y+25	; 0x19
    1dc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e2       	ldi	r20, 0x20	; 32
    1dce:	51 e4       	ldi	r21, 0x41	; 65
    1dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	bc 01       	movw	r22, r24
    1dda:	cd 01       	movw	r24, r26
    1ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	9c 8b       	std	Y+20, r25	; 0x14
    1de6:	8b 8b       	std	Y+19, r24	; 0x13
    1de8:	0f c0       	rjmp	.+30     	; 0x1e08 <LCD_init+0x2e8>
    1dea:	89 e1       	ldi	r24, 0x19	; 25
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	9a 8b       	std	Y+18, r25	; 0x12
    1df0:	89 8b       	std	Y+17, r24	; 0x11
    1df2:	89 89       	ldd	r24, Y+17	; 0x11
    1df4:	9a 89       	ldd	r25, Y+18	; 0x12
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <LCD_init+0x2d6>
    1dfa:	9a 8b       	std	Y+18, r25	; 0x12
    1dfc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfe:	8b 89       	ldd	r24, Y+19	; 0x13
    1e00:	9c 89       	ldd	r25, Y+20	; 0x14
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	9c 8b       	std	Y+20, r25	; 0x14
    1e06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e08:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	69 f7       	brne	.-38     	; 0x1dea <LCD_init+0x2ca>
    1e10:	14 c0       	rjmp	.+40     	; 0x1e3a <LCD_init+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e12:	6d 89       	ldd	r22, Y+21	; 0x15
    1e14:	7e 89       	ldd	r23, Y+22	; 0x16
    1e16:	8f 89       	ldd	r24, Y+23	; 0x17
    1e18:	98 8d       	ldd	r25, Y+24	; 0x18
    1e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	9c 8b       	std	Y+20, r25	; 0x14
    1e24:	8b 8b       	std	Y+19, r24	; 0x13
    1e26:	8b 89       	ldd	r24, Y+19	; 0x13
    1e28:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2a:	98 8b       	std	Y+16, r25	; 0x10
    1e2c:	8f 87       	std	Y+15, r24	; 0x0f
    1e2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e30:	98 89       	ldd	r25, Y+16	; 0x10
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	f1 f7       	brne	.-4      	; 0x1e32 <LCD_init+0x312>
    1e36:	98 8b       	std	Y+16, r25	; 0x10
    1e38:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(40);

	LCD_writeCommand(0x00);
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <LCD_writeCommand>
	LCD_writeCommand(0x10);
    1e40:	80 e1       	ldi	r24, 0x10	; 16
    1e42:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <LCD_writeCommand>
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	a0 e0       	ldi	r26, 0x00	; 0
    1e4c:	b0 e4       	ldi	r27, 0x40	; 64
    1e4e:	8b 87       	std	Y+11, r24	; 0x0b
    1e50:	9c 87       	std	Y+12, r25	; 0x0c
    1e52:	ad 87       	std	Y+13, r26	; 0x0d
    1e54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	4a e7       	ldi	r20, 0x7A	; 122
    1e64:	53 e4       	ldi	r21, 0x43	; 67
    1e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	8f 83       	std	Y+7, r24	; 0x07
    1e70:	98 87       	std	Y+8, r25	; 0x08
    1e72:	a9 87       	std	Y+9, r26	; 0x09
    1e74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e76:	6f 81       	ldd	r22, Y+7	; 0x07
    1e78:	78 85       	ldd	r23, Y+8	; 0x08
    1e7a:	89 85       	ldd	r24, Y+9	; 0x09
    1e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e8       	ldi	r20, 0x80	; 128
    1e84:	5f e3       	ldi	r21, 0x3F	; 63
    1e86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e8a:	88 23       	and	r24, r24
    1e8c:	2c f4       	brge	.+10     	; 0x1e98 <LCD_init+0x378>
		__ticks = 1;
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	9e 83       	std	Y+6, r25	; 0x06
    1e94:	8d 83       	std	Y+5, r24	; 0x05
    1e96:	3f c0       	rjmp	.+126    	; 0x1f16 <LCD_init+0x3f6>
	else if (__tmp > 65535)
    1e98:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9a:	78 85       	ldd	r23, Y+8	; 0x08
    1e9c:	89 85       	ldd	r24, Y+9	; 0x09
    1e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	3f ef       	ldi	r19, 0xFF	; 255
    1ea4:	4f e7       	ldi	r20, 0x7F	; 127
    1ea6:	57 e4       	ldi	r21, 0x47	; 71
    1ea8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eac:	18 16       	cp	r1, r24
    1eae:	4c f5       	brge	.+82     	; 0x1f02 <LCD_init+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e2       	ldi	r20, 0x20	; 32
    1ebe:	51 e4       	ldi	r21, 0x41	; 65
    1ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	9e 83       	std	Y+6, r25	; 0x06
    1ed6:	8d 83       	std	Y+5, r24	; 0x05
    1ed8:	0f c0       	rjmp	.+30     	; 0x1ef8 <LCD_init+0x3d8>
    1eda:	89 e1       	ldi	r24, 0x19	; 25
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	9c 83       	std	Y+4, r25	; 0x04
    1ee0:	8b 83       	std	Y+3, r24	; 0x03
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <LCD_init+0x3c6>
    1eea:	9c 83       	std	Y+4, r25	; 0x04
    1eec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	9e 83       	std	Y+6, r25	; 0x06
    1ef6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    1efa:	9e 81       	ldd	r25, Y+6	; 0x06
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	69 f7       	brne	.-38     	; 0x1eda <LCD_init+0x3ba>
    1f00:	14 c0       	rjmp	.+40     	; 0x1f2a <LCD_init+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f02:	6f 81       	ldd	r22, Y+7	; 0x07
    1f04:	78 85       	ldd	r23, Y+8	; 0x08
    1f06:	89 85       	ldd	r24, Y+9	; 0x09
    1f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	9e 83       	std	Y+6, r25	; 0x06
    1f14:	8d 83       	std	Y+5, r24	; 0x05
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1a:	9a 83       	std	Y+2, r25	; 0x02
    1f1c:	89 83       	std	Y+1, r24	; 0x01
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	9a 81       	ldd	r25, Y+2	; 0x02
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	f1 f7       	brne	.-4      	; 0x1f22 <LCD_init+0x402>
    1f26:	9a 83       	std	Y+2, r25	; 0x02
    1f28:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	InitFinished = 1;
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	80 93 8c 00 	sts	0x008C, r24
}
    1f30:	e8 96       	adiw	r28, 0x38	; 56
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	cd bf       	out	0x3d, r28	; 61
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <LCD_writeCommand>:

void LCD_writeCommand(uint8 command)
{
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	ab 97       	sbiw	r28, 0x2b	; 43
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	de bf       	out	0x3e, r29	; 62
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	cd bf       	out	0x3d, r28	; 61
    1f56:	8b a7       	std	Y+43, r24	; 0x2b
	GPIO_SetupPin_Value(PORTA_ID,LCD_RS_PIN,LOGIC_LOW);/*RS*/
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	63 e0       	ldi	r22, 0x03	; 3
    1f5c:	40 e0       	ldi	r20, 0x00	; 0
    1f5e:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>

	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN1,GET_BIT(command,4));
    1f62:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f64:	82 95       	swap	r24
    1f66:	8f 70       	andi	r24, 0x0F	; 15
    1f68:	98 2f       	mov	r25, r24
    1f6a:	91 70       	andi	r25, 0x01	; 1
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	49 2f       	mov	r20, r25
    1f72:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN2,GET_BIT(command,5));
    1f76:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f78:	82 95       	swap	r24
    1f7a:	86 95       	lsr	r24
    1f7c:	87 70       	andi	r24, 0x07	; 7
    1f7e:	98 2f       	mov	r25, r24
    1f80:	91 70       	andi	r25, 0x01	; 1
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	61 e0       	ldi	r22, 0x01	; 1
    1f86:	49 2f       	mov	r20, r25
    1f88:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN3,GET_BIT(command,6));
    1f8c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f8e:	82 95       	swap	r24
    1f90:	86 95       	lsr	r24
    1f92:	86 95       	lsr	r24
    1f94:	83 70       	andi	r24, 0x03	; 3
    1f96:	98 2f       	mov	r25, r24
    1f98:	91 70       	andi	r25, 0x01	; 1
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	62 e0       	ldi	r22, 0x02	; 2
    1f9e:	49 2f       	mov	r20, r25
    1fa0:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN4,GET_BIT(command,7));
    1fa4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fa6:	98 2f       	mov	r25, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	99 27       	eor	r25, r25
    1fac:	99 1f       	adc	r25, r25
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	64 e0       	ldi	r22, 0x04	; 4
    1fb2:	49 2f       	mov	r20, r25
    1fb4:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>

	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_HIGH);/*EN*/
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	62 e0       	ldi	r22, 0x02	; 2
    1fbc:	41 e0       	ldi	r20, 0x01	; 1
    1fbe:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a0 e8       	ldi	r26, 0x80	; 128
    1fc8:	b0 e4       	ldi	r27, 0x40	; 64
    1fca:	8f a3       	std	Y+39, r24	; 0x27
    1fcc:	98 a7       	std	Y+40, r25	; 0x28
    1fce:	a9 a7       	std	Y+41, r26	; 0x29
    1fd0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd2:	6f a1       	ldd	r22, Y+39	; 0x27
    1fd4:	78 a5       	ldd	r23, Y+40	; 0x28
    1fd6:	89 a5       	ldd	r24, Y+41	; 0x29
    1fd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a e7       	ldi	r20, 0x7A	; 122
    1fe0:	53 e4       	ldi	r21, 0x43	; 67
    1fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	8b a3       	std	Y+35, r24	; 0x23
    1fec:	9c a3       	std	Y+36, r25	; 0x24
    1fee:	ad a3       	std	Y+37, r26	; 0x25
    1ff0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ff2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ff4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ff6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ff8:	9e a1       	ldd	r25, Y+38	; 0x26
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2006:	88 23       	and	r24, r24
    2008:	2c f4       	brge	.+10     	; 0x2014 <LCD_writeCommand+0xd2>
		__ticks = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	9a a3       	std	Y+34, r25	; 0x22
    2010:	89 a3       	std	Y+33, r24	; 0x21
    2012:	3f c0       	rjmp	.+126    	; 0x2092 <LCD_writeCommand+0x150>
	else if (__tmp > 65535)
    2014:	6b a1       	ldd	r22, Y+35	; 0x23
    2016:	7c a1       	ldd	r23, Y+36	; 0x24
    2018:	8d a1       	ldd	r24, Y+37	; 0x25
    201a:	9e a1       	ldd	r25, Y+38	; 0x26
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	3f ef       	ldi	r19, 0xFF	; 255
    2020:	4f e7       	ldi	r20, 0x7F	; 127
    2022:	57 e4       	ldi	r21, 0x47	; 71
    2024:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2028:	18 16       	cp	r1, r24
    202a:	4c f5       	brge	.+82     	; 0x207e <LCD_writeCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	6f a1       	ldd	r22, Y+39	; 0x27
    202e:	78 a5       	ldd	r23, Y+40	; 0x28
    2030:	89 a5       	ldd	r24, Y+41	; 0x29
    2032:	9a a5       	ldd	r25, Y+42	; 0x2a
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e2       	ldi	r20, 0x20	; 32
    203a:	51 e4       	ldi	r21, 0x41	; 65
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	9a a3       	std	Y+34, r25	; 0x22
    2052:	89 a3       	std	Y+33, r24	; 0x21
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <LCD_writeCommand+0x132>
    2056:	89 e1       	ldi	r24, 0x19	; 25
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	98 a3       	std	Y+32, r25	; 0x20
    205c:	8f 8f       	std	Y+31, r24	; 0x1f
    205e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2060:	98 a1       	ldd	r25, Y+32	; 0x20
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_writeCommand+0x120>
    2066:	98 a3       	std	Y+32, r25	; 0x20
    2068:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206a:	89 a1       	ldd	r24, Y+33	; 0x21
    206c:	9a a1       	ldd	r25, Y+34	; 0x22
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	9a a3       	std	Y+34, r25	; 0x22
    2072:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2074:	89 a1       	ldd	r24, Y+33	; 0x21
    2076:	9a a1       	ldd	r25, Y+34	; 0x22
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	69 f7       	brne	.-38     	; 0x2056 <LCD_writeCommand+0x114>
    207c:	14 c0       	rjmp	.+40     	; 0x20a6 <LCD_writeCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207e:	6b a1       	ldd	r22, Y+35	; 0x23
    2080:	7c a1       	ldd	r23, Y+36	; 0x24
    2082:	8d a1       	ldd	r24, Y+37	; 0x25
    2084:	9e a1       	ldd	r25, Y+38	; 0x26
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9a a3       	std	Y+34, r25	; 0x22
    2090:	89 a3       	std	Y+33, r24	; 0x21
    2092:	89 a1       	ldd	r24, Y+33	; 0x21
    2094:	9a a1       	ldd	r25, Y+34	; 0x22
    2096:	9e 8f       	std	Y+30, r25	; 0x1e
    2098:	8d 8f       	std	Y+29, r24	; 0x1d
    209a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    209c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <LCD_writeCommand+0x15c>
    20a2:	9e 8f       	std	Y+30, r25	; 0x1e
    20a4:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(4);
	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_LOW);/*EN*/
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	62 e0       	ldi	r22, 0x02	; 2
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>

	// _delay_ms(4);

	if(InitFinished)
    20b0:	80 91 8c 00 	lds	r24, 0x008C
    20b4:	88 23       	and	r24, r24
    20b6:	09 f4       	brne	.+2      	; 0x20ba <LCD_writeCommand+0x178>
    20b8:	a2 c0       	rjmp	.+324    	; 0x21fe <LCD_writeCommand+0x2bc>
	{
		GPIO_SetupPin_Value(PORTB_ID,LCD_PIN1,GET_BIT(command,0));
    20ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    20bc:	98 2f       	mov	r25, r24
    20be:	91 70       	andi	r25, 0x01	; 1
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	60 e0       	ldi	r22, 0x00	; 0
    20c4:	49 2f       	mov	r20, r25
    20c6:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
		GPIO_SetupPin_Value(PORTB_ID,LCD_PIN2,GET_BIT(command,1));
    20ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    20cc:	86 95       	lsr	r24
    20ce:	98 2f       	mov	r25, r24
    20d0:	91 70       	andi	r25, 0x01	; 1
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	61 e0       	ldi	r22, 0x01	; 1
    20d6:	49 2f       	mov	r20, r25
    20d8:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
		GPIO_SetupPin_Value(PORTB_ID,LCD_PIN3,GET_BIT(command,2));
    20dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    20de:	86 95       	lsr	r24
    20e0:	86 95       	lsr	r24
    20e2:	98 2f       	mov	r25, r24
    20e4:	91 70       	andi	r25, 0x01	; 1
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	62 e0       	ldi	r22, 0x02	; 2
    20ea:	49 2f       	mov	r20, r25
    20ec:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
		GPIO_SetupPin_Value(PORTB_ID,LCD_PIN4,GET_BIT(command,3));
    20f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    20f2:	86 95       	lsr	r24
    20f4:	86 95       	lsr	r24
    20f6:	86 95       	lsr	r24
    20f8:	98 2f       	mov	r25, r24
    20fa:	91 70       	andi	r25, 0x01	; 1
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	64 e0       	ldi	r22, 0x04	; 4
    2100:	49 2f       	mov	r20, r25
    2102:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>

		GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_HIGH);/*EN*/
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	62 e0       	ldi	r22, 0x02	; 2
    210a:	41 e0       	ldi	r20, 0x01	; 1
    210c:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	a0 e8       	ldi	r26, 0x80	; 128
    2116:	b0 e4       	ldi	r27, 0x40	; 64
    2118:	89 8f       	std	Y+25, r24	; 0x19
    211a:	9a 8f       	std	Y+26, r25	; 0x1a
    211c:	ab 8f       	std	Y+27, r26	; 0x1b
    211e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2120:	69 8d       	ldd	r22, Y+25	; 0x19
    2122:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2124:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2126:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	4a e7       	ldi	r20, 0x7A	; 122
    212e:	53 e4       	ldi	r21, 0x43	; 67
    2130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	8d 8b       	std	Y+21, r24	; 0x15
    213a:	9e 8b       	std	Y+22, r25	; 0x16
    213c:	af 8b       	std	Y+23, r26	; 0x17
    213e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2140:	6d 89       	ldd	r22, Y+21	; 0x15
    2142:	7e 89       	ldd	r23, Y+22	; 0x16
    2144:	8f 89       	ldd	r24, Y+23	; 0x17
    2146:	98 8d       	ldd	r25, Y+24	; 0x18
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e8       	ldi	r20, 0x80	; 128
    214e:	5f e3       	ldi	r21, 0x3F	; 63
    2150:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2154:	88 23       	and	r24, r24
    2156:	2c f4       	brge	.+10     	; 0x2162 <LCD_writeCommand+0x220>
		__ticks = 1;
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	9c 8b       	std	Y+20, r25	; 0x14
    215e:	8b 8b       	std	Y+19, r24	; 0x13
    2160:	3f c0       	rjmp	.+126    	; 0x21e0 <LCD_writeCommand+0x29e>
	else if (__tmp > 65535)
    2162:	6d 89       	ldd	r22, Y+21	; 0x15
    2164:	7e 89       	ldd	r23, Y+22	; 0x16
    2166:	8f 89       	ldd	r24, Y+23	; 0x17
    2168:	98 8d       	ldd	r25, Y+24	; 0x18
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	3f ef       	ldi	r19, 0xFF	; 255
    216e:	4f e7       	ldi	r20, 0x7F	; 127
    2170:	57 e4       	ldi	r21, 0x47	; 71
    2172:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2176:	18 16       	cp	r1, r24
    2178:	4c f5       	brge	.+82     	; 0x21cc <LCD_writeCommand+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217a:	69 8d       	ldd	r22, Y+25	; 0x19
    217c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    217e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2180:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e2       	ldi	r20, 0x20	; 32
    2188:	51 e4       	ldi	r21, 0x41	; 65
    218a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	bc 01       	movw	r22, r24
    2194:	cd 01       	movw	r24, r26
    2196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	9c 8b       	std	Y+20, r25	; 0x14
    21a0:	8b 8b       	std	Y+19, r24	; 0x13
    21a2:	0f c0       	rjmp	.+30     	; 0x21c2 <LCD_writeCommand+0x280>
    21a4:	89 e1       	ldi	r24, 0x19	; 25
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	9a 8b       	std	Y+18, r25	; 0x12
    21aa:	89 8b       	std	Y+17, r24	; 0x11
    21ac:	89 89       	ldd	r24, Y+17	; 0x11
    21ae:	9a 89       	ldd	r25, Y+18	; 0x12
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <LCD_writeCommand+0x26e>
    21b4:	9a 8b       	std	Y+18, r25	; 0x12
    21b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b8:	8b 89       	ldd	r24, Y+19	; 0x13
    21ba:	9c 89       	ldd	r25, Y+20	; 0x14
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	9c 8b       	std	Y+20, r25	; 0x14
    21c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c2:	8b 89       	ldd	r24, Y+19	; 0x13
    21c4:	9c 89       	ldd	r25, Y+20	; 0x14
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	69 f7       	brne	.-38     	; 0x21a4 <LCD_writeCommand+0x262>
    21ca:	14 c0       	rjmp	.+40     	; 0x21f4 <LCD_writeCommand+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21cc:	6d 89       	ldd	r22, Y+21	; 0x15
    21ce:	7e 89       	ldd	r23, Y+22	; 0x16
    21d0:	8f 89       	ldd	r24, Y+23	; 0x17
    21d2:	98 8d       	ldd	r25, Y+24	; 0x18
    21d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	9c 8b       	std	Y+20, r25	; 0x14
    21de:	8b 8b       	std	Y+19, r24	; 0x13
    21e0:	8b 89       	ldd	r24, Y+19	; 0x13
    21e2:	9c 89       	ldd	r25, Y+20	; 0x14
    21e4:	98 8b       	std	Y+16, r25	; 0x10
    21e6:	8f 87       	std	Y+15, r24	; 0x0f
    21e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ea:	98 89       	ldd	r25, Y+16	; 0x10
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <LCD_writeCommand+0x2aa>
    21f0:	98 8b       	std	Y+16, r25	; 0x10
    21f2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(4);
		GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_LOW);/*EN*/
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	62 e0       	ldi	r22, 0x02	; 2
    21f8:	40 e0       	ldi	r20, 0x00	; 0
    21fa:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	a0 e8       	ldi	r26, 0x80	; 128
    2204:	b0 e4       	ldi	r27, 0x40	; 64
    2206:	8b 87       	std	Y+11, r24	; 0x0b
    2208:	9c 87       	std	Y+12, r25	; 0x0c
    220a:	ad 87       	std	Y+13, r26	; 0x0d
    220c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2210:	7c 85       	ldd	r23, Y+12	; 0x0c
    2212:	8d 85       	ldd	r24, Y+13	; 0x0d
    2214:	9e 85       	ldd	r25, Y+14	; 0x0e
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	4a e7       	ldi	r20, 0x7A	; 122
    221c:	53 e4       	ldi	r21, 0x43	; 67
    221e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	8f 83       	std	Y+7, r24	; 0x07
    2228:	98 87       	std	Y+8, r25	; 0x08
    222a:	a9 87       	std	Y+9, r26	; 0x09
    222c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    222e:	6f 81       	ldd	r22, Y+7	; 0x07
    2230:	78 85       	ldd	r23, Y+8	; 0x08
    2232:	89 85       	ldd	r24, Y+9	; 0x09
    2234:	9a 85       	ldd	r25, Y+10	; 0x0a
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e8       	ldi	r20, 0x80	; 128
    223c:	5f e3       	ldi	r21, 0x3F	; 63
    223e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2242:	88 23       	and	r24, r24
    2244:	2c f4       	brge	.+10     	; 0x2250 <LCD_writeCommand+0x30e>
		__ticks = 1;
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	9e 83       	std	Y+6, r25	; 0x06
    224c:	8d 83       	std	Y+5, r24	; 0x05
    224e:	3f c0       	rjmp	.+126    	; 0x22ce <LCD_writeCommand+0x38c>
	else if (__tmp > 65535)
    2250:	6f 81       	ldd	r22, Y+7	; 0x07
    2252:	78 85       	ldd	r23, Y+8	; 0x08
    2254:	89 85       	ldd	r24, Y+9	; 0x09
    2256:	9a 85       	ldd	r25, Y+10	; 0x0a
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	3f ef       	ldi	r19, 0xFF	; 255
    225c:	4f e7       	ldi	r20, 0x7F	; 127
    225e:	57 e4       	ldi	r21, 0x47	; 71
    2260:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2264:	18 16       	cp	r1, r24
    2266:	4c f5       	brge	.+82     	; 0x22ba <LCD_writeCommand+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2268:	6b 85       	ldd	r22, Y+11	; 0x0b
    226a:	7c 85       	ldd	r23, Y+12	; 0x0c
    226c:	8d 85       	ldd	r24, Y+13	; 0x0d
    226e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e2       	ldi	r20, 0x20	; 32
    2276:	51 e4       	ldi	r21, 0x41	; 65
    2278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	bc 01       	movw	r22, r24
    2282:	cd 01       	movw	r24, r26
    2284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	9e 83       	std	Y+6, r25	; 0x06
    228e:	8d 83       	std	Y+5, r24	; 0x05
    2290:	0f c0       	rjmp	.+30     	; 0x22b0 <LCD_writeCommand+0x36e>
    2292:	89 e1       	ldi	r24, 0x19	; 25
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	9c 83       	std	Y+4, r25	; 0x04
    2298:	8b 83       	std	Y+3, r24	; 0x03
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	9c 81       	ldd	r25, Y+4	; 0x04
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <LCD_writeCommand+0x35c>
    22a2:	9c 83       	std	Y+4, r25	; 0x04
    22a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a6:	8d 81       	ldd	r24, Y+5	; 0x05
    22a8:	9e 81       	ldd	r25, Y+6	; 0x06
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	9e 83       	std	Y+6, r25	; 0x06
    22ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b0:	8d 81       	ldd	r24, Y+5	; 0x05
    22b2:	9e 81       	ldd	r25, Y+6	; 0x06
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	69 f7       	brne	.-38     	; 0x2292 <LCD_writeCommand+0x350>
    22b8:	14 c0       	rjmp	.+40     	; 0x22e2 <LCD_writeCommand+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ba:	6f 81       	ldd	r22, Y+7	; 0x07
    22bc:	78 85       	ldd	r23, Y+8	; 0x08
    22be:	89 85       	ldd	r24, Y+9	; 0x09
    22c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	9e 83       	std	Y+6, r25	; 0x06
    22cc:	8d 83       	std	Y+5, r24	; 0x05
    22ce:	8d 81       	ldd	r24, Y+5	; 0x05
    22d0:	9e 81       	ldd	r25, Y+6	; 0x06
    22d2:	9a 83       	std	Y+2, r25	; 0x02
    22d4:	89 83       	std	Y+1, r24	; 0x01
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	9a 81       	ldd	r25, Y+2	; 0x02
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <LCD_writeCommand+0x398>
    22de:	9a 83       	std	Y+2, r25	; 0x02
    22e0:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(4);
}
    22e2:	ab 96       	adiw	r28, 0x2b	; 43
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <LCD_writeData>:
void LCD_writeData(uint8 command)
{
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	e9 97       	sbiw	r28, 0x39	; 57
    22fe:	0f b6       	in	r0, 0x3f	; 63
    2300:	f8 94       	cli
    2302:	de bf       	out	0x3e, r29	; 62
    2304:	0f be       	out	0x3f, r0	; 63
    2306:	cd bf       	out	0x3d, r28	; 61
    2308:	89 af       	std	Y+57, r24	; 0x39

	GPIO_SetupPin_Value(PORTA_ID,LCD_RS_PIN,LOGIC_HIGH);
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	63 e0       	ldi	r22, 0x03	; 3
    230e:	41 e0       	ldi	r20, 0x01	; 1
    2310:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>

	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN1,GET_BIT(command,4));
    2314:	89 ad       	ldd	r24, Y+57	; 0x39
    2316:	82 95       	swap	r24
    2318:	8f 70       	andi	r24, 0x0F	; 15
    231a:	98 2f       	mov	r25, r24
    231c:	91 70       	andi	r25, 0x01	; 1
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	60 e0       	ldi	r22, 0x00	; 0
    2322:	49 2f       	mov	r20, r25
    2324:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN2,GET_BIT(command,5));
    2328:	89 ad       	ldd	r24, Y+57	; 0x39
    232a:	82 95       	swap	r24
    232c:	86 95       	lsr	r24
    232e:	87 70       	andi	r24, 0x07	; 7
    2330:	98 2f       	mov	r25, r24
    2332:	91 70       	andi	r25, 0x01	; 1
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	61 e0       	ldi	r22, 0x01	; 1
    2338:	49 2f       	mov	r20, r25
    233a:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN3,GET_BIT(command,6));
    233e:	89 ad       	ldd	r24, Y+57	; 0x39
    2340:	82 95       	swap	r24
    2342:	86 95       	lsr	r24
    2344:	86 95       	lsr	r24
    2346:	83 70       	andi	r24, 0x03	; 3
    2348:	98 2f       	mov	r25, r24
    234a:	91 70       	andi	r25, 0x01	; 1
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	62 e0       	ldi	r22, 0x02	; 2
    2350:	49 2f       	mov	r20, r25
    2352:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN4,GET_BIT(command,7));
    2356:	89 ad       	ldd	r24, Y+57	; 0x39
    2358:	98 2f       	mov	r25, r24
    235a:	99 1f       	adc	r25, r25
    235c:	99 27       	eor	r25, r25
    235e:	99 1f       	adc	r25, r25
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	64 e0       	ldi	r22, 0x04	; 4
    2364:	49 2f       	mov	r20, r25
    2366:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>

	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_HIGH);/*EN*/
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	62 e0       	ldi	r22, 0x02	; 2
    236e:	41 e0       	ldi	r20, 0x01	; 1
    2370:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	a0 e0       	ldi	r26, 0x00	; 0
    237a:	b0 e4       	ldi	r27, 0x40	; 64
    237c:	8d ab       	std	Y+53, r24	; 0x35
    237e:	9e ab       	std	Y+54, r25	; 0x36
    2380:	af ab       	std	Y+55, r26	; 0x37
    2382:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2384:	6d a9       	ldd	r22, Y+53	; 0x35
    2386:	7e a9       	ldd	r23, Y+54	; 0x36
    2388:	8f a9       	ldd	r24, Y+55	; 0x37
    238a:	98 ad       	ldd	r25, Y+56	; 0x38
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	4a e7       	ldi	r20, 0x7A	; 122
    2392:	53 e4       	ldi	r21, 0x43	; 67
    2394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	89 ab       	std	Y+49, r24	; 0x31
    239e:	9a ab       	std	Y+50, r25	; 0x32
    23a0:	ab ab       	std	Y+51, r26	; 0x33
    23a2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23a4:	69 a9       	ldd	r22, Y+49	; 0x31
    23a6:	7a a9       	ldd	r23, Y+50	; 0x32
    23a8:	8b a9       	ldd	r24, Y+51	; 0x33
    23aa:	9c a9       	ldd	r25, Y+52	; 0x34
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	40 e8       	ldi	r20, 0x80	; 128
    23b2:	5f e3       	ldi	r21, 0x3F	; 63
    23b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b8:	88 23       	and	r24, r24
    23ba:	2c f4       	brge	.+10     	; 0x23c6 <LCD_writeData+0xd2>
		__ticks = 1;
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	98 ab       	std	Y+48, r25	; 0x30
    23c2:	8f a7       	std	Y+47, r24	; 0x2f
    23c4:	3f c0       	rjmp	.+126    	; 0x2444 <LCD_writeData+0x150>
	else if (__tmp > 65535)
    23c6:	69 a9       	ldd	r22, Y+49	; 0x31
    23c8:	7a a9       	ldd	r23, Y+50	; 0x32
    23ca:	8b a9       	ldd	r24, Y+51	; 0x33
    23cc:	9c a9       	ldd	r25, Y+52	; 0x34
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	3f ef       	ldi	r19, 0xFF	; 255
    23d2:	4f e7       	ldi	r20, 0x7F	; 127
    23d4:	57 e4       	ldi	r21, 0x47	; 71
    23d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23da:	18 16       	cp	r1, r24
    23dc:	4c f5       	brge	.+82     	; 0x2430 <LCD_writeData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23de:	6d a9       	ldd	r22, Y+53	; 0x35
    23e0:	7e a9       	ldd	r23, Y+54	; 0x36
    23e2:	8f a9       	ldd	r24, Y+55	; 0x37
    23e4:	98 ad       	ldd	r25, Y+56	; 0x38
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	40 e2       	ldi	r20, 0x20	; 32
    23ec:	51 e4       	ldi	r21, 0x41	; 65
    23ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	bc 01       	movw	r22, r24
    23f8:	cd 01       	movw	r24, r26
    23fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	98 ab       	std	Y+48, r25	; 0x30
    2404:	8f a7       	std	Y+47, r24	; 0x2f
    2406:	0f c0       	rjmp	.+30     	; 0x2426 <LCD_writeData+0x132>
    2408:	89 e1       	ldi	r24, 0x19	; 25
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	9e a7       	std	Y+46, r25	; 0x2e
    240e:	8d a7       	std	Y+45, r24	; 0x2d
    2410:	8d a5       	ldd	r24, Y+45	; 0x2d
    2412:	9e a5       	ldd	r25, Y+46	; 0x2e
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <LCD_writeData+0x120>
    2418:	9e a7       	std	Y+46, r25	; 0x2e
    241a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241c:	8f a5       	ldd	r24, Y+47	; 0x2f
    241e:	98 a9       	ldd	r25, Y+48	; 0x30
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	98 ab       	std	Y+48, r25	; 0x30
    2424:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2426:	8f a5       	ldd	r24, Y+47	; 0x2f
    2428:	98 a9       	ldd	r25, Y+48	; 0x30
    242a:	00 97       	sbiw	r24, 0x00	; 0
    242c:	69 f7       	brne	.-38     	; 0x2408 <LCD_writeData+0x114>
    242e:	14 c0       	rjmp	.+40     	; 0x2458 <LCD_writeData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2430:	69 a9       	ldd	r22, Y+49	; 0x31
    2432:	7a a9       	ldd	r23, Y+50	; 0x32
    2434:	8b a9       	ldd	r24, Y+51	; 0x33
    2436:	9c a9       	ldd	r25, Y+52	; 0x34
    2438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	98 ab       	std	Y+48, r25	; 0x30
    2442:	8f a7       	std	Y+47, r24	; 0x2f
    2444:	8f a5       	ldd	r24, Y+47	; 0x2f
    2446:	98 a9       	ldd	r25, Y+48	; 0x30
    2448:	9c a7       	std	Y+44, r25	; 0x2c
    244a:	8b a7       	std	Y+43, r24	; 0x2b
    244c:	8b a5       	ldd	r24, Y+43	; 0x2b
    244e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	f1 f7       	brne	.-4      	; 0x2450 <LCD_writeData+0x15c>
    2454:	9c a7       	std	Y+44, r25	; 0x2c
    2456:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2);
	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_LOW);/*EN*/
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	62 e0       	ldi	r22, 0x02	; 2
    245c:	40 e0       	ldi	r20, 0x00	; 0
    245e:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	a0 e0       	ldi	r26, 0x00	; 0
    2468:	b0 e4       	ldi	r27, 0x40	; 64
    246a:	8f a3       	std	Y+39, r24	; 0x27
    246c:	98 a7       	std	Y+40, r25	; 0x28
    246e:	a9 a7       	std	Y+41, r26	; 0x29
    2470:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2472:	6f a1       	ldd	r22, Y+39	; 0x27
    2474:	78 a5       	ldd	r23, Y+40	; 0x28
    2476:	89 a5       	ldd	r24, Y+41	; 0x29
    2478:	9a a5       	ldd	r25, Y+42	; 0x2a
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	4a e7       	ldi	r20, 0x7A	; 122
    2480:	53 e4       	ldi	r21, 0x43	; 67
    2482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	8b a3       	std	Y+35, r24	; 0x23
    248c:	9c a3       	std	Y+36, r25	; 0x24
    248e:	ad a3       	std	Y+37, r26	; 0x25
    2490:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2492:	6b a1       	ldd	r22, Y+35	; 0x23
    2494:	7c a1       	ldd	r23, Y+36	; 0x24
    2496:	8d a1       	ldd	r24, Y+37	; 0x25
    2498:	9e a1       	ldd	r25, Y+38	; 0x26
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e8       	ldi	r20, 0x80	; 128
    24a0:	5f e3       	ldi	r21, 0x3F	; 63
    24a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24a6:	88 23       	and	r24, r24
    24a8:	2c f4       	brge	.+10     	; 0x24b4 <LCD_writeData+0x1c0>
		__ticks = 1;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	9a a3       	std	Y+34, r25	; 0x22
    24b0:	89 a3       	std	Y+33, r24	; 0x21
    24b2:	3f c0       	rjmp	.+126    	; 0x2532 <LCD_writeData+0x23e>
	else if (__tmp > 65535)
    24b4:	6b a1       	ldd	r22, Y+35	; 0x23
    24b6:	7c a1       	ldd	r23, Y+36	; 0x24
    24b8:	8d a1       	ldd	r24, Y+37	; 0x25
    24ba:	9e a1       	ldd	r25, Y+38	; 0x26
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	3f ef       	ldi	r19, 0xFF	; 255
    24c0:	4f e7       	ldi	r20, 0x7F	; 127
    24c2:	57 e4       	ldi	r21, 0x47	; 71
    24c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24c8:	18 16       	cp	r1, r24
    24ca:	4c f5       	brge	.+82     	; 0x251e <LCD_writeData+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24cc:	6f a1       	ldd	r22, Y+39	; 0x27
    24ce:	78 a5       	ldd	r23, Y+40	; 0x28
    24d0:	89 a5       	ldd	r24, Y+41	; 0x29
    24d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e2       	ldi	r20, 0x20	; 32
    24da:	51 e4       	ldi	r21, 0x41	; 65
    24dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	bc 01       	movw	r22, r24
    24e6:	cd 01       	movw	r24, r26
    24e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	9a a3       	std	Y+34, r25	; 0x22
    24f2:	89 a3       	std	Y+33, r24	; 0x21
    24f4:	0f c0       	rjmp	.+30     	; 0x2514 <LCD_writeData+0x220>
    24f6:	89 e1       	ldi	r24, 0x19	; 25
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	98 a3       	std	Y+32, r25	; 0x20
    24fc:	8f 8f       	std	Y+31, r24	; 0x1f
    24fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2500:	98 a1       	ldd	r25, Y+32	; 0x20
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <LCD_writeData+0x20e>
    2506:	98 a3       	std	Y+32, r25	; 0x20
    2508:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250a:	89 a1       	ldd	r24, Y+33	; 0x21
    250c:	9a a1       	ldd	r25, Y+34	; 0x22
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	9a a3       	std	Y+34, r25	; 0x22
    2512:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2514:	89 a1       	ldd	r24, Y+33	; 0x21
    2516:	9a a1       	ldd	r25, Y+34	; 0x22
    2518:	00 97       	sbiw	r24, 0x00	; 0
    251a:	69 f7       	brne	.-38     	; 0x24f6 <LCD_writeData+0x202>
    251c:	14 c0       	rjmp	.+40     	; 0x2546 <LCD_writeData+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251e:	6b a1       	ldd	r22, Y+35	; 0x23
    2520:	7c a1       	ldd	r23, Y+36	; 0x24
    2522:	8d a1       	ldd	r24, Y+37	; 0x25
    2524:	9e a1       	ldd	r25, Y+38	; 0x26
    2526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	9a a3       	std	Y+34, r25	; 0x22
    2530:	89 a3       	std	Y+33, r24	; 0x21
    2532:	89 a1       	ldd	r24, Y+33	; 0x21
    2534:	9a a1       	ldd	r25, Y+34	; 0x22
    2536:	9e 8f       	std	Y+30, r25	; 0x1e
    2538:	8d 8f       	std	Y+29, r24	; 0x1d
    253a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    253c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <LCD_writeData+0x24a>
    2542:	9e 8f       	std	Y+30, r25	; 0x1e
    2544:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(2);

	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN1,GET_BIT(command,0));
    2546:	89 ad       	ldd	r24, Y+57	; 0x39
    2548:	98 2f       	mov	r25, r24
    254a:	91 70       	andi	r25, 0x01	; 1
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	60 e0       	ldi	r22, 0x00	; 0
    2550:	49 2f       	mov	r20, r25
    2552:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN2,GET_BIT(command,1));
    2556:	89 ad       	ldd	r24, Y+57	; 0x39
    2558:	86 95       	lsr	r24
    255a:	98 2f       	mov	r25, r24
    255c:	91 70       	andi	r25, 0x01	; 1
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	61 e0       	ldi	r22, 0x01	; 1
    2562:	49 2f       	mov	r20, r25
    2564:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN3,GET_BIT(command,2));
    2568:	89 ad       	ldd	r24, Y+57	; 0x39
    256a:	86 95       	lsr	r24
    256c:	86 95       	lsr	r24
    256e:	98 2f       	mov	r25, r24
    2570:	91 70       	andi	r25, 0x01	; 1
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	62 e0       	ldi	r22, 0x02	; 2
    2576:	49 2f       	mov	r20, r25
    2578:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN4,GET_BIT(command,3));
    257c:	89 ad       	ldd	r24, Y+57	; 0x39
    257e:	86 95       	lsr	r24
    2580:	86 95       	lsr	r24
    2582:	86 95       	lsr	r24
    2584:	98 2f       	mov	r25, r24
    2586:	91 70       	andi	r25, 0x01	; 1
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	64 e0       	ldi	r22, 0x04	; 4
    258c:	49 2f       	mov	r20, r25
    258e:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>


	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_HIGH);/*EN*/
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	62 e0       	ldi	r22, 0x02	; 2
    2596:	41 e0       	ldi	r20, 0x01	; 1
    2598:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	a0 e0       	ldi	r26, 0x00	; 0
    25a2:	b0 e4       	ldi	r27, 0x40	; 64
    25a4:	89 8f       	std	Y+25, r24	; 0x19
    25a6:	9a 8f       	std	Y+26, r25	; 0x1a
    25a8:	ab 8f       	std	Y+27, r26	; 0x1b
    25aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ac:	69 8d       	ldd	r22, Y+25	; 0x19
    25ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	4a e7       	ldi	r20, 0x7A	; 122
    25ba:	53 e4       	ldi	r21, 0x43	; 67
    25bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	8d 8b       	std	Y+21, r24	; 0x15
    25c6:	9e 8b       	std	Y+22, r25	; 0x16
    25c8:	af 8b       	std	Y+23, r26	; 0x17
    25ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25cc:	6d 89       	ldd	r22, Y+21	; 0x15
    25ce:	7e 89       	ldd	r23, Y+22	; 0x16
    25d0:	8f 89       	ldd	r24, Y+23	; 0x17
    25d2:	98 8d       	ldd	r25, Y+24	; 0x18
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e8       	ldi	r20, 0x80	; 128
    25da:	5f e3       	ldi	r21, 0x3F	; 63
    25dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25e0:	88 23       	and	r24, r24
    25e2:	2c f4       	brge	.+10     	; 0x25ee <LCD_writeData+0x2fa>
		__ticks = 1;
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	9c 8b       	std	Y+20, r25	; 0x14
    25ea:	8b 8b       	std	Y+19, r24	; 0x13
    25ec:	3f c0       	rjmp	.+126    	; 0x266c <LCD_writeData+0x378>
	else if (__tmp > 65535)
    25ee:	6d 89       	ldd	r22, Y+21	; 0x15
    25f0:	7e 89       	ldd	r23, Y+22	; 0x16
    25f2:	8f 89       	ldd	r24, Y+23	; 0x17
    25f4:	98 8d       	ldd	r25, Y+24	; 0x18
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	3f ef       	ldi	r19, 0xFF	; 255
    25fa:	4f e7       	ldi	r20, 0x7F	; 127
    25fc:	57 e4       	ldi	r21, 0x47	; 71
    25fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2602:	18 16       	cp	r1, r24
    2604:	4c f5       	brge	.+82     	; 0x2658 <LCD_writeData+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2606:	69 8d       	ldd	r22, Y+25	; 0x19
    2608:	7a 8d       	ldd	r23, Y+26	; 0x1a
    260a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    260c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e2       	ldi	r20, 0x20	; 32
    2614:	51 e4       	ldi	r21, 0x41	; 65
    2616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	bc 01       	movw	r22, r24
    2620:	cd 01       	movw	r24, r26
    2622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	9c 8b       	std	Y+20, r25	; 0x14
    262c:	8b 8b       	std	Y+19, r24	; 0x13
    262e:	0f c0       	rjmp	.+30     	; 0x264e <LCD_writeData+0x35a>
    2630:	89 e1       	ldi	r24, 0x19	; 25
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	9a 8b       	std	Y+18, r25	; 0x12
    2636:	89 8b       	std	Y+17, r24	; 0x11
    2638:	89 89       	ldd	r24, Y+17	; 0x11
    263a:	9a 89       	ldd	r25, Y+18	; 0x12
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <LCD_writeData+0x348>
    2640:	9a 8b       	std	Y+18, r25	; 0x12
    2642:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2644:	8b 89       	ldd	r24, Y+19	; 0x13
    2646:	9c 89       	ldd	r25, Y+20	; 0x14
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	9c 8b       	std	Y+20, r25	; 0x14
    264c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264e:	8b 89       	ldd	r24, Y+19	; 0x13
    2650:	9c 89       	ldd	r25, Y+20	; 0x14
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	69 f7       	brne	.-38     	; 0x2630 <LCD_writeData+0x33c>
    2656:	14 c0       	rjmp	.+40     	; 0x2680 <LCD_writeData+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2658:	6d 89       	ldd	r22, Y+21	; 0x15
    265a:	7e 89       	ldd	r23, Y+22	; 0x16
    265c:	8f 89       	ldd	r24, Y+23	; 0x17
    265e:	98 8d       	ldd	r25, Y+24	; 0x18
    2660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	9c 8b       	std	Y+20, r25	; 0x14
    266a:	8b 8b       	std	Y+19, r24	; 0x13
    266c:	8b 89       	ldd	r24, Y+19	; 0x13
    266e:	9c 89       	ldd	r25, Y+20	; 0x14
    2670:	98 8b       	std	Y+16, r25	; 0x10
    2672:	8f 87       	std	Y+15, r24	; 0x0f
    2674:	8f 85       	ldd	r24, Y+15	; 0x0f
    2676:	98 89       	ldd	r25, Y+16	; 0x10
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	f1 f7       	brne	.-4      	; 0x2678 <LCD_writeData+0x384>
    267c:	98 8b       	std	Y+16, r25	; 0x10
    267e:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);
	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_LOW);/*EN*/
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	62 e0       	ldi	r22, 0x02	; 2
    2684:	40 e0       	ldi	r20, 0x00	; 0
    2686:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	a0 e0       	ldi	r26, 0x00	; 0
    2690:	b0 e4       	ldi	r27, 0x40	; 64
    2692:	8b 87       	std	Y+11, r24	; 0x0b
    2694:	9c 87       	std	Y+12, r25	; 0x0c
    2696:	ad 87       	std	Y+13, r26	; 0x0d
    2698:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269a:	6b 85       	ldd	r22, Y+11	; 0x0b
    269c:	7c 85       	ldd	r23, Y+12	; 0x0c
    269e:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	4a e7       	ldi	r20, 0x7A	; 122
    26a8:	53 e4       	ldi	r21, 0x43	; 67
    26aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	8f 83       	std	Y+7, r24	; 0x07
    26b4:	98 87       	std	Y+8, r25	; 0x08
    26b6:	a9 87       	std	Y+9, r26	; 0x09
    26b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26ba:	6f 81       	ldd	r22, Y+7	; 0x07
    26bc:	78 85       	ldd	r23, Y+8	; 0x08
    26be:	89 85       	ldd	r24, Y+9	; 0x09
    26c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e8       	ldi	r20, 0x80	; 128
    26c8:	5f e3       	ldi	r21, 0x3F	; 63
    26ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ce:	88 23       	and	r24, r24
    26d0:	2c f4       	brge	.+10     	; 0x26dc <LCD_writeData+0x3e8>
		__ticks = 1;
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	9e 83       	std	Y+6, r25	; 0x06
    26d8:	8d 83       	std	Y+5, r24	; 0x05
    26da:	3f c0       	rjmp	.+126    	; 0x275a <LCD_writeData+0x466>
	else if (__tmp > 65535)
    26dc:	6f 81       	ldd	r22, Y+7	; 0x07
    26de:	78 85       	ldd	r23, Y+8	; 0x08
    26e0:	89 85       	ldd	r24, Y+9	; 0x09
    26e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	3f ef       	ldi	r19, 0xFF	; 255
    26e8:	4f e7       	ldi	r20, 0x7F	; 127
    26ea:	57 e4       	ldi	r21, 0x47	; 71
    26ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26f0:	18 16       	cp	r1, r24
    26f2:	4c f5       	brge	.+82     	; 0x2746 <LCD_writeData+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e2       	ldi	r20, 0x20	; 32
    2702:	51 e4       	ldi	r21, 0x41	; 65
    2704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	bc 01       	movw	r22, r24
    270e:	cd 01       	movw	r24, r26
    2710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	9e 83       	std	Y+6, r25	; 0x06
    271a:	8d 83       	std	Y+5, r24	; 0x05
    271c:	0f c0       	rjmp	.+30     	; 0x273c <LCD_writeData+0x448>
    271e:	89 e1       	ldi	r24, 0x19	; 25
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	9c 83       	std	Y+4, r25	; 0x04
    2724:	8b 83       	std	Y+3, r24	; 0x03
    2726:	8b 81       	ldd	r24, Y+3	; 0x03
    2728:	9c 81       	ldd	r25, Y+4	; 0x04
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	f1 f7       	brne	.-4      	; 0x272a <LCD_writeData+0x436>
    272e:	9c 83       	std	Y+4, r25	; 0x04
    2730:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2732:	8d 81       	ldd	r24, Y+5	; 0x05
    2734:	9e 81       	ldd	r25, Y+6	; 0x06
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	9e 83       	std	Y+6, r25	; 0x06
    273a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273c:	8d 81       	ldd	r24, Y+5	; 0x05
    273e:	9e 81       	ldd	r25, Y+6	; 0x06
    2740:	00 97       	sbiw	r24, 0x00	; 0
    2742:	69 f7       	brne	.-38     	; 0x271e <LCD_writeData+0x42a>
    2744:	14 c0       	rjmp	.+40     	; 0x276e <LCD_writeData+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2746:	6f 81       	ldd	r22, Y+7	; 0x07
    2748:	78 85       	ldd	r23, Y+8	; 0x08
    274a:	89 85       	ldd	r24, Y+9	; 0x09
    274c:	9a 85       	ldd	r25, Y+10	; 0x0a
    274e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	9e 83       	std	Y+6, r25	; 0x06
    2758:	8d 83       	std	Y+5, r24	; 0x05
    275a:	8d 81       	ldd	r24, Y+5	; 0x05
    275c:	9e 81       	ldd	r25, Y+6	; 0x06
    275e:	9a 83       	std	Y+2, r25	; 0x02
    2760:	89 83       	std	Y+1, r24	; 0x01
    2762:	89 81       	ldd	r24, Y+1	; 0x01
    2764:	9a 81       	ldd	r25, Y+2	; 0x02
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	f1 f7       	brne	.-4      	; 0x2766 <LCD_writeData+0x472>
    276a:	9a 83       	std	Y+2, r25	; 0x02
    276c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    276e:	e9 96       	adiw	r28, 0x39	; 57
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	f8 94       	cli
    2774:	de bf       	out	0x3e, r29	; 62
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	cd bf       	out	0x3d, r28	; 61
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	08 95       	ret

00002780 <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2780:	df 93       	push	r29
    2782:	cf 93       	push	r28
    2784:	00 d0       	rcall	.+0      	; 0x2786 <LCD_goToRowColumn+0x6>
    2786:	00 d0       	rcall	.+0      	; 0x2788 <LCD_goToRowColumn+0x8>
    2788:	0f 92       	push	r0
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
    278e:	8a 83       	std	Y+2, r24	; 0x02
    2790:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    2792:	8a 81       	ldd	r24, Y+2	; 0x02
    2794:	28 2f       	mov	r18, r24
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	3d 83       	std	Y+5, r19	; 0x05
    279a:	2c 83       	std	Y+4, r18	; 0x04
    279c:	8c 81       	ldd	r24, Y+4	; 0x04
    279e:	9d 81       	ldd	r25, Y+5	; 0x05
    27a0:	81 30       	cpi	r24, 0x01	; 1
    27a2:	91 05       	cpc	r25, r1
    27a4:	c9 f0       	breq	.+50     	; 0x27d8 <LCD_goToRowColumn+0x58>
    27a6:	2c 81       	ldd	r18, Y+4	; 0x04
    27a8:	3d 81       	ldd	r19, Y+5	; 0x05
    27aa:	22 30       	cpi	r18, 0x02	; 2
    27ac:	31 05       	cpc	r19, r1
    27ae:	2c f4       	brge	.+10     	; 0x27ba <LCD_goToRowColumn+0x3a>
    27b0:	8c 81       	ldd	r24, Y+4	; 0x04
    27b2:	9d 81       	ldd	r25, Y+5	; 0x05
    27b4:	00 97       	sbiw	r24, 0x00	; 0
    27b6:	61 f0       	breq	.+24     	; 0x27d0 <LCD_goToRowColumn+0x50>
    27b8:	1a c0       	rjmp	.+52     	; 0x27ee <LCD_goToRowColumn+0x6e>
    27ba:	2c 81       	ldd	r18, Y+4	; 0x04
    27bc:	3d 81       	ldd	r19, Y+5	; 0x05
    27be:	22 30       	cpi	r18, 0x02	; 2
    27c0:	31 05       	cpc	r19, r1
    27c2:	71 f0       	breq	.+28     	; 0x27e0 <LCD_goToRowColumn+0x60>
    27c4:	8c 81       	ldd	r24, Y+4	; 0x04
    27c6:	9d 81       	ldd	r25, Y+5	; 0x05
    27c8:	83 30       	cpi	r24, 0x03	; 3
    27ca:	91 05       	cpc	r25, r1
    27cc:	69 f0       	breq	.+26     	; 0x27e8 <LCD_goToRowColumn+0x68>
    27ce:	0f c0       	rjmp	.+30     	; 0x27ee <LCD_goToRowColumn+0x6e>
	{
		case 0:
				Address=0x80+col;
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	80 58       	subi	r24, 0x80	; 128
    27d4:	89 83       	std	Y+1, r24	; 0x01
    27d6:	0b c0       	rjmp	.+22     	; 0x27ee <LCD_goToRowColumn+0x6e>
				break;
		case 1:
				Address=0xC0+col;
    27d8:	8b 81       	ldd	r24, Y+3	; 0x03
    27da:	80 54       	subi	r24, 0x40	; 64
    27dc:	89 83       	std	Y+1, r24	; 0x01
    27de:	07 c0       	rjmp	.+14     	; 0x27ee <LCD_goToRowColumn+0x6e>
				break;
		case 2:
				Address=0x94+col;
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	8c 56       	subi	r24, 0x6C	; 108
    27e4:	89 83       	std	Y+1, r24	; 0x01
    27e6:	03 c0       	rjmp	.+6      	; 0x27ee <LCD_goToRowColumn+0x6e>
				break;
		case 3:
				Address=0xD4+col;
    27e8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ea:	8c 52       	subi	r24, 0x2C	; 44
    27ec:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_writeCommand(Address);
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <LCD_writeCommand>
}
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	cf 91       	pop	r28
    2800:	df 91       	pop	r29
    2802:	08 95       	ret

00002804 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2804:	df 93       	push	r29
    2806:	cf 93       	push	r28
    2808:	00 d0       	rcall	.+0      	; 0x280a <LCD_displayString+0x6>
    280a:	0f 92       	push	r0
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
    2810:	9b 83       	std	Y+3, r25	; 0x03
    2812:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2814:	19 82       	std	Y+1, r1	; 0x01
    2816:	0e c0       	rjmp	.+28     	; 0x2834 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_writeData(Str[i]);
    2818:	89 81       	ldd	r24, Y+1	; 0x01
    281a:	28 2f       	mov	r18, r24
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	8a 81       	ldd	r24, Y+2	; 0x02
    2820:	9b 81       	ldd	r25, Y+3	; 0x03
    2822:	fc 01       	movw	r30, r24
    2824:	e2 0f       	add	r30, r18
    2826:	f3 1f       	adc	r31, r19
    2828:	80 81       	ld	r24, Z
    282a:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <LCD_writeData>
		i++;
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	8f 5f       	subi	r24, 0xFF	; 255
    2832:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2834:	89 81       	ldd	r24, Y+1	; 0x01
    2836:	28 2f       	mov	r18, r24
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	8a 81       	ldd	r24, Y+2	; 0x02
    283c:	9b 81       	ldd	r25, Y+3	; 0x03
    283e:	fc 01       	movw	r30, r24
    2840:	e2 0f       	add	r30, r18
    2842:	f3 1f       	adc	r31, r19
    2844:	80 81       	ld	r24, Z
    2846:	88 23       	and	r24, r24
    2848:	39 f7       	brne	.-50     	; 0x2818 <LCD_displayString+0x14>
	{
		LCD_writeData(Str[i]);
		i++;
	}
}
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	08 95       	ret

00002856 <LCD_clearScreen>:
void LCD_clearScreen(void)
{
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
	LCD_writeCommand(CLEAR_COMMAND); //clear display
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <LCD_writeCommand>
}
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	08 95       	ret

0000286a <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    286a:	df 93       	push	r29
    286c:	cf 93       	push	r28
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
    2872:	62 97       	sbiw	r28, 0x12	; 18
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	f8 94       	cli
    2878:	de bf       	out	0x3e, r29	; 62
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	cd bf       	out	0x3d, r28	; 61
    287e:	9a 8b       	std	Y+18, r25	; 0x12
    2880:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2882:	89 89       	ldd	r24, Y+17	; 0x11
    2884:	9a 89       	ldd	r25, Y+18	; 0x12
    2886:	9e 01       	movw	r18, r28
    2888:	2f 5f       	subi	r18, 0xFF	; 255
    288a:	3f 4f       	sbci	r19, 0xFF	; 255
    288c:	b9 01       	movw	r22, r18
    288e:	4a e0       	ldi	r20, 0x0A	; 10
    2890:	50 e0       	ldi	r21, 0x00	; 0
    2892:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <itoa>
   LCD_displayString(buff);
    2896:	ce 01       	movw	r24, r28
    2898:	01 96       	adiw	r24, 0x01	; 1
    289a:	0e 94 02 14 	call	0x2804	; 0x2804 <LCD_displayString>
}
    289e:	62 96       	adiw	r28, 0x12	; 18
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	f8 94       	cli
    28a4:	de bf       	out	0x3e, r29	; 62
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	cd bf       	out	0x3d, r28	; 61
    28aa:	cf 91       	pop	r28
    28ac:	df 91       	pop	r29
    28ae:	08 95       	ret

000028b0 <KeyPad_init>:

#include "KeyPad.h"


void KeyPad_init()
{
    28b0:	df 93       	push	r29
    28b2:	cf 93       	push	r28
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
	/*Configure Direction of Rows*/
	GPIO_SetupPin_Direction(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW1,PIN_OUTPUT);
    28b8:	82 e0       	ldi	r24, 0x02	; 2
    28ba:	62 e0       	ldi	r22, 0x02	; 2
    28bc:	41 e0       	ldi	r20, 0x01	; 1
    28be:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW2,PIN_OUTPUT);
    28c2:	82 e0       	ldi	r24, 0x02	; 2
    28c4:	63 e0       	ldi	r22, 0x03	; 3
    28c6:	41 e0       	ldi	r20, 0x01	; 1
    28c8:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW3,PIN_OUTPUT);
    28cc:	82 e0       	ldi	r24, 0x02	; 2
    28ce:	64 e0       	ldi	r22, 0x04	; 4
    28d0:	41 e0       	ldi	r20, 0x01	; 1
    28d2:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW4,PIN_OUTPUT);
    28d6:	82 e0       	ldi	r24, 0x02	; 2
    28d8:	65 e0       	ldi	r22, 0x05	; 5
    28da:	41 e0       	ldi	r20, 0x01	; 1
    28dc:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_SetupPin_Direction>

	GPIO_SetupPin_Direction(KEYPAD_COLS_PORT_ID,KEYPAD_COL1,PIN_INPUT);
    28e0:	83 e0       	ldi	r24, 0x03	; 3
    28e2:	63 e0       	ldi	r22, 0x03	; 3
    28e4:	40 e0       	ldi	r20, 0x00	; 0
    28e6:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_COLS_PORT_ID,KEYPAD_COL2,PIN_INPUT);
    28ea:	83 e0       	ldi	r24, 0x03	; 3
    28ec:	65 e0       	ldi	r22, 0x05	; 5
    28ee:	40 e0       	ldi	r20, 0x00	; 0
    28f0:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_COLS_PORT_ID,KEYPAD_COL3,PIN_INPUT);
    28f4:	83 e0       	ldi	r24, 0x03	; 3
    28f6:	66 e0       	ldi	r22, 0x06	; 6
    28f8:	40 e0       	ldi	r20, 0x00	; 0
    28fa:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_COLS_PORT_ID,KEYPAD_COL4,PIN_INPUT);
    28fe:	83 e0       	ldi	r24, 0x03	; 3
    2900:	67 e0       	ldi	r22, 0x07	; 7
    2902:	40 e0       	ldi	r20, 0x00	; 0
    2904:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_SetupPin_Direction>

	GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW1,LOGIC_HIGH);
    2908:	82 e0       	ldi	r24, 0x02	; 2
    290a:	62 e0       	ldi	r22, 0x02	; 2
    290c:	41 e0       	ldi	r20, 0x01	; 1
    290e:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW2,LOGIC_HIGH);
    2912:	82 e0       	ldi	r24, 0x02	; 2
    2914:	63 e0       	ldi	r22, 0x03	; 3
    2916:	41 e0       	ldi	r20, 0x01	; 1
    2918:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW3,LOGIC_HIGH);
    291c:	82 e0       	ldi	r24, 0x02	; 2
    291e:	64 e0       	ldi	r22, 0x04	; 4
    2920:	41 e0       	ldi	r20, 0x01	; 1
    2922:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW4,LOGIC_HIGH);
    2926:	82 e0       	ldi	r24, 0x02	; 2
    2928:	65 e0       	ldi	r22, 0x05	; 5
    292a:	41 e0       	ldi	r20, 0x01	; 1
    292c:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>

	GPIO_SetupPin_Value(KEYPAD_COLS_PORT_ID,KEYPAD_ROW1,LOGIC_LOW);
    2930:	83 e0       	ldi	r24, 0x03	; 3
    2932:	62 e0       	ldi	r22, 0x02	; 2
    2934:	40 e0       	ldi	r20, 0x00	; 0
    2936:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_COLS_PORT_ID,KEYPAD_ROW2,LOGIC_LOW);
    293a:	83 e0       	ldi	r24, 0x03	; 3
    293c:	63 e0       	ldi	r22, 0x03	; 3
    293e:	40 e0       	ldi	r20, 0x00	; 0
    2940:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_COLS_PORT_ID,KEYPAD_ROW3,LOGIC_LOW);
    2944:	83 e0       	ldi	r24, 0x03	; 3
    2946:	64 e0       	ldi	r22, 0x04	; 4
    2948:	40 e0       	ldi	r20, 0x00	; 0
    294a:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_COLS_PORT_ID,KEYPAD_ROW4,LOGIC_LOW);
    294e:	83 e0       	ldi	r24, 0x03	; 3
    2950:	65 e0       	ldi	r22, 0x05	; 5
    2952:	40 e0       	ldi	r20, 0x00	; 0
    2954:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>

}
    2958:	cf 91       	pop	r28
    295a:	df 91       	pop	r29
    295c:	08 95       	ret

0000295e <KeyPad_getPressedKey>:

uint8 KeyPad_getPressedKey()
{
    295e:	df 93       	push	r29
    2960:	cf 93       	push	r28
    2962:	cd b7       	in	r28, 0x3d	; 61
    2964:	de b7       	in	r29, 0x3e	; 62
    2966:	a0 97       	sbiw	r28, 0x20	; 32
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	de bf       	out	0x3e, r29	; 62
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	cd bf       	out	0x3d, r28	; 61
	uint8 KeyPad_data[NUMBER_OF_ROWS][NUMBER_OF_COLS]=KEYPAD_DATA;
    2972:	9e 01       	movw	r18, r28
    2974:	2c 5f       	subi	r18, 0xFC	; 252
    2976:	3f 4f       	sbci	r19, 0xFF	; 255
    2978:	3d 8f       	std	Y+29, r19	; 0x1d
    297a:	2c 8f       	std	Y+28, r18	; 0x1c
    297c:	8f e6       	ldi	r24, 0x6F	; 111
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	9f 8f       	std	Y+31, r25	; 0x1f
    2982:	8e 8f       	std	Y+30, r24	; 0x1e
    2984:	90 e1       	ldi	r25, 0x10	; 16
    2986:	98 a3       	std	Y+32, r25	; 0x20
    2988:	ee 8d       	ldd	r30, Y+30	; 0x1e
    298a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    298c:	00 80       	ld	r0, Z
    298e:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2990:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2992:	2f 5f       	subi	r18, 0xFF	; 255
    2994:	3f 4f       	sbci	r19, 0xFF	; 255
    2996:	3f 8f       	std	Y+31, r19	; 0x1f
    2998:	2e 8f       	std	Y+30, r18	; 0x1e
    299a:	ec 8d       	ldd	r30, Y+28	; 0x1c
    299c:	fd 8d       	ldd	r31, Y+29	; 0x1d
    299e:	00 82       	st	Z, r0
    29a0:	2c 8d       	ldd	r18, Y+28	; 0x1c
    29a2:	3d 8d       	ldd	r19, Y+29	; 0x1d
    29a4:	2f 5f       	subi	r18, 0xFF	; 255
    29a6:	3f 4f       	sbci	r19, 0xFF	; 255
    29a8:	3d 8f       	std	Y+29, r19	; 0x1d
    29aa:	2c 8f       	std	Y+28, r18	; 0x1c
    29ac:	38 a1       	ldd	r19, Y+32	; 0x20
    29ae:	31 50       	subi	r19, 0x01	; 1
    29b0:	38 a3       	std	Y+32, r19	; 0x20
    29b2:	88 a1       	ldd	r24, Y+32	; 0x20
    29b4:	88 23       	and	r24, r24
    29b6:	41 f7       	brne	.-48     	; 0x2988 <KeyPad_getPressedKey+0x2a>

	uint8 KeyPad_col_Pins[NUMBER_OF_COLS]=KEYPAD_COL_PINS;
    29b8:	83 e0       	ldi	r24, 0x03	; 3
    29ba:	8c 8b       	std	Y+20, r24	; 0x14
    29bc:	85 e0       	ldi	r24, 0x05	; 5
    29be:	8d 8b       	std	Y+21, r24	; 0x15
    29c0:	86 e0       	ldi	r24, 0x06	; 6
    29c2:	8e 8b       	std	Y+22, r24	; 0x16
    29c4:	87 e0       	ldi	r24, 0x07	; 7
    29c6:	8f 8b       	std	Y+23, r24	; 0x17

	uint8 KeyPad_row_Pins[NUMBER_OF_ROWS]=KEYPAD_ROW_PINS;
    29c8:	82 e0       	ldi	r24, 0x02	; 2
    29ca:	88 8f       	std	Y+24, r24	; 0x18
    29cc:	83 e0       	ldi	r24, 0x03	; 3
    29ce:	89 8f       	std	Y+25, r24	; 0x19
    29d0:	84 e0       	ldi	r24, 0x04	; 4
    29d2:	8a 8f       	std	Y+26, r24	; 0x1a
    29d4:	85 e0       	ldi	r24, 0x05	; 5
    29d6:	8b 8f       	std	Y+27, r24	; 0x1b

	uint8 Data=0XFF;
    29d8:	8f ef       	ldi	r24, 0xFF	; 255
    29da:	8b 83       	std	Y+3, r24	; 0x03

	for(uint8 row=0;row<NUMBER_OF_ROWS;row++)
    29dc:	1a 82       	std	Y+2, r1	; 0x02
    29de:	56 c0       	rjmp	.+172    	; 0x2a8c <KeyPad_getPressedKey+0x12e>
	{
		GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KeyPad_row_Pins[row],LOGIC_LOW);
    29e0:	8a 81       	ldd	r24, Y+2	; 0x02
    29e2:	28 2f       	mov	r18, r24
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	ce 01       	movw	r24, r28
    29e8:	48 96       	adiw	r24, 0x18	; 24
    29ea:	fc 01       	movw	r30, r24
    29ec:	e2 0f       	add	r30, r18
    29ee:	f3 1f       	adc	r31, r19
    29f0:	90 81       	ld	r25, Z
    29f2:	82 e0       	ldi	r24, 0x02	; 2
    29f4:	69 2f       	mov	r22, r25
    29f6:	40 e0       	ldi	r20, 0x00	; 0
    29f8:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
		for(uint8 col=0;col<NUMBER_OF_COLS;col++)
    29fc:	19 82       	std	Y+1, r1	; 0x01
    29fe:	32 c0       	rjmp	.+100    	; 0x2a64 <KeyPad_getPressedKey+0x106>
		{


			while(GET_BIT(KEYPAD_COLS_PORT,KeyPad_col_Pins[col])==LOGIC_LOW)
			{
				Data=KeyPad_data[row][col];
    2a00:	8a 81       	ldd	r24, Y+2	; 0x02
    2a02:	28 2f       	mov	r18, r24
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	48 2f       	mov	r20, r24
    2a0a:	50 e0       	ldi	r21, 0x00	; 0
    2a0c:	22 0f       	add	r18, r18
    2a0e:	33 1f       	adc	r19, r19
    2a10:	22 0f       	add	r18, r18
    2a12:	33 1f       	adc	r19, r19
    2a14:	ce 01       	movw	r24, r28
    2a16:	01 96       	adiw	r24, 0x01	; 1
    2a18:	82 0f       	add	r24, r18
    2a1a:	93 1f       	adc	r25, r19
    2a1c:	84 0f       	add	r24, r20
    2a1e:	95 1f       	adc	r25, r21
    2a20:	fc 01       	movw	r30, r24
    2a22:	33 96       	adiw	r30, 0x03	; 3
    2a24:	80 81       	ld	r24, Z
    2a26:	8b 83       	std	Y+3, r24	; 0x03
		GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KeyPad_row_Pins[row],LOGIC_LOW);
		for(uint8 col=0;col<NUMBER_OF_COLS;col++)
		{


			while(GET_BIT(KEYPAD_COLS_PORT,KeyPad_col_Pins[col])==LOGIC_LOW)
    2a28:	e0 e3       	ldi	r30, 0x30	; 48
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	48 2f       	mov	r20, r24
    2a30:	50 e0       	ldi	r21, 0x00	; 0
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	28 2f       	mov	r18, r24
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	ce 01       	movw	r24, r28
    2a3a:	44 96       	adiw	r24, 0x14	; 20
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	e2 0f       	add	r30, r18
    2a40:	f3 1f       	adc	r31, r19
    2a42:	80 81       	ld	r24, Z
    2a44:	88 2f       	mov	r24, r24
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	fa 01       	movw	r30, r20
    2a4a:	02 c0       	rjmp	.+4      	; 0x2a50 <KeyPad_getPressedKey+0xf2>
    2a4c:	f5 95       	asr	r31
    2a4e:	e7 95       	ror	r30
    2a50:	8a 95       	dec	r24
    2a52:	e2 f7       	brpl	.-8      	; 0x2a4c <KeyPad_getPressedKey+0xee>
    2a54:	cf 01       	movw	r24, r30
    2a56:	81 70       	andi	r24, 0x01	; 1
    2a58:	90 70       	andi	r25, 0x00	; 0
    2a5a:	00 97       	sbiw	r24, 0x00	; 0
    2a5c:	89 f2       	breq	.-94     	; 0x2a00 <KeyPad_getPressedKey+0xa2>
	uint8 Data=0XFF;

	for(uint8 row=0;row<NUMBER_OF_ROWS;row++)
	{
		GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KeyPad_row_Pins[row],LOGIC_LOW);
		for(uint8 col=0;col<NUMBER_OF_COLS;col++)
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	8f 5f       	subi	r24, 0xFF	; 255
    2a62:	89 83       	std	Y+1, r24	; 0x01
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	84 30       	cpi	r24, 0x04	; 4
    2a68:	f8 f2       	brcs	.-66     	; 0x2a28 <KeyPad_getPressedKey+0xca>
				Data=KeyPad_data[row][col];
			}


		}
		GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KeyPad_row_Pins[row],LOGIC_HIGH);
    2a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6c:	28 2f       	mov	r18, r24
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	ce 01       	movw	r24, r28
    2a72:	48 96       	adiw	r24, 0x18	; 24
    2a74:	fc 01       	movw	r30, r24
    2a76:	e2 0f       	add	r30, r18
    2a78:	f3 1f       	adc	r31, r19
    2a7a:	90 81       	ld	r25, Z
    2a7c:	82 e0       	ldi	r24, 0x02	; 2
    2a7e:	69 2f       	mov	r22, r25
    2a80:	41 e0       	ldi	r20, 0x01	; 1
    2a82:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>

	uint8 KeyPad_row_Pins[NUMBER_OF_ROWS]=KEYPAD_ROW_PINS;

	uint8 Data=0XFF;

	for(uint8 row=0;row<NUMBER_OF_ROWS;row++)
    2a86:	8a 81       	ldd	r24, Y+2	; 0x02
    2a88:	8f 5f       	subi	r24, 0xFF	; 255
    2a8a:	8a 83       	std	Y+2, r24	; 0x02
    2a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8e:	84 30       	cpi	r24, 0x04	; 4
    2a90:	08 f4       	brcc	.+2      	; 0x2a94 <KeyPad_getPressedKey+0x136>
    2a92:	a6 cf       	rjmp	.-180    	; 0x29e0 <KeyPad_getPressedKey+0x82>


		}
		GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KeyPad_row_Pins[row],LOGIC_HIGH);
	}
	return Data;
    2a94:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2a96:	a0 96       	adiw	r28, 0x20	; 32
    2a98:	0f b6       	in	r0, 0x3f	; 63
    2a9a:	f8 94       	cli
    2a9c:	de bf       	out	0x3e, r29	; 62
    2a9e:	0f be       	out	0x3f, r0	; 63
    2aa0:	cd bf       	out	0x3d, r28	; 61
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	08 95       	ret

00002aa8 <main>:
#include "MCAL/ADC/ADC_interface.h"
#include "MCAL/Timer0/Timer_interface.h"
#include "HAL/KeyPad/KeyPad.h"
uint32 g_tempVal = 0;
int  main(void)
{
    2aa8:	df 93       	push	r29
    2aaa:	cf 93       	push	r28
    2aac:	0f 92       	push	r0
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
	KeyPad_init();
    2ab2:	0e 94 58 14 	call	0x28b0	; 0x28b0 <KeyPad_init>
	GPIO_SetupPin_Direction(PORTC_ID, 6, PIN_OUTPUT);
    2ab6:	82 e0       	ldi	r24, 0x02	; 2
    2ab8:	66 e0       	ldi	r22, 0x06	; 6
    2aba:	41 e0       	ldi	r20, 0x01	; 1
    2abc:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Value(PORTC_ID, 6, LOGIC_HIGH);
    2ac0:	82 e0       	ldi	r24, 0x02	; 2
    2ac2:	66 e0       	ldi	r22, 0x06	; 6
    2ac4:	41 e0       	ldi	r20, 0x01	; 1
    2ac6:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_SetupPin_Value>
	LCD_init();
    2aca:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_init>
	LCD_displayString("shymaa");
    2ace:	80 e6       	ldi	r24, 0x60	; 96
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	0e 94 02 14 	call	0x2804	; 0x2804 <LCD_displayString>
	TIM0_init();
    2ad6:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIM0_init>
	TIM0_start();
    2ada:	0e 94 cb 05 	call	0xb96	; 0xb96 <TIM0_start>
	uint8 key;

while(1)
{
	key=KeyPad_getPressedKey();
    2ade:	0e 94 af 14 	call	0x295e	; 0x295e <KeyPad_getPressedKey>
    2ae2:	89 83       	std	Y+1, r24	; 0x01



	if(key!=0xff)
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ae8:	d1 f3       	breq	.-12     	; 0x2ade <main+0x36>
	{
		TIM0_dutyCycle((key*10));
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	88 2f       	mov	r24, r24
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	9c 01       	movw	r18, r24
    2af2:	22 0f       	add	r18, r18
    2af4:	33 1f       	adc	r19, r19
    2af6:	c9 01       	movw	r24, r18
    2af8:	88 0f       	add	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	88 0f       	add	r24, r24
    2afe:	99 1f       	adc	r25, r25
    2b00:	82 0f       	add	r24, r18
    2b02:	93 1f       	adc	r25, r19
    2b04:	0e 94 e6 05 	call	0xbcc	; 0xbcc <TIM0_dutyCycle>
    2b08:	ea cf       	rjmp	.-44     	; 0x2ade <main+0x36>

00002b0a <__mulsi3>:
    2b0a:	62 9f       	mul	r22, r18
    2b0c:	d0 01       	movw	r26, r0
    2b0e:	73 9f       	mul	r23, r19
    2b10:	f0 01       	movw	r30, r0
    2b12:	82 9f       	mul	r24, r18
    2b14:	e0 0d       	add	r30, r0
    2b16:	f1 1d       	adc	r31, r1
    2b18:	64 9f       	mul	r22, r20
    2b1a:	e0 0d       	add	r30, r0
    2b1c:	f1 1d       	adc	r31, r1
    2b1e:	92 9f       	mul	r25, r18
    2b20:	f0 0d       	add	r31, r0
    2b22:	83 9f       	mul	r24, r19
    2b24:	f0 0d       	add	r31, r0
    2b26:	74 9f       	mul	r23, r20
    2b28:	f0 0d       	add	r31, r0
    2b2a:	65 9f       	mul	r22, r21
    2b2c:	f0 0d       	add	r31, r0
    2b2e:	99 27       	eor	r25, r25
    2b30:	72 9f       	mul	r23, r18
    2b32:	b0 0d       	add	r27, r0
    2b34:	e1 1d       	adc	r30, r1
    2b36:	f9 1f       	adc	r31, r25
    2b38:	63 9f       	mul	r22, r19
    2b3a:	b0 0d       	add	r27, r0
    2b3c:	e1 1d       	adc	r30, r1
    2b3e:	f9 1f       	adc	r31, r25
    2b40:	bd 01       	movw	r22, r26
    2b42:	cf 01       	movw	r24, r30
    2b44:	11 24       	eor	r1, r1
    2b46:	08 95       	ret

00002b48 <__udivmodsi4>:
    2b48:	a1 e2       	ldi	r26, 0x21	; 33
    2b4a:	1a 2e       	mov	r1, r26
    2b4c:	aa 1b       	sub	r26, r26
    2b4e:	bb 1b       	sub	r27, r27
    2b50:	fd 01       	movw	r30, r26
    2b52:	0d c0       	rjmp	.+26     	; 0x2b6e <__udivmodsi4_ep>

00002b54 <__udivmodsi4_loop>:
    2b54:	aa 1f       	adc	r26, r26
    2b56:	bb 1f       	adc	r27, r27
    2b58:	ee 1f       	adc	r30, r30
    2b5a:	ff 1f       	adc	r31, r31
    2b5c:	a2 17       	cp	r26, r18
    2b5e:	b3 07       	cpc	r27, r19
    2b60:	e4 07       	cpc	r30, r20
    2b62:	f5 07       	cpc	r31, r21
    2b64:	20 f0       	brcs	.+8      	; 0x2b6e <__udivmodsi4_ep>
    2b66:	a2 1b       	sub	r26, r18
    2b68:	b3 0b       	sbc	r27, r19
    2b6a:	e4 0b       	sbc	r30, r20
    2b6c:	f5 0b       	sbc	r31, r21

00002b6e <__udivmodsi4_ep>:
    2b6e:	66 1f       	adc	r22, r22
    2b70:	77 1f       	adc	r23, r23
    2b72:	88 1f       	adc	r24, r24
    2b74:	99 1f       	adc	r25, r25
    2b76:	1a 94       	dec	r1
    2b78:	69 f7       	brne	.-38     	; 0x2b54 <__udivmodsi4_loop>
    2b7a:	60 95       	com	r22
    2b7c:	70 95       	com	r23
    2b7e:	80 95       	com	r24
    2b80:	90 95       	com	r25
    2b82:	9b 01       	movw	r18, r22
    2b84:	ac 01       	movw	r20, r24
    2b86:	bd 01       	movw	r22, r26
    2b88:	cf 01       	movw	r24, r30
    2b8a:	08 95       	ret

00002b8c <__prologue_saves__>:
    2b8c:	2f 92       	push	r2
    2b8e:	3f 92       	push	r3
    2b90:	4f 92       	push	r4
    2b92:	5f 92       	push	r5
    2b94:	6f 92       	push	r6
    2b96:	7f 92       	push	r7
    2b98:	8f 92       	push	r8
    2b9a:	9f 92       	push	r9
    2b9c:	af 92       	push	r10
    2b9e:	bf 92       	push	r11
    2ba0:	cf 92       	push	r12
    2ba2:	df 92       	push	r13
    2ba4:	ef 92       	push	r14
    2ba6:	ff 92       	push	r15
    2ba8:	0f 93       	push	r16
    2baa:	1f 93       	push	r17
    2bac:	cf 93       	push	r28
    2bae:	df 93       	push	r29
    2bb0:	cd b7       	in	r28, 0x3d	; 61
    2bb2:	de b7       	in	r29, 0x3e	; 62
    2bb4:	ca 1b       	sub	r28, r26
    2bb6:	db 0b       	sbc	r29, r27
    2bb8:	0f b6       	in	r0, 0x3f	; 63
    2bba:	f8 94       	cli
    2bbc:	de bf       	out	0x3e, r29	; 62
    2bbe:	0f be       	out	0x3f, r0	; 63
    2bc0:	cd bf       	out	0x3d, r28	; 61
    2bc2:	09 94       	ijmp

00002bc4 <__epilogue_restores__>:
    2bc4:	2a 88       	ldd	r2, Y+18	; 0x12
    2bc6:	39 88       	ldd	r3, Y+17	; 0x11
    2bc8:	48 88       	ldd	r4, Y+16	; 0x10
    2bca:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bcc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bce:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bd0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bd2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bd4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bd6:	b9 84       	ldd	r11, Y+9	; 0x09
    2bd8:	c8 84       	ldd	r12, Y+8	; 0x08
    2bda:	df 80       	ldd	r13, Y+7	; 0x07
    2bdc:	ee 80       	ldd	r14, Y+6	; 0x06
    2bde:	fd 80       	ldd	r15, Y+5	; 0x05
    2be0:	0c 81       	ldd	r16, Y+4	; 0x04
    2be2:	1b 81       	ldd	r17, Y+3	; 0x03
    2be4:	aa 81       	ldd	r26, Y+2	; 0x02
    2be6:	b9 81       	ldd	r27, Y+1	; 0x01
    2be8:	ce 0f       	add	r28, r30
    2bea:	d1 1d       	adc	r29, r1
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	de bf       	out	0x3e, r29	; 62
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	cd bf       	out	0x3d, r28	; 61
    2bf6:	ed 01       	movw	r28, r26
    2bf8:	08 95       	ret

00002bfa <itoa>:
    2bfa:	fb 01       	movw	r30, r22
    2bfc:	9f 01       	movw	r18, r30
    2bfe:	e8 94       	clt
    2c00:	42 30       	cpi	r20, 0x02	; 2
    2c02:	c4 f0       	brlt	.+48     	; 0x2c34 <itoa+0x3a>
    2c04:	45 32       	cpi	r20, 0x25	; 37
    2c06:	b4 f4       	brge	.+44     	; 0x2c34 <itoa+0x3a>
    2c08:	4a 30       	cpi	r20, 0x0A	; 10
    2c0a:	29 f4       	brne	.+10     	; 0x2c16 <itoa+0x1c>
    2c0c:	97 fb       	bst	r25, 7
    2c0e:	1e f4       	brtc	.+6      	; 0x2c16 <itoa+0x1c>
    2c10:	90 95       	com	r25
    2c12:	81 95       	neg	r24
    2c14:	9f 4f       	sbci	r25, 0xFF	; 255
    2c16:	64 2f       	mov	r22, r20
    2c18:	77 27       	eor	r23, r23
    2c1a:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <__udivmodhi4>
    2c1e:	80 5d       	subi	r24, 0xD0	; 208
    2c20:	8a 33       	cpi	r24, 0x3A	; 58
    2c22:	0c f0       	brlt	.+2      	; 0x2c26 <itoa+0x2c>
    2c24:	89 5d       	subi	r24, 0xD9	; 217
    2c26:	81 93       	st	Z+, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	00 97       	sbiw	r24, 0x00	; 0
    2c2c:	a1 f7       	brne	.-24     	; 0x2c16 <itoa+0x1c>
    2c2e:	16 f4       	brtc	.+4      	; 0x2c34 <itoa+0x3a>
    2c30:	5d e2       	ldi	r21, 0x2D	; 45
    2c32:	51 93       	st	Z+, r21
    2c34:	10 82       	st	Z, r1
    2c36:	c9 01       	movw	r24, r18
    2c38:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <strrev>

00002c3c <strrev>:
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	fc 01       	movw	r30, r24
    2c40:	67 2f       	mov	r22, r23
    2c42:	71 91       	ld	r23, Z+
    2c44:	77 23       	and	r23, r23
    2c46:	e1 f7       	brne	.-8      	; 0x2c40 <strrev+0x4>
    2c48:	32 97       	sbiw	r30, 0x02	; 2
    2c4a:	04 c0       	rjmp	.+8      	; 0x2c54 <strrev+0x18>
    2c4c:	7c 91       	ld	r23, X
    2c4e:	6d 93       	st	X+, r22
    2c50:	70 83       	st	Z, r23
    2c52:	62 91       	ld	r22, -Z
    2c54:	ae 17       	cp	r26, r30
    2c56:	bf 07       	cpc	r27, r31
    2c58:	c8 f3       	brcs	.-14     	; 0x2c4c <strrev+0x10>
    2c5a:	08 95       	ret

00002c5c <__udivmodhi4>:
    2c5c:	aa 1b       	sub	r26, r26
    2c5e:	bb 1b       	sub	r27, r27
    2c60:	51 e1       	ldi	r21, 0x11	; 17
    2c62:	07 c0       	rjmp	.+14     	; 0x2c72 <__udivmodhi4_ep>

00002c64 <__udivmodhi4_loop>:
    2c64:	aa 1f       	adc	r26, r26
    2c66:	bb 1f       	adc	r27, r27
    2c68:	a6 17       	cp	r26, r22
    2c6a:	b7 07       	cpc	r27, r23
    2c6c:	10 f0       	brcs	.+4      	; 0x2c72 <__udivmodhi4_ep>
    2c6e:	a6 1b       	sub	r26, r22
    2c70:	b7 0b       	sbc	r27, r23

00002c72 <__udivmodhi4_ep>:
    2c72:	88 1f       	adc	r24, r24
    2c74:	99 1f       	adc	r25, r25
    2c76:	5a 95       	dec	r21
    2c78:	a9 f7       	brne	.-22     	; 0x2c64 <__udivmodhi4_loop>
    2c7a:	80 95       	com	r24
    2c7c:	90 95       	com	r25
    2c7e:	bc 01       	movw	r22, r24
    2c80:	cd 01       	movw	r24, r26
    2c82:	08 95       	ret

00002c84 <_exit>:
    2c84:	f8 94       	cli

00002c86 <__stop_program>:
    2c86:	ff cf       	rjmp	.-2      	; 0x2c86 <__stop_program>
