
TIM1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003496  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00003496  0000352a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800078  00800078  00003542  2**0
                  ALLOC
  3 .stab         00003dbc  00000000  00000000  00003544  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000290b  00000000  00000000  00007300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bb04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c9ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d79c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d8fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000db89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e357  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2b 10 	jmp	0x2056	; 0x2056 <__vector_1>
       8:	0c 94 5e 10 	jmp	0x20bc	; 0x20bc <__vector_2>
       c:	0c 94 91 10 	jmp	0x2122	; 0x2122 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 32 09 	jmp	0x1264	; 0x1264 <__vector_6>
      1c:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__vector_7>
      20:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__vector_8>
      24:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b7 19 	call	0x336e	; 0x336e <main>
      8a:	0c 94 49 1a 	jmp	0x3492	; 0x3492 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e9 19 	jmp	0x33d2	; 0x33d2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d9 19 	jmp	0x33b2	; 0x33b2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f5 19 	jmp	0x33ea	; 0x33ea <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d9 19 	jmp	0x33b2	; 0x33b2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f5 19 	jmp	0x33ea	; 0x33ea <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e9 19 	jmp	0x33d2	; 0x33d2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d9 19 	jmp	0x33b2	; 0x33b2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f5 19 	jmp	0x33ea	; 0x33ea <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d9 19 	jmp	0x33b2	; 0x33b2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f5 19 	jmp	0x33ea	; 0x33ea <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d9 19 	jmp	0x33b2	; 0x33b2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f5 19 	jmp	0x33ea	; 0x33ea <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f9 19 	jmp	0x33f2	; 0x33f2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIM1_WGMMood>:
void (*TIM1_callBackOCRA_ptr)(void) = NULL;
void (*TIM1_callBackOCRB_ptr)(void) = NULL;
void (*TIM1_callBackICR_ptr)(void) = NULL;

void TIM1_WGMMood(WGMMood WGM)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <TIM1_WGMMood+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	89 83       	std	Y+1, r24	; 0x01

switch(WGM)
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	28 2f       	mov	r18, r24
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	3b 83       	std	Y+3, r19	; 0x03
     b5c:	2a 83       	std	Y+2, r18	; 0x02
     b5e:	8a 81       	ldd	r24, Y+2	; 0x02
     b60:	9b 81       	ldd	r25, Y+3	; 0x03
     b62:	87 30       	cpi	r24, 0x07	; 7
     b64:	91 05       	cpc	r25, r1
     b66:	09 f4       	brne	.+2      	; 0xb6a <TIM1_WGMMood+0x24>
     b68:	ad c0       	rjmp	.+346    	; 0xcc4 <TIM1_WGMMood+0x17e>
     b6a:	2a 81       	ldd	r18, Y+2	; 0x02
     b6c:	3b 81       	ldd	r19, Y+3	; 0x03
     b6e:	28 30       	cpi	r18, 0x08	; 8
     b70:	31 05       	cpc	r19, r1
     b72:	4c f5       	brge	.+82     	; 0xbc6 <TIM1_WGMMood+0x80>
     b74:	8a 81       	ldd	r24, Y+2	; 0x02
     b76:	9b 81       	ldd	r25, Y+3	; 0x03
     b78:	83 30       	cpi	r24, 0x03	; 3
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <TIM1_WGMMood+0x3a>
     b7e:	71 c0       	rjmp	.+226    	; 0xc62 <TIM1_WGMMood+0x11c>
     b80:	2a 81       	ldd	r18, Y+2	; 0x02
     b82:	3b 81       	ldd	r19, Y+3	; 0x03
     b84:	24 30       	cpi	r18, 0x04	; 4
     b86:	31 05       	cpc	r19, r1
     b88:	8c f4       	brge	.+34     	; 0xbac <TIM1_WGMMood+0x66>
     b8a:	8a 81       	ldd	r24, Y+2	; 0x02
     b8c:	9b 81       	ldd	r25, Y+3	; 0x03
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	91 05       	cpc	r25, r1
     b92:	09 f4       	brne	.+2      	; 0xb96 <TIM1_WGMMood+0x50>
     b94:	4e c0       	rjmp	.+156    	; 0xc32 <TIM1_WGMMood+0xec>
     b96:	2a 81       	ldd	r18, Y+2	; 0x02
     b98:	3b 81       	ldd	r19, Y+3	; 0x03
     b9a:	22 30       	cpi	r18, 0x02	; 2
     b9c:	31 05       	cpc	r19, r1
     b9e:	0c f0       	brlt	.+2      	; 0xba2 <TIM1_WGMMood+0x5c>
     ba0:	54 c0       	rjmp	.+168    	; 0xc4a <TIM1_WGMMood+0x104>
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	9b 81       	ldd	r25, Y+3	; 0x03
     ba6:	00 97       	sbiw	r24, 0x00	; 0
     ba8:	c9 f1       	breq	.+114    	; 0xc1c <TIM1_WGMMood+0xd6>
     baa:	e8 c0       	rjmp	.+464    	; 0xd7c <TIM1_WGMMood+0x236>
     bac:	2a 81       	ldd	r18, Y+2	; 0x02
     bae:	3b 81       	ldd	r19, Y+3	; 0x03
     bb0:	25 30       	cpi	r18, 0x05	; 5
     bb2:	31 05       	cpc	r19, r1
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <TIM1_WGMMood+0x72>
     bb6:	6c c0       	rjmp	.+216    	; 0xc90 <TIM1_WGMMood+0x14a>
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	9b 81       	ldd	r25, Y+3	; 0x03
     bbc:	86 30       	cpi	r24, 0x06	; 6
     bbe:	91 05       	cpc	r25, r1
     bc0:	0c f0       	brlt	.+2      	; 0xbc4 <TIM1_WGMMood+0x7e>
     bc2:	73 c0       	rjmp	.+230    	; 0xcaa <TIM1_WGMMood+0x164>
     bc4:	59 c0       	rjmp	.+178    	; 0xc78 <TIM1_WGMMood+0x132>
     bc6:	2a 81       	ldd	r18, Y+2	; 0x02
     bc8:	3b 81       	ldd	r19, Y+3	; 0x03
     bca:	2b 30       	cpi	r18, 0x0B	; 11
     bcc:	31 05       	cpc	r19, r1
     bce:	09 f4       	brne	.+2      	; 0xbd2 <TIM1_WGMMood+0x8c>
     bd0:	a7 c0       	rjmp	.+334    	; 0xd20 <TIM1_WGMMood+0x1da>
     bd2:	8a 81       	ldd	r24, Y+2	; 0x02
     bd4:	9b 81       	ldd	r25, Y+3	; 0x03
     bd6:	8c 30       	cpi	r24, 0x0C	; 12
     bd8:	91 05       	cpc	r25, r1
     bda:	6c f4       	brge	.+26     	; 0xbf6 <TIM1_WGMMood+0xb0>
     bdc:	2a 81       	ldd	r18, Y+2	; 0x02
     bde:	3b 81       	ldd	r19, Y+3	; 0x03
     be0:	29 30       	cpi	r18, 0x09	; 9
     be2:	31 05       	cpc	r19, r1
     be4:	09 f4       	brne	.+2      	; 0xbe8 <TIM1_WGMMood+0xa2>
     be6:	86 c0       	rjmp	.+268    	; 0xcf4 <TIM1_WGMMood+0x1ae>
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	9b 81       	ldd	r25, Y+3	; 0x03
     bec:	8a 30       	cpi	r24, 0x0A	; 10
     bee:	91 05       	cpc	r25, r1
     bf0:	0c f0       	brlt	.+2      	; 0xbf4 <TIM1_WGMMood+0xae>
     bf2:	8b c0       	rjmp	.+278    	; 0xd0a <TIM1_WGMMood+0x1c4>
     bf4:	73 c0       	rjmp	.+230    	; 0xcdc <TIM1_WGMMood+0x196>
     bf6:	2a 81       	ldd	r18, Y+2	; 0x02
     bf8:	3b 81       	ldd	r19, Y+3	; 0x03
     bfa:	2d 30       	cpi	r18, 0x0D	; 13
     bfc:	31 05       	cpc	r19, r1
     bfe:	09 f4       	brne	.+2      	; 0xc02 <TIM1_WGMMood+0xbc>
     c00:	a7 c0       	rjmp	.+334    	; 0xd50 <TIM1_WGMMood+0x20a>
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	9b 81       	ldd	r25, Y+3	; 0x03
     c06:	8d 30       	cpi	r24, 0x0D	; 13
     c08:	91 05       	cpc	r25, r1
     c0a:	0c f4       	brge	.+2      	; 0xc0e <TIM1_WGMMood+0xc8>
     c0c:	96 c0       	rjmp	.+300    	; 0xd3a <TIM1_WGMMood+0x1f4>
     c0e:	2a 81       	ldd	r18, Y+2	; 0x02
     c10:	3b 81       	ldd	r19, Y+3	; 0x03
     c12:	2e 30       	cpi	r18, 0x0E	; 14
     c14:	31 05       	cpc	r19, r1
     c16:	09 f4       	brne	.+2      	; 0xc1a <TIM1_WGMMood+0xd4>
     c18:	a7 c0       	rjmp	.+334    	; 0xd68 <TIM1_WGMMood+0x222>
     c1a:	b0 c0       	rjmp	.+352    	; 0xd7c <TIM1_WGMMood+0x236>
{
case TIM1_Normal:
TCCR1A_REG->WGM=0b00;
     c1c:	ef e4       	ldi	r30, 0x4F	; 79
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	8c 7f       	andi	r24, 0xFC	; 252
     c24:	80 83       	st	Z, r24
TCCR1B_REG->WGM=0b00;
     c26:	ee e4       	ldi	r30, 0x4E	; 78
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	87 7e       	andi	r24, 0xE7	; 231
     c2e:	80 83       	st	Z, r24
     c30:	a5 c0       	rjmp	.+330    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_PWMPhaseCorrect8bit:
	TCCR1A_REG->WGM=0b01;
     c32:	ef e4       	ldi	r30, 0x4F	; 79
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	8c 7f       	andi	r24, 0xFC	; 252
     c3a:	81 60       	ori	r24, 0x01	; 1
     c3c:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b00;
     c3e:	ee e4       	ldi	r30, 0x4E	; 78
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	87 7e       	andi	r24, 0xE7	; 231
     c46:	80 83       	st	Z, r24
     c48:	99 c0       	rjmp	.+306    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_PWMPhaseCorrect9bit:
	TCCR1A_REG->WGM=0b10;
     c4a:	ef e4       	ldi	r30, 0x4F	; 79
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	8c 7f       	andi	r24, 0xFC	; 252
     c52:	82 60       	ori	r24, 0x02	; 2
     c54:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b00;
     c56:	ee e4       	ldi	r30, 0x4E	; 78
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	87 7e       	andi	r24, 0xE7	; 231
     c5e:	80 83       	st	Z, r24
     c60:	8d c0       	rjmp	.+282    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_PWMPhaseCorrect10bit:
	TCCR1A_REG->WGM=0b11;
     c62:	ef e4       	ldi	r30, 0x4F	; 79
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	83 60       	ori	r24, 0x03	; 3
     c6a:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b00;
     c6c:	ee e4       	ldi	r30, 0x4E	; 78
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	87 7e       	andi	r24, 0xE7	; 231
     c74:	80 83       	st	Z, r24
     c76:	82 c0       	rjmp	.+260    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_CTC:
	TCCR1A_REG->WGM=0b00;
     c78:	ef e4       	ldi	r30, 0x4F	; 79
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	8c 7f       	andi	r24, 0xFC	; 252
     c80:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b01;
     c82:	ee e4       	ldi	r30, 0x4E	; 78
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	87 7e       	andi	r24, 0xE7	; 231
     c8a:	88 60       	ori	r24, 0x08	; 8
     c8c:	80 83       	st	Z, r24
     c8e:	76 c0       	rjmp	.+236    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_FastPWM8bit:
	TCCR1A_REG->WGM=0b01;
     c90:	ef e4       	ldi	r30, 0x4F	; 79
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	8c 7f       	andi	r24, 0xFC	; 252
     c98:	81 60       	ori	r24, 0x01	; 1
     c9a:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b10;
     c9c:	ee e4       	ldi	r30, 0x4E	; 78
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	87 7e       	andi	r24, 0xE7	; 231
     ca4:	80 61       	ori	r24, 0x10	; 16
     ca6:	80 83       	st	Z, r24
     ca8:	69 c0       	rjmp	.+210    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_FastPWM9bit:
	TCCR1A_REG->WGM=0b10;
     caa:	ef e4       	ldi	r30, 0x4F	; 79
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8c 7f       	andi	r24, 0xFC	; 252
     cb2:	82 60       	ori	r24, 0x02	; 2
     cb4:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b01;
     cb6:	ee e4       	ldi	r30, 0x4E	; 78
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	87 7e       	andi	r24, 0xE7	; 231
     cbe:	88 60       	ori	r24, 0x08	; 8
     cc0:	80 83       	st	Z, r24
     cc2:	5c c0       	rjmp	.+184    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_FastPWM10bit:
	TCCR1A_REG->WGM=0b11;
     cc4:	ef e4       	ldi	r30, 0x4F	; 79
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	83 60       	ori	r24, 0x03	; 3
     ccc:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b01;
     cce:	ee e4       	ldi	r30, 0x4E	; 78
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	87 7e       	andi	r24, 0xE7	; 231
     cd6:	88 60       	ori	r24, 0x08	; 8
     cd8:	80 83       	st	Z, r24
     cda:	50 c0       	rjmp	.+160    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_PWMPhaseandFrequencyCorrect_ICR1_TOP:
	TCCR1A_REG->WGM=0b00;
     cdc:	ef e4       	ldi	r30, 0x4F	; 79
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	8c 7f       	andi	r24, 0xFC	; 252
     ce4:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b10;
     ce6:	ee e4       	ldi	r30, 0x4E	; 78
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	87 7e       	andi	r24, 0xE7	; 231
     cee:	80 61       	ori	r24, 0x10	; 16
     cf0:	80 83       	st	Z, r24
     cf2:	44 c0       	rjmp	.+136    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_PWMPhaseandFrequencyCorrect_OCR1A_TOP:
	TCCR1A_REG->WGM=0b00;
     cf4:	ef e4       	ldi	r30, 0x4F	; 79
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	8c 7f       	andi	r24, 0xFC	; 252
     cfc:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b00;
     cfe:	ee e4       	ldi	r30, 0x4E	; 78
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	87 7e       	andi	r24, 0xE7	; 231
     d06:	80 83       	st	Z, r24
     d08:	39 c0       	rjmp	.+114    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_PWMPhaseCorrect_ICR1_TOP:
	TCCR1A_REG->WGM=0b00;
     d0a:	ef e4       	ldi	r30, 0x4F	; 79
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	8c 7f       	andi	r24, 0xFC	; 252
     d12:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b00;
     d14:	ee e4       	ldi	r30, 0x4E	; 78
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	87 7e       	andi	r24, 0xE7	; 231
     d1c:	80 83       	st	Z, r24
     d1e:	2e c0       	rjmp	.+92     	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_PWMPhaseCorrect_OCR1A_TOP:
	TCCR1A_REG->WGM=0b01;
     d20:	ef e4       	ldi	r30, 0x4F	; 79
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	8c 7f       	andi	r24, 0xFC	; 252
     d28:	81 60       	ori	r24, 0x01	; 1
     d2a:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b10;
     d2c:	ee e4       	ldi	r30, 0x4E	; 78
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	87 7e       	andi	r24, 0xE7	; 231
     d34:	80 61       	ori	r24, 0x10	; 16
     d36:	80 83       	st	Z, r24
     d38:	21 c0       	rjmp	.+66     	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_CTC_ICR1_TOP:
	TCCR1A_REG->WGM=0b00;
     d3a:	ef e4       	ldi	r30, 0x4F	; 79
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8c 7f       	andi	r24, 0xFC	; 252
     d42:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b11;
     d44:	ee e4       	ldi	r30, 0x4E	; 78
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	88 61       	ori	r24, 0x18	; 24
     d4c:	80 83       	st	Z, r24
     d4e:	16 c0       	rjmp	.+44     	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_FASTPWM_ICR1_TOP:
	TCCR1A_REG->WGM=0b10;
     d50:	ef e4       	ldi	r30, 0x4F	; 79
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	8c 7f       	andi	r24, 0xFC	; 252
     d58:	82 60       	ori	r24, 0x02	; 2
     d5a:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b11;
     d5c:	ee e4       	ldi	r30, 0x4E	; 78
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	88 61       	ori	r24, 0x18	; 24
     d64:	80 83       	st	Z, r24
     d66:	0a c0       	rjmp	.+20     	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_FASTPWM_OCR1A_TOP:
	TCCR1A_REG->WGM=0b11;
     d68:	ef e4       	ldi	r30, 0x4F	; 79
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	83 60       	ori	r24, 0x03	; 3
     d70:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b11;
     d72:	ee e4       	ldi	r30, 0x4E	; 78
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	88 61       	ori	r24, 0x18	; 24
     d7a:	80 83       	st	Z, r24
break;
}


}
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <TIM1_FastPWMMood>:
void TIM1_FastPWMMood(COMFastPWM COM)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <TIM1_FastPWMMood+0x6>
     d8e:	0f 92       	push	r0
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	89 83       	std	Y+1, r24	; 0x01
	switch(COM)
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	3b 83       	std	Y+3, r19	; 0x03
     d9e:	2a 83       	std	Y+2, r18	; 0x02
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	9b 81       	ldd	r25, Y+3	; 0x03
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	51 f1       	breq	.+84     	; 0xdfe <TIM1_FastPWMMood+0x76>
     daa:	2a 81       	ldd	r18, Y+2	; 0x02
     dac:	3b 81       	ldd	r19, Y+3	; 0x03
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	2c f4       	brge	.+10     	; 0xdbe <TIM1_FastPWMMood+0x36>
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	9b 81       	ldd	r25, Y+3	; 0x03
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	61 f0       	breq	.+24     	; 0xdd4 <TIM1_FastPWMMood+0x4c>
     dbc:	54 c0       	rjmp	.+168    	; 0xe66 <TIM1_FastPWMMood+0xde>
     dbe:	2a 81       	ldd	r18, Y+2	; 0x02
     dc0:	3b 81       	ldd	r19, Y+3	; 0x03
     dc2:	22 30       	cpi	r18, 0x02	; 2
     dc4:	31 05       	cpc	r19, r1
     dc6:	81 f1       	breq	.+96     	; 0xe28 <TIM1_FastPWMMood+0xa0>
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	9b 81       	ldd	r25, Y+3	; 0x03
     dcc:	83 30       	cpi	r24, 0x03	; 3
     dce:	91 05       	cpc	r25, r1
     dd0:	b1 f1       	breq	.+108    	; 0xe3e <TIM1_FastPWMMood+0xb6>
     dd2:	49 c0       	rjmp	.+146    	; 0xe66 <TIM1_FastPWMMood+0xde>
	{
	case TIM1_NormalFastPWM:
		TCCR1A_REG->COM1A0=0;
     dd4:	ef e4       	ldi	r30, 0x4F	; 79
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	8f 7b       	andi	r24, 0xBF	; 191
     ddc:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=0;
     dde:	ef e4       	ldi	r30, 0x4F	; 79
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	8f 7e       	andi	r24, 0xEF	; 239
     de6:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=0;
     de8:	ef e4       	ldi	r30, 0x4F	; 79
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8f 77       	andi	r24, 0x7F	; 127
     df0:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=0;
     df2:	ef e4       	ldi	r30, 0x4F	; 79
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	8f 7d       	andi	r24, 0xDF	; 223
     dfa:	80 83       	st	Z, r24
     dfc:	34 c0       	rjmp	.+104    	; 0xe66 <TIM1_FastPWMMood+0xde>
		break;
	case TIM1_Toggle_OC1A_OnCompareMatchFastPWM:
		TCCR1A_REG->COM1A0=1;
     dfe:	ef e4       	ldi	r30, 0x4F	; 79
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	80 64       	ori	r24, 0x40	; 64
     e06:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=1;
     e08:	ef e4       	ldi	r30, 0x4F	; 79
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	80 61       	ori	r24, 0x10	; 16
     e10:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=0;
     e12:	ef e4       	ldi	r30, 0x4F	; 79
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	8f 77       	andi	r24, 0x7F	; 127
     e1a:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=0;
     e1c:	ef e4       	ldi	r30, 0x4F	; 79
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	8f 7d       	andi	r24, 0xDF	; 223
     e24:	80 83       	st	Z, r24
     e26:	1f c0       	rjmp	.+62     	; 0xe66 <TIM1_FastPWMMood+0xde>
		break;
	case TIM1_ClearOnCompareMatchFastPWM:
		TCCR1A_REG->COM1A0=0;
     e28:	ef e4       	ldi	r30, 0x4F	; 79
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	8f 7b       	andi	r24, 0xBF	; 191
     e30:	80 83       	st	Z, r24
		//TCCR1A_REG->COM1B0=0;
		TCCR1A_REG->COM1A1=1;
     e32:	ef e4       	ldi	r30, 0x4F	; 79
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	80 68       	ori	r24, 0x80	; 128
     e3a:	80 83       	st	Z, r24
     e3c:	14 c0       	rjmp	.+40     	; 0xe66 <TIM1_FastPWMMood+0xde>
		//TCCR1A_REG->COM1B1=1;
		break;
	case TIM1_SetOnCompareMatchFastPWM:
		TCCR1A_REG->COM1A0=1;
     e3e:	ef e4       	ldi	r30, 0x4F	; 79
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	80 64       	ori	r24, 0x40	; 64
     e46:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=1;
     e48:	ef e4       	ldi	r30, 0x4F	; 79
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 61       	ori	r24, 0x10	; 16
     e50:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=1;
     e52:	ef e4       	ldi	r30, 0x4F	; 79
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	80 68       	ori	r24, 0x80	; 128
     e5a:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=1;
     e5c:	ef e4       	ldi	r30, 0x4F	; 79
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	80 62       	ori	r24, 0x20	; 32
     e64:	80 83       	st	Z, r24
		break;

	}
}
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <TIM1_NonPWMMood>:
void TIM1_NonPWMMood(COMNonPWM COM)
{
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	00 d0       	rcall	.+0      	; 0xe78 <TIM1_NonPWMMood+0x6>
     e78:	0f 92       	push	r0
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	89 83       	std	Y+1, r24	; 0x01
	switch(COM)
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	3b 83       	std	Y+3, r19	; 0x03
     e88:	2a 83       	std	Y+2, r18	; 0x02
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	9b 81       	ldd	r25, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	91 05       	cpc	r25, r1
     e92:	59 f1       	breq	.+86     	; 0xeea <TIM1_NonPWMMood+0x78>
     e94:	2a 81       	ldd	r18, Y+2	; 0x02
     e96:	3b 81       	ldd	r19, Y+3	; 0x03
     e98:	22 30       	cpi	r18, 0x02	; 2
     e9a:	31 05       	cpc	r19, r1
     e9c:	2c f4       	brge	.+10     	; 0xea8 <TIM1_NonPWMMood+0x36>
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	9b 81       	ldd	r25, Y+3	; 0x03
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	69 f0       	breq	.+26     	; 0xec0 <TIM1_NonPWMMood+0x4e>
     ea6:	5f c0       	rjmp	.+190    	; 0xf66 <TIM1_NonPWMMood+0xf4>
     ea8:	2a 81       	ldd	r18, Y+2	; 0x02
     eaa:	3b 81       	ldd	r19, Y+3	; 0x03
     eac:	22 30       	cpi	r18, 0x02	; 2
     eae:	31 05       	cpc	r19, r1
     eb0:	89 f1       	breq	.+98     	; 0xf14 <TIM1_NonPWMMood+0xa2>
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	9b 81       	ldd	r25, Y+3	; 0x03
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	91 05       	cpc	r25, r1
     eba:	09 f4       	brne	.+2      	; 0xebe <TIM1_NonPWMMood+0x4c>
     ebc:	40 c0       	rjmp	.+128    	; 0xf3e <TIM1_NonPWMMood+0xcc>
     ebe:	53 c0       	rjmp	.+166    	; 0xf66 <TIM1_NonPWMMood+0xf4>
	{
	case TIM1_NormalNONPWM:
		TCCR1A_REG->COM1A0=0;
     ec0:	ef e4       	ldi	r30, 0x4F	; 79
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	8f 7b       	andi	r24, 0xBF	; 191
     ec8:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=0;
     eca:	ef e4       	ldi	r30, 0x4F	; 79
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	8f 7e       	andi	r24, 0xEF	; 239
     ed2:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=0;
     ed4:	ef e4       	ldi	r30, 0x4F	; 79
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	8f 77       	andi	r24, 0x7F	; 127
     edc:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=0;
     ede:	ef e4       	ldi	r30, 0x4F	; 79
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	8f 7d       	andi	r24, 0xDF	; 223
     ee6:	80 83       	st	Z, r24
     ee8:	3e c0       	rjmp	.+124    	; 0xf66 <TIM1_NonPWMMood+0xf4>
		break;
	case TIM1_ToggleOncomparematchNONPWM:
		TCCR1A_REG->COM1A0=1;
     eea:	ef e4       	ldi	r30, 0x4F	; 79
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	80 64       	ori	r24, 0x40	; 64
     ef2:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=1;
     ef4:	ef e4       	ldi	r30, 0x4F	; 79
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	80 61       	ori	r24, 0x10	; 16
     efc:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=0;
     efe:	ef e4       	ldi	r30, 0x4F	; 79
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8f 77       	andi	r24, 0x7F	; 127
     f06:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=0;
     f08:	ef e4       	ldi	r30, 0x4F	; 79
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	8f 7d       	andi	r24, 0xDF	; 223
     f10:	80 83       	st	Z, r24
     f12:	29 c0       	rjmp	.+82     	; 0xf66 <TIM1_NonPWMMood+0xf4>
		break;
	case TIM1_ClearOnCompareMatchNONPWM:
		TCCR1A_REG->COM1A0=0;
     f14:	ef e4       	ldi	r30, 0x4F	; 79
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	8f 7b       	andi	r24, 0xBF	; 191
     f1c:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=0;
     f1e:	ef e4       	ldi	r30, 0x4F	; 79
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	8f 7e       	andi	r24, 0xEF	; 239
     f26:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=1;
     f28:	ef e4       	ldi	r30, 0x4F	; 79
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	80 68       	ori	r24, 0x80	; 128
     f30:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=1;
     f32:	ef e4       	ldi	r30, 0x4F	; 79
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	80 62       	ori	r24, 0x20	; 32
     f3a:	80 83       	st	Z, r24
     f3c:	14 c0       	rjmp	.+40     	; 0xf66 <TIM1_NonPWMMood+0xf4>
		break;
	case TIM1_SetOncomparematchNONPWM:
		TCCR1A_REG->COM1A0=1;
     f3e:	ef e4       	ldi	r30, 0x4F	; 79
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	80 64       	ori	r24, 0x40	; 64
     f46:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=1;
     f48:	ef e4       	ldi	r30, 0x4F	; 79
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	80 61       	ori	r24, 0x10	; 16
     f50:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=1;
     f52:	ef e4       	ldi	r30, 0x4F	; 79
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	80 68       	ori	r24, 0x80	; 128
     f5a:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=1;
     f5c:	ef e4       	ldi	r30, 0x4F	; 79
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	80 62       	ori	r24, 0x20	; 32
     f64:	80 83       	st	Z, r24
		break;

	}
}
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <TIM1_phaseCorrectMood>:
void TIM1_phaseCorrectMood(COMPhaseCorrect COM)
{
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	00 d0       	rcall	.+0      	; 0xf78 <TIM1_phaseCorrectMood+0x6>
     f78:	0f 92       	push	r0
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	89 83       	std	Y+1, r24	; 0x01
	switch(COM)
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	3b 83       	std	Y+3, r19	; 0x03
     f88:	2a 83       	std	Y+2, r18	; 0x02
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	9b 81       	ldd	r25, Y+3	; 0x03
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	91 05       	cpc	r25, r1
     f92:	59 f1       	breq	.+86     	; 0xfea <TIM1_phaseCorrectMood+0x78>
     f94:	2a 81       	ldd	r18, Y+2	; 0x02
     f96:	3b 81       	ldd	r19, Y+3	; 0x03
     f98:	22 30       	cpi	r18, 0x02	; 2
     f9a:	31 05       	cpc	r19, r1
     f9c:	2c f4       	brge	.+10     	; 0xfa8 <TIM1_phaseCorrectMood+0x36>
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	9b 81       	ldd	r25, Y+3	; 0x03
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	69 f0       	breq	.+26     	; 0xfc0 <TIM1_phaseCorrectMood+0x4e>
     fa6:	5f c0       	rjmp	.+190    	; 0x1066 <TIM1_phaseCorrectMood+0xf4>
     fa8:	2a 81       	ldd	r18, Y+2	; 0x02
     faa:	3b 81       	ldd	r19, Y+3	; 0x03
     fac:	22 30       	cpi	r18, 0x02	; 2
     fae:	31 05       	cpc	r19, r1
     fb0:	89 f1       	breq	.+98     	; 0x1014 <TIM1_phaseCorrectMood+0xa2>
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	9b 81       	ldd	r25, Y+3	; 0x03
     fb6:	83 30       	cpi	r24, 0x03	; 3
     fb8:	91 05       	cpc	r25, r1
     fba:	09 f4       	brne	.+2      	; 0xfbe <TIM1_phaseCorrectMood+0x4c>
     fbc:	40 c0       	rjmp	.+128    	; 0x103e <TIM1_phaseCorrectMood+0xcc>
     fbe:	53 c0       	rjmp	.+166    	; 0x1066 <TIM1_phaseCorrectMood+0xf4>
	{
	case TIM1_NormalPhasePWM:
		TCCR1A_REG->COM1A0=0;
     fc0:	ef e4       	ldi	r30, 0x4F	; 79
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	8f 7b       	andi	r24, 0xBF	; 191
     fc8:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=0;
     fca:	ef e4       	ldi	r30, 0x4F	; 79
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	8f 7e       	andi	r24, 0xEF	; 239
     fd2:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=0;
     fd4:	ef e4       	ldi	r30, 0x4F	; 79
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8f 77       	andi	r24, 0x7F	; 127
     fdc:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=0;
     fde:	ef e4       	ldi	r30, 0x4F	; 79
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	8f 7d       	andi	r24, 0xDF	; 223
     fe6:	80 83       	st	Z, r24
     fe8:	3e c0       	rjmp	.+124    	; 0x1066 <TIM1_phaseCorrectMood+0xf4>
		break;
	case TIM1_Toggle_OC1A_OnCompareMatchPhasePWM:
		TCCR1A_REG->COM1A0=1;
     fea:	ef e4       	ldi	r30, 0x4F	; 79
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	80 64       	ori	r24, 0x40	; 64
     ff2:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=1;
     ff4:	ef e4       	ldi	r30, 0x4F	; 79
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	80 61       	ori	r24, 0x10	; 16
     ffc:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=0;
     ffe:	ef e4       	ldi	r30, 0x4F	; 79
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	8f 77       	andi	r24, 0x7F	; 127
    1006:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=0;
    1008:	ef e4       	ldi	r30, 0x4F	; 79
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	8f 7d       	andi	r24, 0xDF	; 223
    1010:	80 83       	st	Z, r24
    1012:	29 c0       	rjmp	.+82     	; 0x1066 <TIM1_phaseCorrectMood+0xf4>
		break;
	case TIM1_ClearOnCompareMatchPhasePWM:
		TCCR1A_REG->COM1A0=0;
    1014:	ef e4       	ldi	r30, 0x4F	; 79
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	8f 7b       	andi	r24, 0xBF	; 191
    101c:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=0;
    101e:	ef e4       	ldi	r30, 0x4F	; 79
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	8f 7e       	andi	r24, 0xEF	; 239
    1026:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=1;
    1028:	ef e4       	ldi	r30, 0x4F	; 79
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	80 68       	ori	r24, 0x80	; 128
    1030:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=1;
    1032:	ef e4       	ldi	r30, 0x4F	; 79
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	80 62       	ori	r24, 0x20	; 32
    103a:	80 83       	st	Z, r24
    103c:	14 c0       	rjmp	.+40     	; 0x1066 <TIM1_phaseCorrectMood+0xf4>
		break;
	case TIM1_SetOnCompareMatchPhasePWM:
		TCCR1A_REG->COM1A0=1;
    103e:	ef e4       	ldi	r30, 0x4F	; 79
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	80 64       	ori	r24, 0x40	; 64
    1046:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=1;
    1048:	ef e4       	ldi	r30, 0x4F	; 79
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	80 61       	ori	r24, 0x10	; 16
    1050:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=1;
    1052:	ef e4       	ldi	r30, 0x4F	; 79
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	80 68       	ori	r24, 0x80	; 128
    105a:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=1;
    105c:	ef e4       	ldi	r30, 0x4F	; 79
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	80 62       	ori	r24, 0x20	; 32
    1064:	80 83       	st	Z, r24
		break;

	}
}
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <TIM1_init>:


void TIM1_init(void)
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
#elif(TIM1_PHASE_CORRECT==1)

	TIM1_phaseCorrectMood(TIM1_PHASE_CORRECT_MOOD);

#elif(TIM1_FAST_PWM==1)
	TIM1_FastPWMMood(TIM1_FAST_PWM_MOOD);
    107a:	82 e0       	ldi	r24, 0x02	; 2
    107c:	0e 94 c4 06 	call	0xd88	; 0xd88 <TIM1_FastPWMMood>

#endif
	TIM1_WGMMood(TIM1_WGM_MOOD);
    1080:	8d e0       	ldi	r24, 0x0D	; 13
    1082:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIM1_WGMMood>
}
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	08 95       	ret

0000108c <TIM1_stop>:



void TIM1_stop(void)
{
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
	TCCR1B_REG->CS=TIM1_NoClockSource;
    1094:	ee e4       	ldi	r30, 0x4E	; 78
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	88 7f       	andi	r24, 0xF8	; 248
    109c:	80 83       	st	Z, r24
}
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <TIM1_start>:

void TIM1_start(void)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
	TCCR1B_REG->CS=0b010;
    10ac:	ee e4       	ldi	r30, 0x4E	; 78
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	88 7f       	andi	r24, 0xF8	; 248
    10b4:	82 60       	ori	r24, 0x02	; 2
    10b6:	80 83       	st	Z, r24
}
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <TIM1_setPreload>:
void TIM1_setPreload(uint16 preload_Val)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <TIM1_setPreload+0x6>
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	9a 83       	std	Y+2, r25	; 0x02
    10ca:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_REG=preload_Val;
    10cc:	ec e4       	ldi	r30, 0x4C	; 76
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	91 83       	std	Z+1, r25	; 0x01
    10d6:	80 83       	st	Z, r24
}
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <TIM1_getVal>:
uint16 TIM1_getVal(void)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
	return TCNT1_REG;
    10ea:	ec e4       	ldi	r30, 0x4C	; 76
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	91 81       	ldd	r25, Z+1	; 0x01
}
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <TIM1_setICR>:
void TIM1_setICR(uint16 val)
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <TIM1_setICR+0x6>
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	9a 83       	std	Y+2, r25	; 0x02
    1104:	89 83       	std	Y+1, r24	; 0x01
	ICR1_REG=val;
    1106:	e6 e4       	ldi	r30, 0x46	; 70
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	9a 81       	ldd	r25, Y+2	; 0x02
    110e:	91 83       	std	Z+1, r25	; 0x01
    1110:	80 83       	st	Z, r24
}
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <TIM1_dutyCycle_OCRA>:
void TIM1_dutyCycle_OCRA(uint16 dutyCycle)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <TIM1_dutyCycle_OCRA+0x6>
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	9a 83       	std	Y+2, r25	; 0x02
    1128:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_REG = dutyCycle;
    112a:	ea e4       	ldi	r30, 0x4A	; 74
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	9a 81       	ldd	r25, Y+2	; 0x02
    1132:	91 83       	std	Z+1, r25	; 0x01
    1134:	80 83       	st	Z, r24
}
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <TIM1_dutyCycle_OCRB>:
void TIM1_dutyCycle_OCRB(uint16 dutyCycle)
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	00 d0       	rcall	.+0      	; 0x1146 <TIM1_dutyCycle_OCRB+0x6>
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	9a 83       	std	Y+2, r25	; 0x02
    114c:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_REG=dutyCycle;
    114e:	e8 e4       	ldi	r30, 0x48	; 72
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	91 83       	std	Z+1, r25	; 0x01
    1158:	80 83       	st	Z, r24
}
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <TIM1_EnableOVFInterrupt>:
void TIM1_EnableOVFInterrupt(void(*CallbackFunction)(void))
{
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	00 d0       	rcall	.+0      	; 0x116a <TIM1_EnableOVFInterrupt+0x6>
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	9a 83       	std	Y+2, r25	; 0x02
    1170:	89 83       	std	Y+1, r24	; 0x01
	TIM1_TIFR_REG->TOV1=1;
    1172:	e8 e5       	ldi	r30, 0x58	; 88
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	84 60       	ori	r24, 0x04	; 4
    117a:	80 83       	st	Z, r24
	TIM1_TIMSK_REG->TOIE1=1;
    117c:	e9 e5       	ldi	r30, 0x59	; 89
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	84 60       	ori	r24, 0x04	; 4
    1184:	80 83       	st	Z, r24
	if(CallbackFunction !=NULL)
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	9a 81       	ldd	r25, Y+2	; 0x02
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	31 f0       	breq	.+12     	; 0x119a <TIM1_EnableOVFInterrupt+0x36>
	{
		TIM1_callBackOV_ptr=CallbackFunction;
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	9a 81       	ldd	r25, Y+2	; 0x02
    1192:	90 93 79 00 	sts	0x0079, r25
    1196:	80 93 78 00 	sts	0x0078, r24
	}
}
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <TIM1_Enable_OCRA_Interrupt>:

void TIM1_Enable_OCRA_Interrupt(void(*CallbackFunction)(void))
{
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <TIM1_Enable_OCRA_Interrupt+0x6>
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	9a 83       	std	Y+2, r25	; 0x02
    11b0:	89 83       	std	Y+1, r24	; 0x01

	TIM1_TIFR_REG->OCF1A=1;
    11b2:	e8 e5       	ldi	r30, 0x58	; 88
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	80 61       	ori	r24, 0x10	; 16
    11ba:	80 83       	st	Z, r24
	TIM1_TIMSK_REG->OCIE1A=1;
    11bc:	e9 e5       	ldi	r30, 0x59	; 89
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	80 61       	ori	r24, 0x10	; 16
    11c4:	80 83       	st	Z, r24

	if(CallbackFunction !=NULL)
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	31 f0       	breq	.+12     	; 0x11da <TIM1_Enable_OCRA_Interrupt+0x36>
	{
		TIM1_callBackOCRA_ptr=CallbackFunction;
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	9a 81       	ldd	r25, Y+2	; 0x02
    11d2:	90 93 7b 00 	sts	0x007B, r25
    11d6:	80 93 7a 00 	sts	0x007A, r24
	}

}
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <TIM1_Enable_OCRB_Interrupt>:
void TIM1_Enable_OCRB_Interrupt(void(*CallbackFunction)(void))
{
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <TIM1_Enable_OCRB_Interrupt+0x6>
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01
	TIM1_TIFR_REG->OCF1B=1;
    11f2:	e8 e5       	ldi	r30, 0x58	; 88
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	88 60       	ori	r24, 0x08	; 8
    11fa:	80 83       	st	Z, r24
	TIM1_TIMSK_REG->OCIE1B=1;
    11fc:	e9 e5       	ldi	r30, 0x59	; 89
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	88 60       	ori	r24, 0x08	; 8
    1204:	80 83       	st	Z, r24
	if(CallbackFunction !=NULL)
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	9a 81       	ldd	r25, Y+2	; 0x02
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	31 f0       	breq	.+12     	; 0x121a <TIM1_Enable_OCRB_Interrupt+0x36>
	{
		TIM1_callBackOCRB_ptr=CallbackFunction;
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	9a 81       	ldd	r25, Y+2	; 0x02
    1212:	90 93 7d 00 	sts	0x007D, r25
    1216:	80 93 7c 00 	sts	0x007C, r24
	}
}
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <TIM1_Enable_ICR_Interrupt>:
void TIM1_Enable_ICR_Interrupt(void(*CallbackFunction)(void))
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	00 d0       	rcall	.+0      	; 0x122a <TIM1_Enable_ICR_Interrupt+0x6>
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	9a 83       	std	Y+2, r25	; 0x02
    1230:	89 83       	std	Y+1, r24	; 0x01
	TIM1_TIFR_REG->ICF1=1;
    1232:	e8 e5       	ldi	r30, 0x58	; 88
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	80 62       	ori	r24, 0x20	; 32
    123a:	80 83       	st	Z, r24
	TIM1_TIMSK_REG->TICIE1=1;
    123c:	e9 e5       	ldi	r30, 0x59	; 89
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	80 62       	ori	r24, 0x20	; 32
    1244:	80 83       	st	Z, r24
	if(CallbackFunction !=NULL)
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	9a 81       	ldd	r25, Y+2	; 0x02
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	31 f0       	breq	.+12     	; 0x125a <TIM1_Enable_ICR_Interrupt+0x36>
	{
		TIM1_callBackICR_ptr=CallbackFunction;
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	9a 81       	ldd	r25, Y+2	; 0x02
    1252:	90 93 7f 00 	sts	0x007F, r25
    1256:	80 93 7e 00 	sts	0x007E, r24
	}
}
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <__vector_6>:

void __vector_6(void) __attribute__((signal, used));
void __vector_6(void)		// TIMER1 CAPT
{
    1264:	1f 92       	push	r1
    1266:	0f 92       	push	r0
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	0f 92       	push	r0
    126c:	11 24       	eor	r1, r1
    126e:	2f 93       	push	r18
    1270:	3f 93       	push	r19
    1272:	4f 93       	push	r20
    1274:	5f 93       	push	r21
    1276:	6f 93       	push	r22
    1278:	7f 93       	push	r23
    127a:	8f 93       	push	r24
    127c:	9f 93       	push	r25
    127e:	af 93       	push	r26
    1280:	bf 93       	push	r27
    1282:	ef 93       	push	r30
    1284:	ff 93       	push	r31
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
	TIM1_callBackICR_ptr();
    128e:	e0 91 7e 00 	lds	r30, 0x007E
    1292:	f0 91 7f 00 	lds	r31, 0x007F
    1296:	09 95       	icall
}
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	ff 91       	pop	r31
    129e:	ef 91       	pop	r30
    12a0:	bf 91       	pop	r27
    12a2:	af 91       	pop	r26
    12a4:	9f 91       	pop	r25
    12a6:	8f 91       	pop	r24
    12a8:	7f 91       	pop	r23
    12aa:	6f 91       	pop	r22
    12ac:	5f 91       	pop	r21
    12ae:	4f 91       	pop	r20
    12b0:	3f 91       	pop	r19
    12b2:	2f 91       	pop	r18
    12b4:	0f 90       	pop	r0
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	0f 90       	pop	r0
    12ba:	1f 90       	pop	r1
    12bc:	18 95       	reti

000012be <__vector_7>:


void __vector_7(void) __attribute__((signal, used));
void __vector_7(void)		// TIMER1 COMPA
{
    12be:	1f 92       	push	r1
    12c0:	0f 92       	push	r0
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	0f 92       	push	r0
    12c6:	11 24       	eor	r1, r1
    12c8:	2f 93       	push	r18
    12ca:	3f 93       	push	r19
    12cc:	4f 93       	push	r20
    12ce:	5f 93       	push	r21
    12d0:	6f 93       	push	r22
    12d2:	7f 93       	push	r23
    12d4:	8f 93       	push	r24
    12d6:	9f 93       	push	r25
    12d8:	af 93       	push	r26
    12da:	bf 93       	push	r27
    12dc:	ef 93       	push	r30
    12de:	ff 93       	push	r31
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
	TIM1_callBackOCRA_ptr();
    12e8:	e0 91 7a 00 	lds	r30, 0x007A
    12ec:	f0 91 7b 00 	lds	r31, 0x007B
    12f0:	09 95       	icall
}
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	ff 91       	pop	r31
    12f8:	ef 91       	pop	r30
    12fa:	bf 91       	pop	r27
    12fc:	af 91       	pop	r26
    12fe:	9f 91       	pop	r25
    1300:	8f 91       	pop	r24
    1302:	7f 91       	pop	r23
    1304:	6f 91       	pop	r22
    1306:	5f 91       	pop	r21
    1308:	4f 91       	pop	r20
    130a:	3f 91       	pop	r19
    130c:	2f 91       	pop	r18
    130e:	0f 90       	pop	r0
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	0f 90       	pop	r0
    1314:	1f 90       	pop	r1
    1316:	18 95       	reti

00001318 <__vector_8>:


void __vector_8(void) __attribute__((signal, used));
void __vector_8(void)		// TIMER1 COMPB
{
    1318:	1f 92       	push	r1
    131a:	0f 92       	push	r0
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	0f 92       	push	r0
    1320:	11 24       	eor	r1, r1
    1322:	2f 93       	push	r18
    1324:	3f 93       	push	r19
    1326:	4f 93       	push	r20
    1328:	5f 93       	push	r21
    132a:	6f 93       	push	r22
    132c:	7f 93       	push	r23
    132e:	8f 93       	push	r24
    1330:	9f 93       	push	r25
    1332:	af 93       	push	r26
    1334:	bf 93       	push	r27
    1336:	ef 93       	push	r30
    1338:	ff 93       	push	r31
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
	TIM1_callBackOCRB_ptr();
    1342:	e0 91 7c 00 	lds	r30, 0x007C
    1346:	f0 91 7d 00 	lds	r31, 0x007D
    134a:	09 95       	icall
}
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	ff 91       	pop	r31
    1352:	ef 91       	pop	r30
    1354:	bf 91       	pop	r27
    1356:	af 91       	pop	r26
    1358:	9f 91       	pop	r25
    135a:	8f 91       	pop	r24
    135c:	7f 91       	pop	r23
    135e:	6f 91       	pop	r22
    1360:	5f 91       	pop	r21
    1362:	4f 91       	pop	r20
    1364:	3f 91       	pop	r19
    1366:	2f 91       	pop	r18
    1368:	0f 90       	pop	r0
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	0f 90       	pop	r0
    136e:	1f 90       	pop	r1
    1370:	18 95       	reti

00001372 <__vector_9>:


void __vector_9(void) __attribute__((signal, used));
void __vector_9(void)		// TIMER1 OVF
{
    1372:	1f 92       	push	r1
    1374:	0f 92       	push	r0
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	0f 92       	push	r0
    137a:	11 24       	eor	r1, r1
    137c:	2f 93       	push	r18
    137e:	3f 93       	push	r19
    1380:	4f 93       	push	r20
    1382:	5f 93       	push	r21
    1384:	6f 93       	push	r22
    1386:	7f 93       	push	r23
    1388:	8f 93       	push	r24
    138a:	9f 93       	push	r25
    138c:	af 93       	push	r26
    138e:	bf 93       	push	r27
    1390:	ef 93       	push	r30
    1392:	ff 93       	push	r31
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
	TIM1_callBackOV_ptr();
    139c:	e0 91 78 00 	lds	r30, 0x0078
    13a0:	f0 91 79 00 	lds	r31, 0x0079
    13a4:	09 95       	icall
}
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	ff 91       	pop	r31
    13ac:	ef 91       	pop	r30
    13ae:	bf 91       	pop	r27
    13b0:	af 91       	pop	r26
    13b2:	9f 91       	pop	r25
    13b4:	8f 91       	pop	r24
    13b6:	7f 91       	pop	r23
    13b8:	6f 91       	pop	r22
    13ba:	5f 91       	pop	r21
    13bc:	4f 91       	pop	r20
    13be:	3f 91       	pop	r19
    13c0:	2f 91       	pop	r18
    13c2:	0f 90       	pop	r0
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	0f 90       	pop	r0
    13c8:	1f 90       	pop	r1
    13ca:	18 95       	reti

000013cc <TIM0_init>:

void (*TIM0_callBackOV_ptr)(void) = NULL;
void (*TIM0_callBackCOMP_ptr)(void) = NULL;

void TIM0_init()
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG->FOC0=0;
    13d4:	e3 e5       	ldi	r30, 0x53	; 83
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	8f 77       	andi	r24, 0x7F	; 127
    13dc:	80 83       	st	Z, r24
	TCCR0_REG->WGM01=0;
#elif(CTC)
	TCCR0_REG->WGM00=0;
	TCCR0_REG->WGM01=1;
#elif(FAST_PWM)
	TCCR0_REG->WGM00=1;
    13de:	e3 e5       	ldi	r30, 0x53	; 83
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	80 64       	ori	r24, 0x40	; 64
    13e6:	80 83       	st	Z, r24
	TCCR0_REG->WGM01=1;
    13e8:	e3 e5       	ldi	r30, 0x53	; 83
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	88 60       	ori	r24, 0x08	; 8
    13f0:	80 83       	st	Z, r24
#endif

	TCCR0_REG->COM=COM_MODE;
    13f2:	e3 e5       	ldi	r30, 0x53	; 83
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	8f 7c       	andi	r24, 0xCF	; 207
    13fa:	80 62       	ori	r24, 0x20	; 32
    13fc:	80 83       	st	Z, r24
}
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <TIM0_stop>:

void TIM0_stop(void)
{
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG->CS=NoClockSource;
    140c:	e3 e5       	ldi	r30, 0x53	; 83
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	88 7f       	andi	r24, 0xF8	; 248
    1414:	80 83       	st	Z, r24
}
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <TIM0_start>:

void TIM0_start(void)
{
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG->CS=Prescaler;
    1424:	e3 e5       	ldi	r30, 0x53	; 83
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	88 7f       	andi	r24, 0xF8	; 248
    142c:	85 60       	ori	r24, 0x05	; 5
    142e:	80 83       	st	Z, r24
}
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <TIM0_setPreload>:
void TIM0_setPreload(uint8 preload_Val)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	0f 92       	push	r0
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	89 83       	std	Y+1, r24	; 0x01
	TCNT0_REG=preload_Val;
    1442:	e2 e5       	ldi	r30, 0x52	; 82
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	80 83       	st	Z, r24
}
    144a:	0f 90       	pop	r0
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <TIM0_dutyCycle>:
void TIM0_dutyCycle(uint8 dc)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	0f 92       	push	r0
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	89 83       	std	Y+1, r24	; 0x01
#if(COM_MODE==ClearOnCompareMatchFastPWM)
	//OCR0_REG=(1-(dc/100))*256;
	OCR0_REG=dc;
    145e:	ec e5       	ldi	r30, 0x5C	; 92
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	80 83       	st	Z, r24
#elif(COM_MODE==SetOnCompareMatchFastPWM)
	OCR0_REG=(dc/100)*256;
#endif
	OCR0_REG=(1-(dc))*255;
    1466:	ec e5       	ldi	r30, 0x5C	; 92
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	ac 01       	movw	r20, r24
    1476:	42 1b       	sub	r20, r18
    1478:	53 0b       	sbc	r21, r19
    147a:	ca 01       	movw	r24, r20
    147c:	9c 01       	movw	r18, r24
    147e:	22 0f       	add	r18, r18
    1480:	33 1f       	adc	r19, r19
    1482:	c9 01       	movw	r24, r18
    1484:	96 95       	lsr	r25
    1486:	98 2f       	mov	r25, r24
    1488:	88 27       	eor	r24, r24
    148a:	97 95       	ror	r25
    148c:	87 95       	ror	r24
    148e:	82 1b       	sub	r24, r18
    1490:	93 0b       	sbc	r25, r19
    1492:	84 0f       	add	r24, r20
    1494:	95 1f       	adc	r25, r21
    1496:	80 83       	st	Z, r24
}
    1498:	0f 90       	pop	r0
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <TIM0_getVal>:
uint8 TIM0_getVal(void)
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
	return TCNT0_REG;
    14a8:	e2 e5       	ldi	r30, 0x52	; 82
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
}
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <delay_ms>:


void delay_ms(uint32 msec)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <delay_ms+0x6>
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <delay_ms+0x8>
    14bc:	0f 92       	push	r0
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	69 83       	std	Y+1, r22	; 0x01
    14c4:	7a 83       	std	Y+2, r23	; 0x02
    14c6:	8b 83       	std	Y+3, r24	; 0x03
    14c8:	9c 83       	std	Y+4, r25	; 0x04
	TIM0_TIFR_REG->TOV0=1;
    14ca:	e8 e5       	ldi	r30, 0x58	; 88
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	81 60       	ori	r24, 0x01	; 1
    14d2:	80 83       	st	Z, r24
	TIM0_TIMSK_REG->TOIE0=0;
    14d4:	e9 e5       	ldi	r30, 0x59	; 89
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	8e 7f       	andi	r24, 0xFE	; 254
    14dc:	80 83       	st	Z, r24
    14de:	0e c0       	rjmp	.+28     	; 0x14fc <delay_ms+0x48>

	while(msec--)
	{
		TIM0_setPreload(6);
    14e0:	86 e0       	ldi	r24, 0x06	; 6
    14e2:	0e 94 1b 0a 	call	0x1436	; 0x1436 <TIM0_setPreload>
		while(TIM0_TIFR_REG->TOV0 != 1);
    14e6:	e8 e5       	ldi	r30, 0x58	; 88
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	81 70       	andi	r24, 0x01	; 1
    14ee:	88 23       	and	r24, r24
    14f0:	d1 f3       	breq	.-12     	; 0x14e6 <delay_ms+0x32>
		TIM0_TIFR_REG->TOV0=1;
    14f2:	e8 e5       	ldi	r30, 0x58	; 88
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	81 60       	ori	r24, 0x01	; 1
    14fa:	80 83       	st	Z, r24
void delay_ms(uint32 msec)
{
	TIM0_TIFR_REG->TOV0=1;
	TIM0_TIMSK_REG->TOIE0=0;

	while(msec--)
    14fc:	1d 82       	std	Y+5, r1	; 0x05
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	ab 81       	ldd	r26, Y+3	; 0x03
    1504:	bc 81       	ldd	r27, Y+4	; 0x04
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	a1 05       	cpc	r26, r1
    150a:	b1 05       	cpc	r27, r1
    150c:	11 f0       	breq	.+4      	; 0x1512 <delay_ms+0x5e>
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	8d 83       	std	Y+5, r24	; 0x05
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	9a 81       	ldd	r25, Y+2	; 0x02
    1516:	ab 81       	ldd	r26, Y+3	; 0x03
    1518:	bc 81       	ldd	r27, Y+4	; 0x04
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	a1 09       	sbc	r26, r1
    151e:	b1 09       	sbc	r27, r1
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	9a 83       	std	Y+2, r25	; 0x02
    1524:	ab 83       	std	Y+3, r26	; 0x03
    1526:	bc 83       	std	Y+4, r27	; 0x04
    1528:	8d 81       	ldd	r24, Y+5	; 0x05
    152a:	88 23       	and	r24, r24
    152c:	c9 f6       	brne	.-78     	; 0x14e0 <delay_ms+0x2c>

	}



}
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <TIM0_EnableOVFInterrupt>:
void TIM0_EnableOVFInterrupt(void(*CallbackFunction)(void))
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	00 d0       	rcall	.+0      	; 0x1544 <TIM0_EnableOVFInterrupt+0x6>
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	9a 83       	std	Y+2, r25	; 0x02
    154a:	89 83       	std	Y+1, r24	; 0x01
	TIM0_TIFR_REG->TOV0=1;
    154c:	e8 e5       	ldi	r30, 0x58	; 88
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	81 60       	ori	r24, 0x01	; 1
    1554:	80 83       	st	Z, r24
	TIM0_TIMSK_REG->TOIE0=1;
    1556:	e9 e5       	ldi	r30, 0x59	; 89
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	81 60       	ori	r24, 0x01	; 1
    155e:	80 83       	st	Z, r24
	if(CallbackFunction !=NULL)
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	9a 81       	ldd	r25, Y+2	; 0x02
    1564:	00 97       	sbiw	r24, 0x00	; 0
    1566:	31 f0       	breq	.+12     	; 0x1574 <TIM0_EnableOVFInterrupt+0x36>
	{
		TIM0_callBackOV_ptr=CallbackFunction;
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	9a 81       	ldd	r25, Y+2	; 0x02
    156c:	90 93 81 00 	sts	0x0081, r25
    1570:	80 93 80 00 	sts	0x0080, r24
	}

}
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <TIM0_EnableCOMInterrupt>:
void TIM0_EnableCOMInterrupt(void(*CallbackFunction)(void))
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	00 d0       	rcall	.+0      	; 0x1584 <TIM0_EnableCOMInterrupt+0x6>
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	9a 83       	std	Y+2, r25	; 0x02
    158a:	89 83       	std	Y+1, r24	; 0x01
	TIM0_TIFR_REG->OCF0=1;
    158c:	e8 e5       	ldi	r30, 0x58	; 88
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	82 60       	ori	r24, 0x02	; 2
    1594:	80 83       	st	Z, r24
	TIM0_TIMSK_REG->OCIE0=1;
    1596:	e9 e5       	ldi	r30, 0x59	; 89
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	82 60       	ori	r24, 0x02	; 2
    159e:	80 83       	st	Z, r24
	if(CallbackFunction !=NULL)
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	9a 81       	ldd	r25, Y+2	; 0x02
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	31 f0       	breq	.+12     	; 0x15b4 <TIM0_EnableCOMInterrupt+0x36>
	{
		TIM0_callBackCOMP_ptr=CallbackFunction;
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	9a 81       	ldd	r25, Y+2	; 0x02
    15ac:	90 93 83 00 	sts	0x0083, r25
    15b0:	80 93 82 00 	sts	0x0082, r24
	}

}
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <__vector_11>:
void __vector_11(void)	__attribute__((signal, used));
void __vector_11(void)
{
    15be:	1f 92       	push	r1
    15c0:	0f 92       	push	r0
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	0f 92       	push	r0
    15c6:	11 24       	eor	r1, r1
    15c8:	2f 93       	push	r18
    15ca:	3f 93       	push	r19
    15cc:	4f 93       	push	r20
    15ce:	5f 93       	push	r21
    15d0:	6f 93       	push	r22
    15d2:	7f 93       	push	r23
    15d4:	8f 93       	push	r24
    15d6:	9f 93       	push	r25
    15d8:	af 93       	push	r26
    15da:	bf 93       	push	r27
    15dc:	ef 93       	push	r30
    15de:	ff 93       	push	r31
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
	if(TIM0_callBackOV_ptr != NULL)
    15e8:	80 91 80 00 	lds	r24, 0x0080
    15ec:	90 91 81 00 	lds	r25, 0x0081
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	29 f0       	breq	.+10     	; 0x15fe <__vector_11+0x40>
	{
		TIM0_callBackOV_ptr();
    15f4:	e0 91 80 00 	lds	r30, 0x0080
    15f8:	f0 91 81 00 	lds	r31, 0x0081
    15fc:	09 95       	icall
	}
}
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	ff 91       	pop	r31
    1604:	ef 91       	pop	r30
    1606:	bf 91       	pop	r27
    1608:	af 91       	pop	r26
    160a:	9f 91       	pop	r25
    160c:	8f 91       	pop	r24
    160e:	7f 91       	pop	r23
    1610:	6f 91       	pop	r22
    1612:	5f 91       	pop	r21
    1614:	4f 91       	pop	r20
    1616:	3f 91       	pop	r19
    1618:	2f 91       	pop	r18
    161a:	0f 90       	pop	r0
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	0f 90       	pop	r0
    1620:	1f 90       	pop	r1
    1622:	18 95       	reti

00001624 <GPIO_SetupPin_Direction>:
#include "GPIO_Config.h"
#include "GPIO_Private.h"


void GPIO_SetupPin_Direction(uint8 port_id,uint8 pin_num,GPIO_PinDirection direction)
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	00 d0       	rcall	.+0      	; 0x162a <GPIO_SetupPin_Direction+0x6>
    162a:	00 d0       	rcall	.+0      	; 0x162c <GPIO_SetupPin_Direction+0x8>
    162c:	0f 92       	push	r0
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	6a 83       	std	Y+2, r22	; 0x02
    1636:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num > NUM_OF_PINS || port_id > NUM_OF_PORTS)
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	89 30       	cpi	r24, 0x09	; 9
    163c:	08 f0       	brcs	.+2      	; 0x1640 <GPIO_SetupPin_Direction+0x1c>
    163e:	e4 c0       	rjmp	.+456    	; 0x1808 <GPIO_SetupPin_Direction+0x1e4>
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	85 30       	cpi	r24, 0x05	; 5
    1644:	08 f0       	brcs	.+2      	; 0x1648 <GPIO_SetupPin_Direction+0x24>
    1646:	e0 c0       	rjmp	.+448    	; 0x1808 <GPIO_SetupPin_Direction+0x1e4>
	}
	else
	{


		switch(port_id)
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	3d 83       	std	Y+5, r19	; 0x05
    1650:	2c 83       	std	Y+4, r18	; 0x04
    1652:	8c 81       	ldd	r24, Y+4	; 0x04
    1654:	9d 81       	ldd	r25, Y+5	; 0x05
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	91 05       	cpc	r25, r1
    165a:	09 f4       	brne	.+2      	; 0x165e <GPIO_SetupPin_Direction+0x3a>
    165c:	47 c0       	rjmp	.+142    	; 0x16ec <GPIO_SetupPin_Direction+0xc8>
    165e:	2c 81       	ldd	r18, Y+4	; 0x04
    1660:	3d 81       	ldd	r19, Y+5	; 0x05
    1662:	22 30       	cpi	r18, 0x02	; 2
    1664:	31 05       	cpc	r19, r1
    1666:	2c f4       	brge	.+10     	; 0x1672 <GPIO_SetupPin_Direction+0x4e>
    1668:	8c 81       	ldd	r24, Y+4	; 0x04
    166a:	9d 81       	ldd	r25, Y+5	; 0x05
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	71 f0       	breq	.+28     	; 0x168c <GPIO_SetupPin_Direction+0x68>
    1670:	cb c0       	rjmp	.+406    	; 0x1808 <GPIO_SetupPin_Direction+0x1e4>
    1672:	2c 81       	ldd	r18, Y+4	; 0x04
    1674:	3d 81       	ldd	r19, Y+5	; 0x05
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	09 f4       	brne	.+2      	; 0x167e <GPIO_SetupPin_Direction+0x5a>
    167c:	67 c0       	rjmp	.+206    	; 0x174c <GPIO_SetupPin_Direction+0x128>
    167e:	8c 81       	ldd	r24, Y+4	; 0x04
    1680:	9d 81       	ldd	r25, Y+5	; 0x05
    1682:	83 30       	cpi	r24, 0x03	; 3
    1684:	91 05       	cpc	r25, r1
    1686:	09 f4       	brne	.+2      	; 0x168a <GPIO_SetupPin_Direction+0x66>
    1688:	91 c0       	rjmp	.+290    	; 0x17ac <GPIO_SetupPin_Direction+0x188>
    168a:	be c0       	rjmp	.+380    	; 0x1808 <GPIO_SetupPin_Direction+0x1e4>
		{
			case PORTA_ID:
				if(direction==PIN_INPUT)
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	88 23       	and	r24, r24
    1690:	a9 f4       	brne	.+42     	; 0x16bc <GPIO_SetupPin_Direction+0x98>
				{

					CLEAR_BIT(DDRA,pin_num);
    1692:	aa e3       	ldi	r26, 0x3A	; 58
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	ea e3       	ldi	r30, 0x3A	; 58
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <GPIO_SetupPin_Direction+0x8c>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <GPIO_SetupPin_Direction+0x88>
    16b4:	80 95       	com	r24
    16b6:	84 23       	and	r24, r20
    16b8:	8c 93       	st	X, r24
    16ba:	a6 c0       	rjmp	.+332    	; 0x1808 <GPIO_SetupPin_Direction+0x1e4>
				}
				else if(direction==PIN_OUTPUT)
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <GPIO_SetupPin_Direction+0xa0>
    16c2:	a2 c0       	rjmp	.+324    	; 0x1808 <GPIO_SetupPin_Direction+0x1e4>
				{
					SET_BIT(DDRA,pin_num);
    16c4:	aa e3       	ldi	r26, 0x3A	; 58
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	ea e3       	ldi	r30, 0x3A	; 58
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	48 2f       	mov	r20, r24
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 2e       	mov	r0, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <GPIO_SetupPin_Direction+0xbe>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <GPIO_SetupPin_Direction+0xba>
    16e6:	84 2b       	or	r24, r20
    16e8:	8c 93       	st	X, r24
    16ea:	8e c0       	rjmp	.+284    	; 0x1808 <GPIO_SetupPin_Direction+0x1e4>
				}
				break;
			case PORTB_ID:
				if(direction==PIN_INPUT)
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	88 23       	and	r24, r24
    16f0:	a9 f4       	brne	.+42     	; 0x171c <GPIO_SetupPin_Direction+0xf8>
				{
					CLEAR_BIT(DDRB,pin_num);
    16f2:	a7 e3       	ldi	r26, 0x37	; 55
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e7 e3       	ldi	r30, 0x37	; 55
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	48 2f       	mov	r20, r24
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	02 2e       	mov	r0, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <GPIO_SetupPin_Direction+0xec>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	0a 94       	dec	r0
    1712:	e2 f7       	brpl	.-8      	; 0x170c <GPIO_SetupPin_Direction+0xe8>
    1714:	80 95       	com	r24
    1716:	84 23       	and	r24, r20
    1718:	8c 93       	st	X, r24
    171a:	76 c0       	rjmp	.+236    	; 0x1808 <GPIO_SetupPin_Direction+0x1e4>
				}
				else if(direction==PIN_OUTPUT)
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	09 f0       	breq	.+2      	; 0x1724 <GPIO_SetupPin_Direction+0x100>
    1722:	72 c0       	rjmp	.+228    	; 0x1808 <GPIO_SetupPin_Direction+0x1e4>
				{
					SET_BIT(DDRB,pin_num);
    1724:	a7 e3       	ldi	r26, 0x37	; 55
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e7 e3       	ldi	r30, 0x37	; 55
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	48 2f       	mov	r20, r24
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 2e       	mov	r0, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <GPIO_SetupPin_Direction+0x11e>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	0a 94       	dec	r0
    1744:	e2 f7       	brpl	.-8      	; 0x173e <GPIO_SetupPin_Direction+0x11a>
    1746:	84 2b       	or	r24, r20
    1748:	8c 93       	st	X, r24
    174a:	5e c0       	rjmp	.+188    	; 0x1808 <GPIO_SetupPin_Direction+0x1e4>
				}
				break;
			case PORTC_ID:
				if(direction==PIN_INPUT)
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	88 23       	and	r24, r24
    1750:	a9 f4       	brne	.+42     	; 0x177c <GPIO_SetupPin_Direction+0x158>
				{
					CLEAR_BIT(DDRC,pin_num);
    1752:	a4 e3       	ldi	r26, 0x34	; 52
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e4 e3       	ldi	r30, 0x34	; 52
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 2e       	mov	r0, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <GPIO_SetupPin_Direction+0x14c>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	e2 f7       	brpl	.-8      	; 0x176c <GPIO_SetupPin_Direction+0x148>
    1774:	80 95       	com	r24
    1776:	84 23       	and	r24, r20
    1778:	8c 93       	st	X, r24
    177a:	46 c0       	rjmp	.+140    	; 0x1808 <GPIO_SetupPin_Direction+0x1e4>
				}
				else if(direction==PIN_OUTPUT)
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	09 f0       	breq	.+2      	; 0x1784 <GPIO_SetupPin_Direction+0x160>
    1782:	42 c0       	rjmp	.+132    	; 0x1808 <GPIO_SetupPin_Direction+0x1e4>
				{
					SET_BIT(DDRC,pin_num);
    1784:	a4 e3       	ldi	r26, 0x34	; 52
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e4 e3       	ldi	r30, 0x34	; 52
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	48 2f       	mov	r20, r24
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	02 2e       	mov	r0, r18
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <GPIO_SetupPin_Direction+0x17e>
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	0a 94       	dec	r0
    17a4:	e2 f7       	brpl	.-8      	; 0x179e <GPIO_SetupPin_Direction+0x17a>
    17a6:	84 2b       	or	r24, r20
    17a8:	8c 93       	st	X, r24
    17aa:	2e c0       	rjmp	.+92     	; 0x1808 <GPIO_SetupPin_Direction+0x1e4>
				}
				break;
			case PORTD_ID:
				if(direction==PIN_INPUT)
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	88 23       	and	r24, r24
    17b0:	a9 f4       	brne	.+42     	; 0x17dc <GPIO_SetupPin_Direction+0x1b8>
				{
					CLEAR_BIT(DDRD,pin_num);
    17b2:	a1 e3       	ldi	r26, 0x31	; 49
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e1 e3       	ldi	r30, 0x31	; 49
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	48 2f       	mov	r20, r24
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	02 2e       	mov	r0, r18
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <GPIO_SetupPin_Direction+0x1ac>
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	0a 94       	dec	r0
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <GPIO_SetupPin_Direction+0x1a8>
    17d4:	80 95       	com	r24
    17d6:	84 23       	and	r24, r20
    17d8:	8c 93       	st	X, r24
    17da:	16 c0       	rjmp	.+44     	; 0x1808 <GPIO_SetupPin_Direction+0x1e4>
				}
				else if(direction==PIN_OUTPUT)
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	99 f4       	brne	.+38     	; 0x1808 <GPIO_SetupPin_Direction+0x1e4>
				{
					SET_BIT(DDRD,pin_num);
    17e2:	a1 e3       	ldi	r26, 0x31	; 49
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e1 e3       	ldi	r30, 0x31	; 49
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	48 2f       	mov	r20, r24
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 2e       	mov	r0, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <GPIO_SetupPin_Direction+0x1dc>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	0a 94       	dec	r0
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <GPIO_SetupPin_Direction+0x1d8>
    1804:	84 2b       	or	r24, r20
    1806:	8c 93       	st	X, r24
				}
				break;

			}
	}
}
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <GPIO_SetupPort_Direction>:
void GPIO_SetupPort_Direction(uint8 port_id,GPIO_PortDirection direction)
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	00 d0       	rcall	.+0      	; 0x181e <GPIO_SetupPort_Direction+0x6>
    181e:	00 d0       	rcall	.+0      	; 0x1820 <GPIO_SetupPort_Direction+0x8>
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	6a 83       	std	Y+2, r22	; 0x02
	if(port_id > NUM_OF_PORTS)
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	85 30       	cpi	r24, 0x05	; 5
    182c:	08 f0       	brcs	.+2      	; 0x1830 <GPIO_SetupPort_Direction+0x18>
    182e:	5a c0       	rjmp	.+180    	; 0x18e4 <GPIO_SetupPort_Direction+0xcc>
	{

	}
	else
	{
		switch(port_id)
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	3c 83       	std	Y+4, r19	; 0x04
    1838:	2b 83       	std	Y+3, r18	; 0x03
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	9c 81       	ldd	r25, Y+4	; 0x04
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	91 05       	cpc	r25, r1
    1842:	21 f1       	breq	.+72     	; 0x188c <GPIO_SetupPort_Direction+0x74>
    1844:	2b 81       	ldd	r18, Y+3	; 0x03
    1846:	3c 81       	ldd	r19, Y+4	; 0x04
    1848:	22 30       	cpi	r18, 0x02	; 2
    184a:	31 05       	cpc	r19, r1
    184c:	2c f4       	brge	.+10     	; 0x1858 <GPIO_SetupPort_Direction+0x40>
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	9c 81       	ldd	r25, Y+4	; 0x04
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	61 f0       	breq	.+24     	; 0x186e <GPIO_SetupPort_Direction+0x56>
    1856:	46 c0       	rjmp	.+140    	; 0x18e4 <GPIO_SetupPort_Direction+0xcc>
    1858:	2b 81       	ldd	r18, Y+3	; 0x03
    185a:	3c 81       	ldd	r19, Y+4	; 0x04
    185c:	22 30       	cpi	r18, 0x02	; 2
    185e:	31 05       	cpc	r19, r1
    1860:	21 f1       	breq	.+72     	; 0x18aa <GPIO_SetupPort_Direction+0x92>
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	9c 81       	ldd	r25, Y+4	; 0x04
    1866:	83 30       	cpi	r24, 0x03	; 3
    1868:	91 05       	cpc	r25, r1
    186a:	71 f1       	breq	.+92     	; 0x18c8 <GPIO_SetupPort_Direction+0xb0>
    186c:	3b c0       	rjmp	.+118    	; 0x18e4 <GPIO_SetupPort_Direction+0xcc>
			{
			case PORTA_ID:
				if(direction==Port_INPUT)
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	88 23       	and	r24, r24
    1872:	21 f4       	brne	.+8      	; 0x187c <GPIO_SetupPort_Direction+0x64>
				{

					CLEAR_BYTE(DDRA);
    1874:	ea e3       	ldi	r30, 0x3A	; 58
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	10 82       	st	Z, r1
    187a:	34 c0       	rjmp	.+104    	; 0x18e4 <GPIO_SetupPort_Direction+0xcc>
				}
				else if(direction==port_OUTPUT)
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	89 f5       	brne	.+98     	; 0x18e4 <GPIO_SetupPort_Direction+0xcc>
				{
					SET_BYTE(DDRA,0xFF);
    1882:	ea e3       	ldi	r30, 0x3A	; 58
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	8f ef       	ldi	r24, 0xFF	; 255
    1888:	80 83       	st	Z, r24
    188a:	2c c0       	rjmp	.+88     	; 0x18e4 <GPIO_SetupPort_Direction+0xcc>
				}
				break;
			case PORTB_ID:
				if(direction==Port_INPUT)
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	88 23       	and	r24, r24
    1890:	21 f4       	brne	.+8      	; 0x189a <GPIO_SetupPort_Direction+0x82>
				{

					CLEAR_BYTE(DDRB);
    1892:	e7 e3       	ldi	r30, 0x37	; 55
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	10 82       	st	Z, r1
    1898:	25 c0       	rjmp	.+74     	; 0x18e4 <GPIO_SetupPort_Direction+0xcc>
				}
				else if(direction==port_OUTPUT)
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	11 f5       	brne	.+68     	; 0x18e4 <GPIO_SetupPort_Direction+0xcc>
				{
					SET_BYTE(DDRB,0xFF);
    18a0:	e7 e3       	ldi	r30, 0x37	; 55
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	8f ef       	ldi	r24, 0xFF	; 255
    18a6:	80 83       	st	Z, r24
    18a8:	1d c0       	rjmp	.+58     	; 0x18e4 <GPIO_SetupPort_Direction+0xcc>
				}
				break;
			case PORTC_ID:
				if(direction==Port_INPUT)
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	88 23       	and	r24, r24
    18ae:	21 f4       	brne	.+8      	; 0x18b8 <GPIO_SetupPort_Direction+0xa0>
				{

					CLEAR_BYTE(DDRC);
    18b0:	e4 e3       	ldi	r30, 0x34	; 52
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	10 82       	st	Z, r1
    18b6:	16 c0       	rjmp	.+44     	; 0x18e4 <GPIO_SetupPort_Direction+0xcc>
				}
				else if(direction==port_OUTPUT)
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	99 f4       	brne	.+38     	; 0x18e4 <GPIO_SetupPort_Direction+0xcc>
				{
					SET_BYTE(DDRC,0xFF);
    18be:	e4 e3       	ldi	r30, 0x34	; 52
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	8f ef       	ldi	r24, 0xFF	; 255
    18c4:	80 83       	st	Z, r24
    18c6:	0e c0       	rjmp	.+28     	; 0x18e4 <GPIO_SetupPort_Direction+0xcc>
				}
				break;
			case PORTD_ID:
				if(direction==Port_INPUT)
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	88 23       	and	r24, r24
    18cc:	21 f4       	brne	.+8      	; 0x18d6 <GPIO_SetupPort_Direction+0xbe>
				{

					CLEAR_BYTE(DDRD);
    18ce:	e1 e3       	ldi	r30, 0x31	; 49
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	10 82       	st	Z, r1
    18d4:	07 c0       	rjmp	.+14     	; 0x18e4 <GPIO_SetupPort_Direction+0xcc>
				}
				else if(direction==port_OUTPUT)
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	21 f4       	brne	.+8      	; 0x18e4 <GPIO_SetupPort_Direction+0xcc>
				{
					SET_BYTE(DDRD,0xFF);
    18dc:	e1 e3       	ldi	r30, 0x31	; 49
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	8f ef       	ldi	r24, 0xFF	; 255
    18e2:	80 83       	st	Z, r24
				}
				break;

			}
	}
}
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	08 95       	ret

000018f2 <GPIO_SetupPin_Value>:

void GPIO_SetupPin_Value(uint8 port_id,uint8 pin_num,uint8 pin_value)
{
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <GPIO_SetupPin_Value+0x6>
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <GPIO_SetupPin_Value+0x8>
    18fa:	0f 92       	push	r0
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	89 83       	std	Y+1, r24	; 0x01
    1902:	6a 83       	std	Y+2, r22	; 0x02
    1904:	4b 83       	std	Y+3, r20	; 0x03

		switch(port_id)
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	3d 83       	std	Y+5, r19	; 0x05
    190e:	2c 83       	std	Y+4, r18	; 0x04
    1910:	8c 81       	ldd	r24, Y+4	; 0x04
    1912:	9d 81       	ldd	r25, Y+5	; 0x05
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	91 05       	cpc	r25, r1
    1918:	09 f4       	brne	.+2      	; 0x191c <GPIO_SetupPin_Value+0x2a>
    191a:	47 c0       	rjmp	.+142    	; 0x19aa <GPIO_SetupPin_Value+0xb8>
    191c:	2c 81       	ldd	r18, Y+4	; 0x04
    191e:	3d 81       	ldd	r19, Y+5	; 0x05
    1920:	22 30       	cpi	r18, 0x02	; 2
    1922:	31 05       	cpc	r19, r1
    1924:	2c f4       	brge	.+10     	; 0x1930 <GPIO_SetupPin_Value+0x3e>
    1926:	8c 81       	ldd	r24, Y+4	; 0x04
    1928:	9d 81       	ldd	r25, Y+5	; 0x05
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	71 f0       	breq	.+28     	; 0x194a <GPIO_SetupPin_Value+0x58>
    192e:	cb c0       	rjmp	.+406    	; 0x1ac6 <GPIO_SetupPin_Value+0x1d4>
    1930:	2c 81       	ldd	r18, Y+4	; 0x04
    1932:	3d 81       	ldd	r19, Y+5	; 0x05
    1934:	22 30       	cpi	r18, 0x02	; 2
    1936:	31 05       	cpc	r19, r1
    1938:	09 f4       	brne	.+2      	; 0x193c <GPIO_SetupPin_Value+0x4a>
    193a:	67 c0       	rjmp	.+206    	; 0x1a0a <GPIO_SetupPin_Value+0x118>
    193c:	8c 81       	ldd	r24, Y+4	; 0x04
    193e:	9d 81       	ldd	r25, Y+5	; 0x05
    1940:	83 30       	cpi	r24, 0x03	; 3
    1942:	91 05       	cpc	r25, r1
    1944:	09 f4       	brne	.+2      	; 0x1948 <GPIO_SetupPin_Value+0x56>
    1946:	91 c0       	rjmp	.+290    	; 0x1a6a <GPIO_SetupPin_Value+0x178>
    1948:	be c0       	rjmp	.+380    	; 0x1ac6 <GPIO_SetupPin_Value+0x1d4>
			{
			case PORTA_ID:
				if(pin_value ==LOGIC_LOW)
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	88 23       	and	r24, r24
    194e:	a9 f4       	brne	.+42     	; 0x197a <GPIO_SetupPin_Value+0x88>
				{
					CLEAR_BIT(PORTA,pin_num);
    1950:	ab e3       	ldi	r26, 0x3B	; 59
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	eb e3       	ldi	r30, 0x3B	; 59
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	48 2f       	mov	r20, r24
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	02 2e       	mov	r0, r18
    1968:	02 c0       	rjmp	.+4      	; 0x196e <GPIO_SetupPin_Value+0x7c>
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	0a 94       	dec	r0
    1970:	e2 f7       	brpl	.-8      	; 0x196a <GPIO_SetupPin_Value+0x78>
    1972:	80 95       	com	r24
    1974:	84 23       	and	r24, r20
    1976:	8c 93       	st	X, r24
    1978:	a6 c0       	rjmp	.+332    	; 0x1ac6 <GPIO_SetupPin_Value+0x1d4>
				}
				else if(pin_value == LOGIC_HIGH)
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	09 f0       	breq	.+2      	; 0x1982 <GPIO_SetupPin_Value+0x90>
    1980:	a2 c0       	rjmp	.+324    	; 0x1ac6 <GPIO_SetupPin_Value+0x1d4>
				{
					SET_BIT(PORTA,pin_num);
    1982:	ab e3       	ldi	r26, 0x3B	; 59
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	eb e3       	ldi	r30, 0x3B	; 59
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	48 2f       	mov	r20, r24
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	02 2e       	mov	r0, r18
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <GPIO_SetupPin_Value+0xae>
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	0a 94       	dec	r0
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <GPIO_SetupPin_Value+0xaa>
    19a4:	84 2b       	or	r24, r20
    19a6:	8c 93       	st	X, r24
    19a8:	8e c0       	rjmp	.+284    	; 0x1ac6 <GPIO_SetupPin_Value+0x1d4>
				}

				break;
			case PORTB_ID:
				if(pin_value ==LOGIC_LOW)
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	88 23       	and	r24, r24
    19ae:	a9 f4       	brne	.+42     	; 0x19da <GPIO_SetupPin_Value+0xe8>
				{
					CLEAR_BIT(PORTB,pin_num);
    19b0:	a8 e3       	ldi	r26, 0x38	; 56
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e8 e3       	ldi	r30, 0x38	; 56
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <GPIO_SetupPin_Value+0xdc>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <GPIO_SetupPin_Value+0xd8>
    19d2:	80 95       	com	r24
    19d4:	84 23       	and	r24, r20
    19d6:	8c 93       	st	X, r24
    19d8:	76 c0       	rjmp	.+236    	; 0x1ac6 <GPIO_SetupPin_Value+0x1d4>
				}
				else if(pin_value == LOGIC_HIGH)
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	09 f0       	breq	.+2      	; 0x19e2 <GPIO_SetupPin_Value+0xf0>
    19e0:	72 c0       	rjmp	.+228    	; 0x1ac6 <GPIO_SetupPin_Value+0x1d4>
				{
					SET_BIT(PORTB,pin_num);
    19e2:	a8 e3       	ldi	r26, 0x38	; 56
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e8 e3       	ldi	r30, 0x38	; 56
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	48 2f       	mov	r20, r24
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	02 2e       	mov	r0, r18
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <GPIO_SetupPin_Value+0x10e>
    19fc:	88 0f       	add	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	0a 94       	dec	r0
    1a02:	e2 f7       	brpl	.-8      	; 0x19fc <GPIO_SetupPin_Value+0x10a>
    1a04:	84 2b       	or	r24, r20
    1a06:	8c 93       	st	X, r24
    1a08:	5e c0       	rjmp	.+188    	; 0x1ac6 <GPIO_SetupPin_Value+0x1d4>
				}
				break;
			case PORTC_ID:
				if(pin_value ==LOGIC_LOW)
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	88 23       	and	r24, r24
    1a0e:	a9 f4       	brne	.+42     	; 0x1a3a <GPIO_SetupPin_Value+0x148>
				{
					CLEAR_BIT(PORTC,pin_num);
    1a10:	a5 e3       	ldi	r26, 0x35	; 53
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e5 e3       	ldi	r30, 0x35	; 53
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	02 2e       	mov	r0, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <GPIO_SetupPin_Value+0x13c>
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	0a 94       	dec	r0
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <GPIO_SetupPin_Value+0x138>
    1a32:	80 95       	com	r24
    1a34:	84 23       	and	r24, r20
    1a36:	8c 93       	st	X, r24
    1a38:	46 c0       	rjmp	.+140    	; 0x1ac6 <GPIO_SetupPin_Value+0x1d4>
				}
				else if(pin_value == LOGIC_HIGH)
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	81 30       	cpi	r24, 0x01	; 1
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <GPIO_SetupPin_Value+0x150>
    1a40:	42 c0       	rjmp	.+132    	; 0x1ac6 <GPIO_SetupPin_Value+0x1d4>
				{
					SET_BIT(PORTC,pin_num);
    1a42:	a5 e3       	ldi	r26, 0x35	; 53
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e5 e3       	ldi	r30, 0x35	; 53
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	48 2f       	mov	r20, r24
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	02 2e       	mov	r0, r18
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <GPIO_SetupPin_Value+0x16e>
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	0a 94       	dec	r0
    1a62:	e2 f7       	brpl	.-8      	; 0x1a5c <GPIO_SetupPin_Value+0x16a>
    1a64:	84 2b       	or	r24, r20
    1a66:	8c 93       	st	X, r24
    1a68:	2e c0       	rjmp	.+92     	; 0x1ac6 <GPIO_SetupPin_Value+0x1d4>
				}
				break;
			case PORTD_ID:
				if(pin_value ==LOGIC_LOW)
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	88 23       	and	r24, r24
    1a6e:	a9 f4       	brne	.+42     	; 0x1a9a <GPIO_SetupPin_Value+0x1a8>
				{
					CLEAR_BIT(PORTD,pin_num);
    1a70:	a2 e3       	ldi	r26, 0x32	; 50
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e2 e3       	ldi	r30, 0x32	; 50
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	48 2f       	mov	r20, r24
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	02 2e       	mov	r0, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <GPIO_SetupPin_Value+0x19c>
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	0a 94       	dec	r0
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <GPIO_SetupPin_Value+0x198>
    1a92:	80 95       	com	r24
    1a94:	84 23       	and	r24, r20
    1a96:	8c 93       	st	X, r24
    1a98:	16 c0       	rjmp	.+44     	; 0x1ac6 <GPIO_SetupPin_Value+0x1d4>
				}
				else if(pin_value == LOGIC_HIGH)
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	99 f4       	brne	.+38     	; 0x1ac6 <GPIO_SetupPin_Value+0x1d4>
				{
					SET_BIT(PORTD,pin_num);
    1aa0:	a2 e3       	ldi	r26, 0x32	; 50
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e2 e3       	ldi	r30, 0x32	; 50
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	48 2f       	mov	r20, r24
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	02 2e       	mov	r0, r18
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <GPIO_SetupPin_Value+0x1cc>
    1aba:	88 0f       	add	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	0a 94       	dec	r0
    1ac0:	e2 f7       	brpl	.-8      	; 0x1aba <GPIO_SetupPin_Value+0x1c8>
    1ac2:	84 2b       	or	r24, r20
    1ac4:	8c 93       	st	X, r24
				}
				break;

			}

}
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <GPIO_SetupPort_Value>:
void GPIO_SetupPort_Value(uint8 port_id,uint8 port_value)
{
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	00 d0       	rcall	.+0      	; 0x1adc <GPIO_SetupPort_Value+0x6>
    1adc:	00 d0       	rcall	.+0      	; 0x1ade <GPIO_SetupPort_Value+0x8>
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
    1ae2:	89 83       	std	Y+1, r24	; 0x01
    1ae4:	6a 83       	std	Y+2, r22	; 0x02
	if( port_id > NUM_OF_PORTS)
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	85 30       	cpi	r24, 0x05	; 5
    1aea:	90 f5       	brcc	.+100    	; 0x1b50 <GPIO_SetupPort_Value+0x7a>
	}
	else
	{


		switch(port_id)
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	3c 83       	std	Y+4, r19	; 0x04
    1af4:	2b 83       	std	Y+3, r18	; 0x03
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	9c 81       	ldd	r25, Y+4	; 0x04
    1afa:	81 30       	cpi	r24, 0x01	; 1
    1afc:	91 05       	cpc	r25, r1
    1afe:	d1 f0       	breq	.+52     	; 0x1b34 <GPIO_SetupPort_Value+0x5e>
    1b00:	2b 81       	ldd	r18, Y+3	; 0x03
    1b02:	3c 81       	ldd	r19, Y+4	; 0x04
    1b04:	22 30       	cpi	r18, 0x02	; 2
    1b06:	31 05       	cpc	r19, r1
    1b08:	2c f4       	brge	.+10     	; 0x1b14 <GPIO_SetupPort_Value+0x3e>
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	61 f0       	breq	.+24     	; 0x1b2a <GPIO_SetupPort_Value+0x54>
    1b12:	1e c0       	rjmp	.+60     	; 0x1b50 <GPIO_SetupPort_Value+0x7a>
    1b14:	2b 81       	ldd	r18, Y+3	; 0x03
    1b16:	3c 81       	ldd	r19, Y+4	; 0x04
    1b18:	22 30       	cpi	r18, 0x02	; 2
    1b1a:	31 05       	cpc	r19, r1
    1b1c:	81 f0       	breq	.+32     	; 0x1b3e <GPIO_SetupPort_Value+0x68>
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	9c 81       	ldd	r25, Y+4	; 0x04
    1b22:	83 30       	cpi	r24, 0x03	; 3
    1b24:	91 05       	cpc	r25, r1
    1b26:	81 f0       	breq	.+32     	; 0x1b48 <GPIO_SetupPort_Value+0x72>
    1b28:	13 c0       	rjmp	.+38     	; 0x1b50 <GPIO_SetupPort_Value+0x7a>
			{
			case PORTA_ID:
				PORTA=port_value;
    1b2a:	eb e3       	ldi	r30, 0x3B	; 59
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	80 83       	st	Z, r24
    1b32:	0e c0       	rjmp	.+28     	; 0x1b50 <GPIO_SetupPort_Value+0x7a>

				break;
			case PORTB_ID:
				PORTB=port_value;
    1b34:	e8 e3       	ldi	r30, 0x38	; 56
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	80 83       	st	Z, r24
    1b3c:	09 c0       	rjmp	.+18     	; 0x1b50 <GPIO_SetupPort_Value+0x7a>
				break;
			case PORTC_ID:
				PORTC=port_value;
    1b3e:	e5 e3       	ldi	r30, 0x35	; 53
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	80 83       	st	Z, r24
    1b46:	04 c0       	rjmp	.+8      	; 0x1b50 <GPIO_SetupPort_Value+0x7a>
				break;
			case PORTD_ID:
				PORTD=port_value;
    1b48:	e2 e3       	ldi	r30, 0x32	; 50
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	80 83       	st	Z, r24
				break;

			}
	}
}
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <GPIO_GetPin_Value>:
uint8 GPIO_GetPin_Value(uint8 port_id,uint8 pin_num)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <GPIO_GetPin_Value+0x6>
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <GPIO_GetPin_Value+0x8>
    1b66:	0f 92       	push	r0
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	8a 83       	std	Y+2, r24	; 0x02
    1b6e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 valu=0;
    1b70:	19 82       	std	Y+1, r1	; 0x01
	if(pin_num > NUM_OF_PINS || port_id > NUM_OF_PORTS)
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	89 30       	cpi	r24, 0x09	; 9
    1b76:	08 f0       	brcs	.+2      	; 0x1b7a <GPIO_GetPin_Value+0x1c>
    1b78:	6b c0       	rjmp	.+214    	; 0x1c50 <GPIO_GetPin_Value+0xf2>
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	85 30       	cpi	r24, 0x05	; 5
    1b7e:	08 f0       	brcs	.+2      	; 0x1b82 <GPIO_GetPin_Value+0x24>
    1b80:	67 c0       	rjmp	.+206    	; 0x1c50 <GPIO_GetPin_Value+0xf2>

	}
   else
	{

	switch(port_id)
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	3d 83       	std	Y+5, r19	; 0x05
    1b8a:	2c 83       	std	Y+4, r18	; 0x04
    1b8c:	4c 81       	ldd	r20, Y+4	; 0x04
    1b8e:	5d 81       	ldd	r21, Y+5	; 0x05
    1b90:	41 30       	cpi	r20, 0x01	; 1
    1b92:	51 05       	cpc	r21, r1
    1b94:	41 f1       	breq	.+80     	; 0x1be6 <GPIO_GetPin_Value+0x88>
    1b96:	8c 81       	ldd	r24, Y+4	; 0x04
    1b98:	9d 81       	ldd	r25, Y+5	; 0x05
    1b9a:	82 30       	cpi	r24, 0x02	; 2
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	34 f4       	brge	.+12     	; 0x1bac <GPIO_GetPin_Value+0x4e>
    1ba0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ba2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ba4:	21 15       	cp	r18, r1
    1ba6:	31 05       	cpc	r19, r1
    1ba8:	61 f0       	breq	.+24     	; 0x1bc2 <GPIO_GetPin_Value+0x64>
    1baa:	52 c0       	rjmp	.+164    	; 0x1c50 <GPIO_GetPin_Value+0xf2>
    1bac:	4c 81       	ldd	r20, Y+4	; 0x04
    1bae:	5d 81       	ldd	r21, Y+5	; 0x05
    1bb0:	42 30       	cpi	r20, 0x02	; 2
    1bb2:	51 05       	cpc	r21, r1
    1bb4:	51 f1       	breq	.+84     	; 0x1c0a <GPIO_GetPin_Value+0xac>
    1bb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bba:	83 30       	cpi	r24, 0x03	; 3
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	b9 f1       	breq	.+110    	; 0x1c2e <GPIO_GetPin_Value+0xd0>
    1bc0:	47 c0       	rjmp	.+142    	; 0x1c50 <GPIO_GetPin_Value+0xf2>
		{
		case PORTA_ID:
			valu=GET_BIT(PINA,pin_num);
    1bc2:	e9 e3       	ldi	r30, 0x39	; 57
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	28 2f       	mov	r18, r24
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	88 2f       	mov	r24, r24
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	a9 01       	movw	r20, r18
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <GPIO_GetPin_Value+0x7c>
    1bd6:	55 95       	asr	r21
    1bd8:	47 95       	ror	r20
    1bda:	8a 95       	dec	r24
    1bdc:	e2 f7       	brpl	.-8      	; 0x1bd6 <GPIO_GetPin_Value+0x78>
    1bde:	ca 01       	movw	r24, r20
    1be0:	81 70       	andi	r24, 0x01	; 1
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	35 c0       	rjmp	.+106    	; 0x1c50 <GPIO_GetPin_Value+0xf2>

			break;
		case PORTB_ID:
			valu= GET_BIT(PINB,pin_num);
    1be6:	e6 e3       	ldi	r30, 0x36	; 54
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	88 2f       	mov	r24, r24
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	a9 01       	movw	r20, r18
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <GPIO_GetPin_Value+0xa0>
    1bfa:	55 95       	asr	r21
    1bfc:	47 95       	ror	r20
    1bfe:	8a 95       	dec	r24
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <GPIO_GetPin_Value+0x9c>
    1c02:	ca 01       	movw	r24, r20
    1c04:	81 70       	andi	r24, 0x01	; 1
    1c06:	89 83       	std	Y+1, r24	; 0x01
    1c08:	23 c0       	rjmp	.+70     	; 0x1c50 <GPIO_GetPin_Value+0xf2>
			break;
		case PORTC_ID:
			valu= GET_BIT(PINC,pin_num);
    1c0a:	e3 e3       	ldi	r30, 0x33	; 51
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	88 2f       	mov	r24, r24
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	a9 01       	movw	r20, r18
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <GPIO_GetPin_Value+0xc4>
    1c1e:	55 95       	asr	r21
    1c20:	47 95       	ror	r20
    1c22:	8a 95       	dec	r24
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <GPIO_GetPin_Value+0xc0>
    1c26:	ca 01       	movw	r24, r20
    1c28:	81 70       	andi	r24, 0x01	; 1
    1c2a:	89 83       	std	Y+1, r24	; 0x01
    1c2c:	11 c0       	rjmp	.+34     	; 0x1c50 <GPIO_GetPin_Value+0xf2>
			break;
		case PORTD_ID:
			valu= GET_BIT(PIND,pin_num);
    1c2e:	e0 e3       	ldi	r30, 0x30	; 48
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	88 2f       	mov	r24, r24
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	a9 01       	movw	r20, r18
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <GPIO_GetPin_Value+0xe8>
    1c42:	55 95       	asr	r21
    1c44:	47 95       	ror	r20
    1c46:	8a 95       	dec	r24
    1c48:	e2 f7       	brpl	.-8      	; 0x1c42 <GPIO_GetPin_Value+0xe4>
    1c4a:	ca 01       	movw	r24, r20
    1c4c:	81 70       	andi	r24, 0x01	; 1
    1c4e:	89 83       	std	Y+1, r24	; 0x01
			break;

		}

}
	return valu;
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <GPIO_GetPort_Value>:
uint8 GPIO_GetPort_Value(uint8 port_id)
{
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <GPIO_GetPort_Value+0x6>
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <GPIO_GetPort_Value+0x8>
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 pin=0x00;
    1c70:	19 82       	std	Y+1, r1	; 0x01
	if( port_id > NUM_OF_PORTS)
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	85 30       	cpi	r24, 0x05	; 5
    1c76:	90 f5       	brcc	.+100    	; 0x1cdc <GPIO_GetPort_Value+0x7a>

	}
	else
	{

		switch(port_id)
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	3c 83       	std	Y+4, r19	; 0x04
    1c80:	2b 83       	std	Y+3, r18	; 0x03
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	81 30       	cpi	r24, 0x01	; 1
    1c88:	91 05       	cpc	r25, r1
    1c8a:	d1 f0       	breq	.+52     	; 0x1cc0 <GPIO_GetPort_Value+0x5e>
    1c8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c90:	22 30       	cpi	r18, 0x02	; 2
    1c92:	31 05       	cpc	r19, r1
    1c94:	2c f4       	brge	.+10     	; 0x1ca0 <GPIO_GetPort_Value+0x3e>
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	61 f0       	breq	.+24     	; 0x1cb6 <GPIO_GetPort_Value+0x54>
    1c9e:	1e c0       	rjmp	.+60     	; 0x1cdc <GPIO_GetPort_Value+0x7a>
    1ca0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca4:	22 30       	cpi	r18, 0x02	; 2
    1ca6:	31 05       	cpc	r19, r1
    1ca8:	81 f0       	breq	.+32     	; 0x1cca <GPIO_GetPort_Value+0x68>
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	9c 81       	ldd	r25, Y+4	; 0x04
    1cae:	83 30       	cpi	r24, 0x03	; 3
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	81 f0       	breq	.+32     	; 0x1cd4 <GPIO_GetPort_Value+0x72>
    1cb4:	13 c0       	rjmp	.+38     	; 0x1cdc <GPIO_GetPort_Value+0x7a>
			{
			case PORTA_ID:
				pin= PINA;
    1cb6:	e9 e3       	ldi	r30, 0x39	; 57
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	0e c0       	rjmp	.+28     	; 0x1cdc <GPIO_GetPort_Value+0x7a>
				break;
			case PORTB_ID:
				pin= PINB;
    1cc0:	e6 e3       	ldi	r30, 0x36	; 54
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	09 c0       	rjmp	.+18     	; 0x1cdc <GPIO_GetPort_Value+0x7a>
				break;
			case PORTC_ID:
				pin= PINC;
    1cca:	e3 e3       	ldi	r30, 0x33	; 51
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	04 c0       	rjmp	.+8      	; 0x1cdc <GPIO_GetPort_Value+0x7a>
				break;
			case PORTD_ID:
				pin= PIND;
    1cd4:	e0 e3       	ldi	r30, 0x30	; 48
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
	}
	return pin;
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <GPIO_TogglePin_Value>:
void GPIO_TogglePin_Value(uint8 port_id,uint8 pin_num)
{
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <GPIO_TogglePin_Value+0x6>
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <GPIO_TogglePin_Value+0x8>
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	89 83       	std	Y+1, r24	; 0x01
    1cfa:	6a 83       	std	Y+2, r22	; 0x02
	if(pin_num > NUM_OF_PINS || port_id > NUM_OF_PORTS)
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	89 30       	cpi	r24, 0x09	; 9
    1d00:	08 f0       	brcs	.+2      	; 0x1d04 <GPIO_TogglePin_Value+0x18>
    1d02:	72 c0       	rjmp	.+228    	; 0x1de8 <GPIO_TogglePin_Value+0xfc>
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	85 30       	cpi	r24, 0x05	; 5
    1d08:	08 f0       	brcs	.+2      	; 0x1d0c <GPIO_TogglePin_Value+0x20>
    1d0a:	6e c0       	rjmp	.+220    	; 0x1de8 <GPIO_TogglePin_Value+0xfc>
	{

	}
	else
	{
		switch(port_id)
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	3c 83       	std	Y+4, r19	; 0x04
    1d14:	2b 83       	std	Y+3, r18	; 0x03
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	49 f1       	breq	.+82     	; 0x1d72 <GPIO_TogglePin_Value+0x86>
    1d20:	2b 81       	ldd	r18, Y+3	; 0x03
    1d22:	3c 81       	ldd	r19, Y+4	; 0x04
    1d24:	22 30       	cpi	r18, 0x02	; 2
    1d26:	31 05       	cpc	r19, r1
    1d28:	2c f4       	brge	.+10     	; 0x1d34 <GPIO_TogglePin_Value+0x48>
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	61 f0       	breq	.+24     	; 0x1d4a <GPIO_TogglePin_Value+0x5e>
    1d32:	5a c0       	rjmp	.+180    	; 0x1de8 <GPIO_TogglePin_Value+0xfc>
    1d34:	2b 81       	ldd	r18, Y+3	; 0x03
    1d36:	3c 81       	ldd	r19, Y+4	; 0x04
    1d38:	22 30       	cpi	r18, 0x02	; 2
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	71 f1       	breq	.+92     	; 0x1d9a <GPIO_TogglePin_Value+0xae>
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	9c 81       	ldd	r25, Y+4	; 0x04
    1d42:	83 30       	cpi	r24, 0x03	; 3
    1d44:	91 05       	cpc	r25, r1
    1d46:	e9 f1       	breq	.+122    	; 0x1dc2 <GPIO_TogglePin_Value+0xd6>
    1d48:	4f c0       	rjmp	.+158    	; 0x1de8 <GPIO_TogglePin_Value+0xfc>
		{
			case PORTA_ID:
				TOGGLE_BIT(PORTA,pin_num);
    1d4a:	ab e3       	ldi	r26, 0x3B	; 59
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	eb e3       	ldi	r30, 0x3B	; 59
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	48 2f       	mov	r20, r24
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	28 2f       	mov	r18, r24
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	02 2e       	mov	r0, r18
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <GPIO_TogglePin_Value+0x7c>
    1d64:	88 0f       	add	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	0a 94       	dec	r0
    1d6a:	e2 f7       	brpl	.-8      	; 0x1d64 <GPIO_TogglePin_Value+0x78>
    1d6c:	84 27       	eor	r24, r20
    1d6e:	8c 93       	st	X, r24
    1d70:	3b c0       	rjmp	.+118    	; 0x1de8 <GPIO_TogglePin_Value+0xfc>
				break;

			case PORTB_ID:
				TOGGLE_BIT(PORTB,pin_num);
    1d72:	a8 e3       	ldi	r26, 0x38	; 56
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e8 e3       	ldi	r30, 0x38	; 56
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	48 2f       	mov	r20, r24
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	02 2e       	mov	r0, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <GPIO_TogglePin_Value+0xa4>
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	0a 94       	dec	r0
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <GPIO_TogglePin_Value+0xa0>
    1d94:	84 27       	eor	r24, r20
    1d96:	8c 93       	st	X, r24
    1d98:	27 c0       	rjmp	.+78     	; 0x1de8 <GPIO_TogglePin_Value+0xfc>
				break;

			case PORTC_ID:
				TOGGLE_BIT(PORTC,pin_num);
    1d9a:	a5 e3       	ldi	r26, 0x35	; 53
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e5 e3       	ldi	r30, 0x35	; 53
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	48 2f       	mov	r20, r24
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	02 2e       	mov	r0, r18
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <GPIO_TogglePin_Value+0xcc>
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	0a 94       	dec	r0
    1dba:	e2 f7       	brpl	.-8      	; 0x1db4 <GPIO_TogglePin_Value+0xc8>
    1dbc:	84 27       	eor	r24, r20
    1dbe:	8c 93       	st	X, r24
    1dc0:	13 c0       	rjmp	.+38     	; 0x1de8 <GPIO_TogglePin_Value+0xfc>
				break;

			case PORTD_ID:
				TOGGLE_BIT(PORTD,pin_num);
    1dc2:	a2 e3       	ldi	r26, 0x32	; 50
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e2 e3       	ldi	r30, 0x32	; 50
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	48 2f       	mov	r20, r24
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	02 2e       	mov	r0, r18
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <GPIO_TogglePin_Value+0xf4>
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	0a 94       	dec	r0
    1de2:	e2 f7       	brpl	.-8      	; 0x1ddc <GPIO_TogglePin_Value+0xf0>
    1de4:	84 27       	eor	r24, r20
    1de6:	8c 93       	st	X, r24
				break;

			}
	}

}
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <GINT_Enable>:
#include "GINT_Config.h"



void GINT_Enable()
{
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,SREG_I_BIT);
    1dfe:	af e5       	ldi	r26, 0x5F	; 95
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	ef e5       	ldi	r30, 0x5F	; 95
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	80 68       	ori	r24, 0x80	; 128
    1e0a:	8c 93       	st	X, r24
}
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <GINT_Disable>:
void GINT_Disable()
{
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG_REG,SREG_I_BIT);
    1e1a:	af e5       	ldi	r26, 0x5F	; 95
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	ef e5       	ldi	r30, 0x5F	; 95
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	8f 77       	andi	r24, 0x7F	; 127
    1e26:	8c 93       	st	X, r24
}
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <EXTI_initINT1>:
void (*callback_Ptr_INT0)(void)=NULL;
void (*callback_Ptr_INT1)(void)=NULL;
void (*callback_Ptr_INT2)(void)=NULL;

void EXTI_initINT1(interupt_sense_control control)
{
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	0f 92       	push	r0
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	89 83       	std	Y+1, r24	; 0x01
	GPIO_SetupPin_Direction(PORTD_ID, EXINT1_PIN, PIN_INPUT);
    1e3a:	83 e0       	ldi	r24, 0x03	; 3
    1e3c:	63 e0       	ldi	r22, 0x03	; 3
    1e3e:	40 e0       	ldi	r20, 0x00	; 0
    1e40:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Value(PORTD_ID, EXINT1_PIN, LOGIC_HIGH);
    1e44:	83 e0       	ldi	r24, 0x03	; 3
    1e46:	63 e0       	ldi	r22, 0x03	; 3
    1e48:	41 e0       	ldi	r20, 0x01	; 1
    1e4a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>

	if(control ==rising_edge)
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	81 30       	cpi	r24, 0x01	; 1
    1e52:	79 f4       	brne	.+30     	; 0x1e72 <EXTI_initINT1+0x44>
	{
		SET_BIT(MCUCR_REG,MCUCR_ISC10);
    1e54:	a5 e5       	ldi	r26, 0x55	; 85
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e5 e5       	ldi	r30, 0x55	; 85
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	84 60       	ori	r24, 0x04	; 4
    1e60:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,MCUCR_ISC11);
    1e62:	a5 e5       	ldi	r26, 0x55	; 85
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e5 e5       	ldi	r30, 0x55	; 85
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	88 60       	ori	r24, 0x08	; 8
    1e6e:	8c 93       	st	X, r24
    1e70:	11 c0       	rjmp	.+34     	; 0x1e94 <EXTI_initINT1+0x66>
	}
	else if(control==falling_edge)
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	88 23       	and	r24, r24
    1e76:	71 f4       	brne	.+28     	; 0x1e94 <EXTI_initINT1+0x66>
	{
		CLEAR_BIT(MCUCR_REG,MCUCR_ISC10);
    1e78:	a5 e5       	ldi	r26, 0x55	; 85
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e5 e5       	ldi	r30, 0x55	; 85
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	8b 7f       	andi	r24, 0xFB	; 251
    1e84:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,MCUCR_ISC11);
    1e86:	a5 e5       	ldi	r26, 0x55	; 85
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	e5 e5       	ldi	r30, 0x55	; 85
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	88 60       	ori	r24, 0x08	; 8
    1e92:	8c 93       	st	X, r24
	}
}
    1e94:	0f 90       	pop	r0
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	08 95       	ret

00001e9c <EXTI_initINT0>:
void EXTI_initINT0(interupt_sense_control control)
{
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	0f 92       	push	r0
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	89 83       	std	Y+1, r24	; 0x01
	GPIO_SetupPin_Direction(PORTD_ID, EXINT0_PIN, PIN_INPUT);
    1ea8:	83 e0       	ldi	r24, 0x03	; 3
    1eaa:	62 e0       	ldi	r22, 0x02	; 2
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Value(PORTD_ID, EXINT0_PIN, LOGIC_HIGH);
    1eb2:	83 e0       	ldi	r24, 0x03	; 3
    1eb4:	62 e0       	ldi	r22, 0x02	; 2
    1eb6:	41 e0       	ldi	r20, 0x01	; 1
    1eb8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
	if(control ==rising_edge)
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	81 30       	cpi	r24, 0x01	; 1
    1ec0:	79 f4       	brne	.+30     	; 0x1ee0 <EXTI_initINT0+0x44>
	{
		SET_BIT(MCUCR_REG,MCUCR_ISC00);
    1ec2:	a5 e5       	ldi	r26, 0x55	; 85
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e5 e5       	ldi	r30, 0x55	; 85
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	81 60       	ori	r24, 0x01	; 1
    1ece:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,MCUCR_ISC01);
    1ed0:	a5 e5       	ldi	r26, 0x55	; 85
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e5 e5       	ldi	r30, 0x55	; 85
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	82 60       	ori	r24, 0x02	; 2
    1edc:	8c 93       	st	X, r24
    1ede:	11 c0       	rjmp	.+34     	; 0x1f02 <EXTI_initINT0+0x66>

	}
	else if(control==falling_edge)
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	88 23       	and	r24, r24
    1ee4:	71 f4       	brne	.+28     	; 0x1f02 <EXTI_initINT0+0x66>
	{
		CLEAR_BIT(MCUCR_REG,MCUCR_ISC00);
    1ee6:	a5 e5       	ldi	r26, 0x55	; 85
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e5 e5       	ldi	r30, 0x55	; 85
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	8e 7f       	andi	r24, 0xFE	; 254
    1ef2:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,MCUCR_ISC01);
    1ef4:	a5 e5       	ldi	r26, 0x55	; 85
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e5 e5       	ldi	r30, 0x55	; 85
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	82 60       	ori	r24, 0x02	; 2
    1f00:	8c 93       	st	X, r24
	}

}
    1f02:	0f 90       	pop	r0
    1f04:	cf 91       	pop	r28
    1f06:	df 91       	pop	r29
    1f08:	08 95       	ret

00001f0a <EXTI_initINT2>:
void EXTI_initINT2(interupt_sense_control control)
{
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	0f 92       	push	r0
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
    1f14:	89 83       	std	Y+1, r24	; 0x01
	GPIO_SetupPin_Direction(PORTD_ID, EXINT2_PIN, PIN_INPUT);
    1f16:	83 e0       	ldi	r24, 0x03	; 3
    1f18:	62 e0       	ldi	r22, 0x02	; 2
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Value(PORTD_ID, EXINT2_PIN, LOGIC_HIGH);
    1f20:	83 e0       	ldi	r24, 0x03	; 3
    1f22:	62 e0       	ldi	r22, 0x02	; 2
    1f24:	41 e0       	ldi	r20, 0x01	; 1
    1f26:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
	if(control ==rising_edge)
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	81 30       	cpi	r24, 0x01	; 1
    1f2e:	41 f4       	brne	.+16     	; 0x1f40 <EXTI_initINT2+0x36>
	{
		SET_BIT(MCUCSR_REG,MCUCSR_ISC2);
    1f30:	a5 e4       	ldi	r26, 0x45	; 69
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e5 e4       	ldi	r30, 0x45	; 69
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	80 64       	ori	r24, 0x40	; 64
    1f3c:	8c 93       	st	X, r24
    1f3e:	0a c0       	rjmp	.+20     	; 0x1f54 <EXTI_initINT2+0x4a>
	}
	else if(control==falling_edge)
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	88 23       	and	r24, r24
    1f44:	39 f4       	brne	.+14     	; 0x1f54 <EXTI_initINT2+0x4a>
	{
		CLEAR_BIT(MCUCSR_REG,MCUCSR_ISC2);
    1f46:	a5 e4       	ldi	r26, 0x45	; 69
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e5 e4       	ldi	r30, 0x45	; 69
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	8f 7b       	andi	r24, 0xBF	; 191
    1f52:	8c 93       	st	X, r24
	}
}
    1f54:	0f 90       	pop	r0
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <EXTI_Enable>:

void EXTI_Enable(GINT_Control GControl, void (*callbackPtr)(void), interupt_sense_control control)
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	00 d0       	rcall	.+0      	; 0x1f62 <EXTI_Enable+0x6>
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <EXTI_Enable+0x8>
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	7b 83       	std	Y+3, r23	; 0x03
    1f6c:	6a 83       	std	Y+2, r22	; 0x02
    1f6e:	4c 83       	std	Y+4, r20	; 0x04
	if(GControl==INT0)
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	81 30       	cpi	r24, 0x01	; 1
    1f74:	89 f4       	brne	.+34     	; 0x1f98 <EXTI_Enable+0x3c>
	{
		SET_BIT(GICR_REG,GICR_INT0);
    1f76:	ab e5       	ldi	r26, 0x5B	; 91
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	eb e5       	ldi	r30, 0x5B	; 91
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	80 64       	ori	r24, 0x40	; 64
    1f82:	8c 93       	st	X, r24
		callback_Ptr_INT0=callbackPtr;
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	9b 81       	ldd	r25, Y+3	; 0x03
    1f88:	90 93 85 00 	sts	0x0085, r25
    1f8c:	80 93 84 00 	sts	0x0084, r24
		EXTI_initINT0(control);
    1f90:	8c 81       	ldd	r24, Y+4	; 0x04
    1f92:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <EXTI_initINT0>
    1f96:	27 c0       	rjmp	.+78     	; 0x1fe6 <EXTI_Enable+0x8a>
	}
	else if(GControl==INT1)
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	88 23       	and	r24, r24
    1f9c:	89 f4       	brne	.+34     	; 0x1fc0 <EXTI_Enable+0x64>
	{
		SET_BIT(GICR_REG,GICR_INT1);
    1f9e:	ab e5       	ldi	r26, 0x5B	; 91
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	eb e5       	ldi	r30, 0x5B	; 91
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	80 68       	ori	r24, 0x80	; 128
    1faa:	8c 93       	st	X, r24
		callback_Ptr_INT1=callbackPtr;
    1fac:	8a 81       	ldd	r24, Y+2	; 0x02
    1fae:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb0:	90 93 87 00 	sts	0x0087, r25
    1fb4:	80 93 86 00 	sts	0x0086, r24
		EXTI_initINT1(control);
    1fb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fba:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <EXTI_initINT1>
    1fbe:	13 c0       	rjmp	.+38     	; 0x1fe6 <EXTI_Enable+0x8a>
	}
	else if(GControl==INT2)
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	82 30       	cpi	r24, 0x02	; 2
    1fc4:	81 f4       	brne	.+32     	; 0x1fe6 <EXTI_Enable+0x8a>
	{
		SET_BIT(GICR_REG,GICR_INT2);
    1fc6:	ab e5       	ldi	r26, 0x5B	; 91
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	eb e5       	ldi	r30, 0x5B	; 91
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	80 62       	ori	r24, 0x20	; 32
    1fd2:	8c 93       	st	X, r24
		callback_Ptr_INT2=callbackPtr;
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd8:	90 93 89 00 	sts	0x0089, r25
    1fdc:	80 93 88 00 	sts	0x0088, r24
		EXTI_initINT2(control);
    1fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe2:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <EXTI_initINT2>
	}
}
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <Read_flags>:

uint8 Read_flags(GINT_Control GControl)
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <Read_flags+0x6>
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 flag='3';
    2000:	83 e3       	ldi	r24, 0x33	; 51
    2002:	89 83       	std	Y+1, r24	; 0x01
	if(GControl==INT0)
    2004:	8a 81       	ldd	r24, Y+2	; 0x02
    2006:	81 30       	cpi	r24, 0x01	; 1
    2008:	51 f4       	brne	.+20     	; 0x201e <Read_flags+0x2a>
	{
		flag=GET_BIT(GIFR_REG,GIFR_INTF0);
    200a:	ea e5       	ldi	r30, 0x5A	; 90
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	82 95       	swap	r24
    2012:	86 95       	lsr	r24
    2014:	86 95       	lsr	r24
    2016:	83 70       	andi	r24, 0x03	; 3
    2018:	81 70       	andi	r24, 0x01	; 1
    201a:	89 83       	std	Y+1, r24	; 0x01
    201c:	16 c0       	rjmp	.+44     	; 0x204a <Read_flags+0x56>
	}
	else if(GControl==INT1)
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	88 23       	and	r24, r24
    2022:	41 f4       	brne	.+16     	; 0x2034 <Read_flags+0x40>
	{
		flag=GET_BIT(GIFR_REG,GIFR_INTF1);
    2024:	ea e5       	ldi	r30, 0x5A	; 90
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	88 1f       	adc	r24, r24
    202c:	88 27       	eor	r24, r24
    202e:	88 1f       	adc	r24, r24
    2030:	89 83       	std	Y+1, r24	; 0x01
    2032:	0b c0       	rjmp	.+22     	; 0x204a <Read_flags+0x56>
	}
	else if(GControl==INT2)
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	82 30       	cpi	r24, 0x02	; 2
    2038:	41 f4       	brne	.+16     	; 0x204a <Read_flags+0x56>
	{
		flag=GET_BIT(GIFR_REG,GIFR_INTF2);
    203a:	ea e5       	ldi	r30, 0x5A	; 90
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	82 95       	swap	r24
    2042:	86 95       	lsr	r24
    2044:	87 70       	andi	r24, 0x07	; 7
    2046:	81 70       	andi	r24, 0x01	; 1
    2048:	89 83       	std	Y+1, r24	; 0x01
	}
	return flag ;
    204a:	89 81       	ldd	r24, Y+1	; 0x01
}
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <__vector_1>:



void __vector_1(void)__attribute__((signal)); // command to the compiler
void __vector_1(void)
{
    2056:	1f 92       	push	r1
    2058:	0f 92       	push	r0
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	0f 92       	push	r0
    205e:	11 24       	eor	r1, r1
    2060:	2f 93       	push	r18
    2062:	3f 93       	push	r19
    2064:	4f 93       	push	r20
    2066:	5f 93       	push	r21
    2068:	6f 93       	push	r22
    206a:	7f 93       	push	r23
    206c:	8f 93       	push	r24
    206e:	9f 93       	push	r25
    2070:	af 93       	push	r26
    2072:	bf 93       	push	r27
    2074:	ef 93       	push	r30
    2076:	ff 93       	push	r31
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
	if(callback_Ptr_INT0 !=NULL)
    2080:	80 91 84 00 	lds	r24, 0x0084
    2084:	90 91 85 00 	lds	r25, 0x0085
    2088:	00 97       	sbiw	r24, 0x00	; 0
    208a:	29 f0       	breq	.+10     	; 0x2096 <__vector_1+0x40>
	{
		callback_Ptr_INT0();
    208c:	e0 91 84 00 	lds	r30, 0x0084
    2090:	f0 91 85 00 	lds	r31, 0x0085
    2094:	09 95       	icall
	}
}
    2096:	cf 91       	pop	r28
    2098:	df 91       	pop	r29
    209a:	ff 91       	pop	r31
    209c:	ef 91       	pop	r30
    209e:	bf 91       	pop	r27
    20a0:	af 91       	pop	r26
    20a2:	9f 91       	pop	r25
    20a4:	8f 91       	pop	r24
    20a6:	7f 91       	pop	r23
    20a8:	6f 91       	pop	r22
    20aa:	5f 91       	pop	r21
    20ac:	4f 91       	pop	r20
    20ae:	3f 91       	pop	r19
    20b0:	2f 91       	pop	r18
    20b2:	0f 90       	pop	r0
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	0f 90       	pop	r0
    20b8:	1f 90       	pop	r1
    20ba:	18 95       	reti

000020bc <__vector_2>:

void __vector_2(void)__attribute__((signal));
void __vector_2(void)
{
    20bc:	1f 92       	push	r1
    20be:	0f 92       	push	r0
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	0f 92       	push	r0
    20c4:	11 24       	eor	r1, r1
    20c6:	2f 93       	push	r18
    20c8:	3f 93       	push	r19
    20ca:	4f 93       	push	r20
    20cc:	5f 93       	push	r21
    20ce:	6f 93       	push	r22
    20d0:	7f 93       	push	r23
    20d2:	8f 93       	push	r24
    20d4:	9f 93       	push	r25
    20d6:	af 93       	push	r26
    20d8:	bf 93       	push	r27
    20da:	ef 93       	push	r30
    20dc:	ff 93       	push	r31
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
	if(callback_Ptr_INT1 !=NULL)
    20e6:	80 91 86 00 	lds	r24, 0x0086
    20ea:	90 91 87 00 	lds	r25, 0x0087
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	29 f0       	breq	.+10     	; 0x20fc <__vector_2+0x40>
	{
		callback_Ptr_INT1();
    20f2:	e0 91 86 00 	lds	r30, 0x0086
    20f6:	f0 91 87 00 	lds	r31, 0x0087
    20fa:	09 95       	icall
	}
}
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	ff 91       	pop	r31
    2102:	ef 91       	pop	r30
    2104:	bf 91       	pop	r27
    2106:	af 91       	pop	r26
    2108:	9f 91       	pop	r25
    210a:	8f 91       	pop	r24
    210c:	7f 91       	pop	r23
    210e:	6f 91       	pop	r22
    2110:	5f 91       	pop	r21
    2112:	4f 91       	pop	r20
    2114:	3f 91       	pop	r19
    2116:	2f 91       	pop	r18
    2118:	0f 90       	pop	r0
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	0f 90       	pop	r0
    211e:	1f 90       	pop	r1
    2120:	18 95       	reti

00002122 <__vector_3>:

void __vector_3(void)__attribute__((signal));
void __vector_3(void)
{
    2122:	1f 92       	push	r1
    2124:	0f 92       	push	r0
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	0f 92       	push	r0
    212a:	11 24       	eor	r1, r1
    212c:	2f 93       	push	r18
    212e:	3f 93       	push	r19
    2130:	4f 93       	push	r20
    2132:	5f 93       	push	r21
    2134:	6f 93       	push	r22
    2136:	7f 93       	push	r23
    2138:	8f 93       	push	r24
    213a:	9f 93       	push	r25
    213c:	af 93       	push	r26
    213e:	bf 93       	push	r27
    2140:	ef 93       	push	r30
    2142:	ff 93       	push	r31
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
	if(callback_Ptr_INT2 !=NULL)
    214c:	80 91 88 00 	lds	r24, 0x0088
    2150:	90 91 89 00 	lds	r25, 0x0089
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	29 f0       	breq	.+10     	; 0x2162 <__vector_3+0x40>
	{
		callback_Ptr_INT2();
    2158:	e0 91 88 00 	lds	r30, 0x0088
    215c:	f0 91 89 00 	lds	r31, 0x0089
    2160:	09 95       	icall
	}
}
    2162:	cf 91       	pop	r28
    2164:	df 91       	pop	r29
    2166:	ff 91       	pop	r31
    2168:	ef 91       	pop	r30
    216a:	bf 91       	pop	r27
    216c:	af 91       	pop	r26
    216e:	9f 91       	pop	r25
    2170:	8f 91       	pop	r24
    2172:	7f 91       	pop	r23
    2174:	6f 91       	pop	r22
    2176:	5f 91       	pop	r21
    2178:	4f 91       	pop	r20
    217a:	3f 91       	pop	r19
    217c:	2f 91       	pop	r18
    217e:	0f 90       	pop	r0
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	0f 90       	pop	r0
    2184:	1f 90       	pop	r1
    2186:	18 95       	reti

00002188 <ADC_init>:
/** ======================= Defining global variables ======================= */
void (*ADC_callBack_ptr)(void) = NULL;
/** ========================================================================= */

void ADC_init(void)
{
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
	/* Set the ADC VREF */
	ADMUX_REG->REF=ADC_VOLTAGE_REFERENCE;
    2190:	e7 e2       	ldi	r30, 0x27	; 39
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	8f 73       	andi	r24, 0x3F	; 63
    2198:	80 64       	ori	r24, 0x40	; 64
    219a:	80 83       	st	Z, r24

	/* Enable/Disable the ADC left adjust */
#if	(ADC_LEFT_ADJUST == 1)
	ADMUX_REG->ADLAR = LeftAdjustResult;
#else
	ADMUX_REG->ADLAR = RightAdjustResult;
    219c:	e7 e2       	ldi	r30, 0x27	; 39
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	8f 7d       	andi	r24, 0xDF	; 223
    21a4:	80 83       	st	Z, r24
#endif

	/* Enable/Disable the ADC Auto trigger mode (ADATE)*/
#if (ADC_AUTO_TRIGGER_ENABLE == AutoTriggered)
	/* Enable the ADC Auto trigger mode */
	ADCSRA_REG->ADATE = AutoTriggered;
    21a6:	e6 e2       	ldi	r30, 0x26	; 38
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	80 62       	ori	r24, 0x20	; 32
    21ae:	80 83       	st	Z, r24

	/* Set the Auto trigger mode source (ADTS)*/
	SFIOR_REG->ADTS = ADC_AUTO_TRIG_SOURCE;
    21b0:	e0 e5       	ldi	r30, 0x50	; 80
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	8f 71       	andi	r24, 0x1F	; 31
    21b8:	80 83       	st	Z, r24
#else
	ADCSRA_REG->ADATE = DisableAutoTriggered;
#endif

	/* Set the ADC clock division */
	ADCSRA_REG->ADPS = ADC_PRESCALER_FACTOR;
    21ba:	e6 e2       	ldi	r30, 0x26	; 38
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	88 7f       	andi	r24, 0xF8	; 248
    21c2:	86 60       	ori	r24, 0x06	; 6
    21c4:	80 83       	st	Z, r24

	/* Enable the ADC */

	ADCSRA_REG->ADEN = 1;
    21c6:	e6 e2       	ldi	r30, 0x26	; 38
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	80 68       	ori	r24, 0x80	; 128
    21ce:	80 83       	st	Z, r24
}
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <ADC_selectChannel>:


void ADC_selectChannel(ADC_channel Channel)
{
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	0f 92       	push	r0
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	89 83       	std	Y+1, r24	; 0x01
	/* Set the channel selection */
	ADMUX_REG->MUX = Channel;
    21e2:	e7 e2       	ldi	r30, 0x27	; 39
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	8f 71       	andi	r24, 0x1F	; 31
    21ea:	98 2f       	mov	r25, r24
    21ec:	9f 71       	andi	r25, 0x1F	; 31
    21ee:	80 81       	ld	r24, Z
    21f0:	80 7e       	andi	r24, 0xE0	; 224
    21f2:	89 2b       	or	r24, r25
    21f4:	80 83       	st	Z, r24
}
    21f6:	0f 90       	pop	r0
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <ADC_startConversionPollingMode>:

void ADC_startConversionPollingMode(void)
{
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
	/* Make sure the ADC Interrupt is disabled */
	if(ADCSRA_REG->ADIE == 1)
    2206:	e6 e2       	ldi	r30, 0x26	; 38
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	88 70       	andi	r24, 0x08	; 8
    220e:	88 23       	and	r24, r24
    2210:	51 f0       	breq	.+20     	; 0x2226 <ADC_startConversionPollingMode+0x28>
	{
		ADCSRA_REG->ADIF = 1;	// Clear the ADC Interrupt flag (ADIF)
    2212:	e6 e2       	ldi	r30, 0x26	; 38
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	80 61       	ori	r24, 0x10	; 16
    221a:	80 83       	st	Z, r24
		ADCSRA_REG->ADIE = 0;	// Clear ADIE
    221c:	e6 e2       	ldi	r30, 0x26	; 38
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	87 7f       	andi	r24, 0xF7	; 247
    2224:	80 83       	st	Z, r24
	}

	/* Start the ADC conversion */
	ADC_startConversion();
    2226:	0e 94 1e 11 	call	0x223c	; 0x223c <ADC_startConversion>
	/* Poll for the ADC conversion */
	while(ADCSRA_REG->ADSC == startConversion);
    222a:	e6 e2       	ldi	r30, 0x26	; 38
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	80 74       	andi	r24, 0x40	; 64
    2232:	88 23       	and	r24, r24
    2234:	d1 f7       	brne	.-12     	; 0x222a <ADC_startConversionPollingMode+0x2c>
}
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <ADC_startConversion>:

void ADC_startConversion(void)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
	/* Start the ADC conversion */
	ADCSRA_REG->ADSC = startConversion;
    2244:	e6 e2       	ldi	r30, 0x26	; 38
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	80 64       	ori	r24, 0x40	; 64
    224c:	80 83       	st	Z, r24
}
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	08 95       	ret

00002254 <ADC_readChannel>:

uint16 ADC_readChannel(void)
{
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
	uint16 data=0;
	data = (ADCL_REG >> 6);
	data |= (ADCH_REG << 2);
	return data;
#else
	return ADC_DATA_REG;
    225c:	e4 e2       	ldi	r30, 0x24	; 36
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	91 81       	ldd	r25, Z+1	; 0x01
#endif
}
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <ADC_setCallBackFunction>:
void ADC_setCallBackFunction(void (*callBackPtr)(void))
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	00 d0       	rcall	.+0      	; 0x2270 <ADC_setCallBackFunction+0x6>
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	9a 83       	std	Y+2, r25	; 0x02
    2276:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA_REG->ADIF=1;
    2278:	e6 e2       	ldi	r30, 0x26	; 38
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	80 61       	ori	r24, 0x10	; 16
    2280:	80 83       	st	Z, r24
	ADCSRA_REG->ADIE=1;
    2282:	e6 e2       	ldi	r30, 0x26	; 38
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	88 60       	ori	r24, 0x08	; 8
    228a:	80 83       	st	Z, r24
	if(callBackPtr != NULL)
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	9a 81       	ldd	r25, Y+2	; 0x02
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	31 f0       	breq	.+12     	; 0x22a0 <ADC_setCallBackFunction+0x36>
	{
		ADC_callBack_ptr = callBackPtr;
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	9a 81       	ldd	r25, Y+2	; 0x02
    2298:	90 93 8b 00 	sts	0x008B, r25
    229c:	80 93 8a 00 	sts	0x008A, r24
	}
	ADC_startConversion();
    22a0:	0e 94 1e 11 	call	0x223c	; 0x223c <ADC_startConversion>
}
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	08 95       	ret

000022ae <__vector_16>:

/** ===================== ADC ISRs Implementation ========================== */
/* ADC Conversion Complete ISR */
void __vector_16(void)	__attribute__((signal, used));
void __vector_16(void)
{
    22ae:	1f 92       	push	r1
    22b0:	0f 92       	push	r0
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	0f 92       	push	r0
    22b6:	11 24       	eor	r1, r1
    22b8:	2f 93       	push	r18
    22ba:	3f 93       	push	r19
    22bc:	4f 93       	push	r20
    22be:	5f 93       	push	r21
    22c0:	6f 93       	push	r22
    22c2:	7f 93       	push	r23
    22c4:	8f 93       	push	r24
    22c6:	9f 93       	push	r25
    22c8:	af 93       	push	r26
    22ca:	bf 93       	push	r27
    22cc:	ef 93       	push	r30
    22ce:	ff 93       	push	r31
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
	if(ADC_callBack_ptr != NULL)
    22d8:	80 91 8a 00 	lds	r24, 0x008A
    22dc:	90 91 8b 00 	lds	r25, 0x008B
    22e0:	00 97       	sbiw	r24, 0x00	; 0
    22e2:	29 f0       	breq	.+10     	; 0x22ee <__vector_16+0x40>
	{
		ADC_callBack_ptr();
    22e4:	e0 91 8a 00 	lds	r30, 0x008A
    22e8:	f0 91 8b 00 	lds	r31, 0x008B
    22ec:	09 95       	icall
	}
}
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	ff 91       	pop	r31
    22f4:	ef 91       	pop	r30
    22f6:	bf 91       	pop	r27
    22f8:	af 91       	pop	r26
    22fa:	9f 91       	pop	r25
    22fc:	8f 91       	pop	r24
    22fe:	7f 91       	pop	r23
    2300:	6f 91       	pop	r22
    2302:	5f 91       	pop	r21
    2304:	4f 91       	pop	r20
    2306:	3f 91       	pop	r19
    2308:	2f 91       	pop	r18
    230a:	0f 90       	pop	r0
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	0f 90       	pop	r0
    2310:	1f 90       	pop	r1
    2312:	18 95       	reti

00002314 <LED_setUpDirection>:
 */

#include "LED.h"

void LED_setUpDirection(uint8 port_id,uint8 pin_num,GPIO_PinDirection direction)
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	00 d0       	rcall	.+0      	; 0x231a <LED_setUpDirection+0x6>
    231a:	0f 92       	push	r0
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	6a 83       	std	Y+2, r22	; 0x02
    2324:	4b 83       	std	Y+3, r20	; 0x03
	GPIO_SetupPin_Direction(port_id,pin_num, direction);
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	6a 81       	ldd	r22, Y+2	; 0x02
    232a:	4b 81       	ldd	r20, Y+3	; 0x03
    232c:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_SetupPin_Direction>


}
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	08 95       	ret

0000233c <LED_ON>:

void LED_ON(uint8 port_id,uint8 pin_num)
{
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	00 d0       	rcall	.+0      	; 0x2342 <LED_ON+0x6>
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	89 83       	std	Y+1, r24	; 0x01
    2348:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_SetupPin_Value(port_id,pin_num,LOGIC_HIGH);
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	6a 81       	ldd	r22, Y+2	; 0x02
    234e:	41 e0       	ldi	r20, 0x01	; 1
    2350:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
}
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	cf 91       	pop	r28
    235a:	df 91       	pop	r29
    235c:	08 95       	ret

0000235e <LED_OFF>:
void LED_OFF(uint8 port_id,uint8 pin_num)
{
    235e:	df 93       	push	r29
    2360:	cf 93       	push	r28
    2362:	00 d0       	rcall	.+0      	; 0x2364 <LED_OFF+0x6>
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	89 83       	std	Y+1, r24	; 0x01
    236a:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_SetupPin_Value(port_id,pin_num,LOGIC_LOW);
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	6a 81       	ldd	r22, Y+2	; 0x02
    2370:	40 e0       	ldi	r20, 0x00	; 0
    2372:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
}
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <LED_Toggle>:

void LED_Toggle(uint8 port_id, uint8 pin_num)
{
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	00 d0       	rcall	.+0      	; 0x2386 <LED_Toggle+0x6>
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
    238a:	89 83       	std	Y+1, r24	; 0x01
    238c:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_TogglePin_Value(port_id, pin_num);
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	6a 81       	ldd	r22, Y+2	; 0x02
    2392:	0e 94 76 0e 	call	0x1cec	; 0x1cec <GPIO_TogglePin_Value>
}
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <LCD_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
static uint8 InitFinished = 0;

void LCD_init(void)
{
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	e8 97       	sbiw	r28, 0x38	; 56
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	cd bf       	out	0x3d, r28	; 61
	GPIO_SetupPin_Direction(PORTB_ID,LCD_PIN1,PIN_OUTPUT);/*D4*/
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	60 e0       	ldi	r22, 0x00	; 0
    23b8:	41 e0       	ldi	r20, 0x01	; 1
    23ba:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(PORTB_ID,LCD_PIN2,PIN_OUTPUT);/*D5*/
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	61 e0       	ldi	r22, 0x01	; 1
    23c2:	41 e0       	ldi	r20, 0x01	; 1
    23c4:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(PORTB_ID,LCD_PIN3,PIN_OUTPUT);/*D6*/
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	62 e0       	ldi	r22, 0x02	; 2
    23cc:	41 e0       	ldi	r20, 0x01	; 1
    23ce:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(PORTB_ID,LCD_PIN4,PIN_OUTPUT);/*D7*/
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	64 e0       	ldi	r22, 0x04	; 4
    23d6:	41 e0       	ldi	r20, 0x01	; 1
    23d8:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_SetupPin_Direction>

	GPIO_SetupPin_Direction(PORTA_ID,LCD_RS_PIN,PIN_OUTPUT);/*RS*/
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	63 e0       	ldi	r22, 0x03	; 3
    23e0:	41 e0       	ldi	r20, 0x01	; 1
    23e2:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(PORTA_ID,LCD_EN_PIN,PIN_OUTPUT); /*EN*/
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	62 e0       	ldi	r22, 0x02	; 2
    23ea:	41 e0       	ldi	r20, 0x01	; 1
    23ec:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_SetupPin_Direction>
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	a0 e2       	ldi	r26, 0x20	; 32
    23f6:	b2 e4       	ldi	r27, 0x42	; 66
    23f8:	8d ab       	std	Y+53, r24	; 0x35
    23fa:	9e ab       	std	Y+54, r25	; 0x36
    23fc:	af ab       	std	Y+55, r26	; 0x37
    23fe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2400:	6d a9       	ldd	r22, Y+53	; 0x35
    2402:	7e a9       	ldd	r23, Y+54	; 0x36
    2404:	8f a9       	ldd	r24, Y+55	; 0x37
    2406:	98 ad       	ldd	r25, Y+56	; 0x38
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	4a e7       	ldi	r20, 0x7A	; 122
    240e:	55 e4       	ldi	r21, 0x45	; 69
    2410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	89 ab       	std	Y+49, r24	; 0x31
    241a:	9a ab       	std	Y+50, r25	; 0x32
    241c:	ab ab       	std	Y+51, r26	; 0x33
    241e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2420:	69 a9       	ldd	r22, Y+49	; 0x31
    2422:	7a a9       	ldd	r23, Y+50	; 0x32
    2424:	8b a9       	ldd	r24, Y+51	; 0x33
    2426:	9c a9       	ldd	r25, Y+52	; 0x34
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	40 e8       	ldi	r20, 0x80	; 128
    242e:	5f e3       	ldi	r21, 0x3F	; 63
    2430:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2434:	88 23       	and	r24, r24
    2436:	2c f4       	brge	.+10     	; 0x2442 <LCD_init+0xa2>
		__ticks = 1;
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	98 ab       	std	Y+48, r25	; 0x30
    243e:	8f a7       	std	Y+47, r24	; 0x2f
    2440:	3f c0       	rjmp	.+126    	; 0x24c0 <LCD_init+0x120>
	else if (__tmp > 65535)
    2442:	69 a9       	ldd	r22, Y+49	; 0x31
    2444:	7a a9       	ldd	r23, Y+50	; 0x32
    2446:	8b a9       	ldd	r24, Y+51	; 0x33
    2448:	9c a9       	ldd	r25, Y+52	; 0x34
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	3f ef       	ldi	r19, 0xFF	; 255
    244e:	4f e7       	ldi	r20, 0x7F	; 127
    2450:	57 e4       	ldi	r21, 0x47	; 71
    2452:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2456:	18 16       	cp	r1, r24
    2458:	4c f5       	brge	.+82     	; 0x24ac <LCD_init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245a:	6d a9       	ldd	r22, Y+53	; 0x35
    245c:	7e a9       	ldd	r23, Y+54	; 0x36
    245e:	8f a9       	ldd	r24, Y+55	; 0x37
    2460:	98 ad       	ldd	r25, Y+56	; 0x38
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	40 e2       	ldi	r20, 0x20	; 32
    2468:	51 e4       	ldi	r21, 0x41	; 65
    246a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	bc 01       	movw	r22, r24
    2474:	cd 01       	movw	r24, r26
    2476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	98 ab       	std	Y+48, r25	; 0x30
    2480:	8f a7       	std	Y+47, r24	; 0x2f
    2482:	0f c0       	rjmp	.+30     	; 0x24a2 <LCD_init+0x102>
    2484:	80 e9       	ldi	r24, 0x90	; 144
    2486:	91 e0       	ldi	r25, 0x01	; 1
    2488:	9e a7       	std	Y+46, r25	; 0x2e
    248a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    248c:	8d a5       	ldd	r24, Y+45	; 0x2d
    248e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	f1 f7       	brne	.-4      	; 0x2490 <LCD_init+0xf0>
    2494:	9e a7       	std	Y+46, r25	; 0x2e
    2496:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2498:	8f a5       	ldd	r24, Y+47	; 0x2f
    249a:	98 a9       	ldd	r25, Y+48	; 0x30
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	98 ab       	std	Y+48, r25	; 0x30
    24a0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    24a4:	98 a9       	ldd	r25, Y+48	; 0x30
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	69 f7       	brne	.-38     	; 0x2484 <LCD_init+0xe4>
    24aa:	14 c0       	rjmp	.+40     	; 0x24d4 <LCD_init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ac:	69 a9       	ldd	r22, Y+49	; 0x31
    24ae:	7a a9       	ldd	r23, Y+50	; 0x32
    24b0:	8b a9       	ldd	r24, Y+51	; 0x33
    24b2:	9c a9       	ldd	r25, Y+52	; 0x34
    24b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	98 ab       	std	Y+48, r25	; 0x30
    24be:	8f a7       	std	Y+47, r24	; 0x2f
    24c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24c2:	98 a9       	ldd	r25, Y+48	; 0x30
    24c4:	9c a7       	std	Y+44, r25	; 0x2c
    24c6:	8b a7       	std	Y+43, r24	; 0x2b
    24c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    24ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	f1 f7       	brne	.-4      	; 0x24cc <LCD_init+0x12c>
    24d0:	9c a7       	std	Y+44, r25	; 0x2c
    24d2:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);

	LCD_writeCommand(0x20);
    24d4:	80 e2       	ldi	r24, 0x20	; 32
    24d6:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_writeCommand>
	LCD_writeCommand(0x20);
    24da:	80 e2       	ldi	r24, 0x20	; 32
    24dc:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_writeCommand>
	LCD_writeCommand(0x80);
    24e0:	80 e8       	ldi	r24, 0x80	; 128
    24e2:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_writeCommand>
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	a0 e2       	ldi	r26, 0x20	; 32
    24ec:	b2 e4       	ldi	r27, 0x42	; 66
    24ee:	8f a3       	std	Y+39, r24	; 0x27
    24f0:	98 a7       	std	Y+40, r25	; 0x28
    24f2:	a9 a7       	std	Y+41, r26	; 0x29
    24f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f6:	6f a1       	ldd	r22, Y+39	; 0x27
    24f8:	78 a5       	ldd	r23, Y+40	; 0x28
    24fa:	89 a5       	ldd	r24, Y+41	; 0x29
    24fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	4a e7       	ldi	r20, 0x7A	; 122
    2504:	55 e4       	ldi	r21, 0x45	; 69
    2506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	8b a3       	std	Y+35, r24	; 0x23
    2510:	9c a3       	std	Y+36, r25	; 0x24
    2512:	ad a3       	std	Y+37, r26	; 0x25
    2514:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2516:	6b a1       	ldd	r22, Y+35	; 0x23
    2518:	7c a1       	ldd	r23, Y+36	; 0x24
    251a:	8d a1       	ldd	r24, Y+37	; 0x25
    251c:	9e a1       	ldd	r25, Y+38	; 0x26
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e8       	ldi	r20, 0x80	; 128
    2524:	5f e3       	ldi	r21, 0x3F	; 63
    2526:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    252a:	88 23       	and	r24, r24
    252c:	2c f4       	brge	.+10     	; 0x2538 <LCD_init+0x198>
		__ticks = 1;
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	9a a3       	std	Y+34, r25	; 0x22
    2534:	89 a3       	std	Y+33, r24	; 0x21
    2536:	3f c0       	rjmp	.+126    	; 0x25b6 <LCD_init+0x216>
	else if (__tmp > 65535)
    2538:	6b a1       	ldd	r22, Y+35	; 0x23
    253a:	7c a1       	ldd	r23, Y+36	; 0x24
    253c:	8d a1       	ldd	r24, Y+37	; 0x25
    253e:	9e a1       	ldd	r25, Y+38	; 0x26
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	3f ef       	ldi	r19, 0xFF	; 255
    2544:	4f e7       	ldi	r20, 0x7F	; 127
    2546:	57 e4       	ldi	r21, 0x47	; 71
    2548:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    254c:	18 16       	cp	r1, r24
    254e:	4c f5       	brge	.+82     	; 0x25a2 <LCD_init+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2550:	6f a1       	ldd	r22, Y+39	; 0x27
    2552:	78 a5       	ldd	r23, Y+40	; 0x28
    2554:	89 a5       	ldd	r24, Y+41	; 0x29
    2556:	9a a5       	ldd	r25, Y+42	; 0x2a
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	40 e2       	ldi	r20, 0x20	; 32
    255e:	51 e4       	ldi	r21, 0x41	; 65
    2560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	bc 01       	movw	r22, r24
    256a:	cd 01       	movw	r24, r26
    256c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	9a a3       	std	Y+34, r25	; 0x22
    2576:	89 a3       	std	Y+33, r24	; 0x21
    2578:	0f c0       	rjmp	.+30     	; 0x2598 <LCD_init+0x1f8>
    257a:	80 e9       	ldi	r24, 0x90	; 144
    257c:	91 e0       	ldi	r25, 0x01	; 1
    257e:	98 a3       	std	Y+32, r25	; 0x20
    2580:	8f 8f       	std	Y+31, r24	; 0x1f
    2582:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2584:	98 a1       	ldd	r25, Y+32	; 0x20
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	f1 f7       	brne	.-4      	; 0x2586 <LCD_init+0x1e6>
    258a:	98 a3       	std	Y+32, r25	; 0x20
    258c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258e:	89 a1       	ldd	r24, Y+33	; 0x21
    2590:	9a a1       	ldd	r25, Y+34	; 0x22
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	9a a3       	std	Y+34, r25	; 0x22
    2596:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2598:	89 a1       	ldd	r24, Y+33	; 0x21
    259a:	9a a1       	ldd	r25, Y+34	; 0x22
    259c:	00 97       	sbiw	r24, 0x00	; 0
    259e:	69 f7       	brne	.-38     	; 0x257a <LCD_init+0x1da>
    25a0:	14 c0       	rjmp	.+40     	; 0x25ca <LCD_init+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a2:	6b a1       	ldd	r22, Y+35	; 0x23
    25a4:	7c a1       	ldd	r23, Y+36	; 0x24
    25a6:	8d a1       	ldd	r24, Y+37	; 0x25
    25a8:	9e a1       	ldd	r25, Y+38	; 0x26
    25aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	9a a3       	std	Y+34, r25	; 0x22
    25b4:	89 a3       	std	Y+33, r24	; 0x21
    25b6:	89 a1       	ldd	r24, Y+33	; 0x21
    25b8:	9a a1       	ldd	r25, Y+34	; 0x22
    25ba:	9e 8f       	std	Y+30, r25	; 0x1e
    25bc:	8d 8f       	std	Y+29, r24	; 0x1d
    25be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	f1 f7       	brne	.-4      	; 0x25c2 <LCD_init+0x222>
    25c6:	9e 8f       	std	Y+30, r25	; 0x1e
    25c8:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(40);

	LCD_writeCommand(0x00);
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_writeCommand>
	LCD_writeCommand(0xc0);
    25d0:	80 ec       	ldi	r24, 0xC0	; 192
    25d2:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_writeCommand>
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	a0 e2       	ldi	r26, 0x20	; 32
    25dc:	b2 e4       	ldi	r27, 0x42	; 66
    25de:	89 8f       	std	Y+25, r24	; 0x19
    25e0:	9a 8f       	std	Y+26, r25	; 0x1a
    25e2:	ab 8f       	std	Y+27, r26	; 0x1b
    25e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e6:	69 8d       	ldd	r22, Y+25	; 0x19
    25e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	4a e7       	ldi	r20, 0x7A	; 122
    25f4:	55 e4       	ldi	r21, 0x45	; 69
    25f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	8d 8b       	std	Y+21, r24	; 0x15
    2600:	9e 8b       	std	Y+22, r25	; 0x16
    2602:	af 8b       	std	Y+23, r26	; 0x17
    2604:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2606:	6d 89       	ldd	r22, Y+21	; 0x15
    2608:	7e 89       	ldd	r23, Y+22	; 0x16
    260a:	8f 89       	ldd	r24, Y+23	; 0x17
    260c:	98 8d       	ldd	r25, Y+24	; 0x18
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e8       	ldi	r20, 0x80	; 128
    2614:	5f e3       	ldi	r21, 0x3F	; 63
    2616:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    261a:	88 23       	and	r24, r24
    261c:	2c f4       	brge	.+10     	; 0x2628 <LCD_init+0x288>
		__ticks = 1;
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	9c 8b       	std	Y+20, r25	; 0x14
    2624:	8b 8b       	std	Y+19, r24	; 0x13
    2626:	3f c0       	rjmp	.+126    	; 0x26a6 <LCD_init+0x306>
	else if (__tmp > 65535)
    2628:	6d 89       	ldd	r22, Y+21	; 0x15
    262a:	7e 89       	ldd	r23, Y+22	; 0x16
    262c:	8f 89       	ldd	r24, Y+23	; 0x17
    262e:	98 8d       	ldd	r25, Y+24	; 0x18
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	3f ef       	ldi	r19, 0xFF	; 255
    2634:	4f e7       	ldi	r20, 0x7F	; 127
    2636:	57 e4       	ldi	r21, 0x47	; 71
    2638:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    263c:	18 16       	cp	r1, r24
    263e:	4c f5       	brge	.+82     	; 0x2692 <LCD_init+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2640:	69 8d       	ldd	r22, Y+25	; 0x19
    2642:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2644:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2646:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e2       	ldi	r20, 0x20	; 32
    264e:	51 e4       	ldi	r21, 0x41	; 65
    2650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	bc 01       	movw	r22, r24
    265a:	cd 01       	movw	r24, r26
    265c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	9c 8b       	std	Y+20, r25	; 0x14
    2666:	8b 8b       	std	Y+19, r24	; 0x13
    2668:	0f c0       	rjmp	.+30     	; 0x2688 <LCD_init+0x2e8>
    266a:	80 e9       	ldi	r24, 0x90	; 144
    266c:	91 e0       	ldi	r25, 0x01	; 1
    266e:	9a 8b       	std	Y+18, r25	; 0x12
    2670:	89 8b       	std	Y+17, r24	; 0x11
    2672:	89 89       	ldd	r24, Y+17	; 0x11
    2674:	9a 89       	ldd	r25, Y+18	; 0x12
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <LCD_init+0x2d6>
    267a:	9a 8b       	std	Y+18, r25	; 0x12
    267c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267e:	8b 89       	ldd	r24, Y+19	; 0x13
    2680:	9c 89       	ldd	r25, Y+20	; 0x14
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	9c 8b       	std	Y+20, r25	; 0x14
    2686:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2688:	8b 89       	ldd	r24, Y+19	; 0x13
    268a:	9c 89       	ldd	r25, Y+20	; 0x14
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	69 f7       	brne	.-38     	; 0x266a <LCD_init+0x2ca>
    2690:	14 c0       	rjmp	.+40     	; 0x26ba <LCD_init+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2692:	6d 89       	ldd	r22, Y+21	; 0x15
    2694:	7e 89       	ldd	r23, Y+22	; 0x16
    2696:	8f 89       	ldd	r24, Y+23	; 0x17
    2698:	98 8d       	ldd	r25, Y+24	; 0x18
    269a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	9c 8b       	std	Y+20, r25	; 0x14
    26a4:	8b 8b       	std	Y+19, r24	; 0x13
    26a6:	8b 89       	ldd	r24, Y+19	; 0x13
    26a8:	9c 89       	ldd	r25, Y+20	; 0x14
    26aa:	98 8b       	std	Y+16, r25	; 0x10
    26ac:	8f 87       	std	Y+15, r24	; 0x0f
    26ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b0:	98 89       	ldd	r25, Y+16	; 0x10
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <LCD_init+0x312>
    26b6:	98 8b       	std	Y+16, r25	; 0x10
    26b8:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(40);

	LCD_writeCommand(0x00);
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_writeCommand>
	LCD_writeCommand(0x10);
    26c0:	80 e1       	ldi	r24, 0x10	; 16
    26c2:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_writeCommand>
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	a0 e0       	ldi	r26, 0x00	; 0
    26cc:	b0 e4       	ldi	r27, 0x40	; 64
    26ce:	8b 87       	std	Y+11, r24	; 0x0b
    26d0:	9c 87       	std	Y+12, r25	; 0x0c
    26d2:	ad 87       	std	Y+13, r26	; 0x0d
    26d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26da:	8d 85       	ldd	r24, Y+13	; 0x0d
    26dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	4a e7       	ldi	r20, 0x7A	; 122
    26e4:	55 e4       	ldi	r21, 0x45	; 69
    26e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	8f 83       	std	Y+7, r24	; 0x07
    26f0:	98 87       	std	Y+8, r25	; 0x08
    26f2:	a9 87       	std	Y+9, r26	; 0x09
    26f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26f6:	6f 81       	ldd	r22, Y+7	; 0x07
    26f8:	78 85       	ldd	r23, Y+8	; 0x08
    26fa:	89 85       	ldd	r24, Y+9	; 0x09
    26fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e8       	ldi	r20, 0x80	; 128
    2704:	5f e3       	ldi	r21, 0x3F	; 63
    2706:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    270a:	88 23       	and	r24, r24
    270c:	2c f4       	brge	.+10     	; 0x2718 <LCD_init+0x378>
		__ticks = 1;
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	9e 83       	std	Y+6, r25	; 0x06
    2714:	8d 83       	std	Y+5, r24	; 0x05
    2716:	3f c0       	rjmp	.+126    	; 0x2796 <LCD_init+0x3f6>
	else if (__tmp > 65535)
    2718:	6f 81       	ldd	r22, Y+7	; 0x07
    271a:	78 85       	ldd	r23, Y+8	; 0x08
    271c:	89 85       	ldd	r24, Y+9	; 0x09
    271e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	3f ef       	ldi	r19, 0xFF	; 255
    2724:	4f e7       	ldi	r20, 0x7F	; 127
    2726:	57 e4       	ldi	r21, 0x47	; 71
    2728:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    272c:	18 16       	cp	r1, r24
    272e:	4c f5       	brge	.+82     	; 0x2782 <LCD_init+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2730:	6b 85       	ldd	r22, Y+11	; 0x0b
    2732:	7c 85       	ldd	r23, Y+12	; 0x0c
    2734:	8d 85       	ldd	r24, Y+13	; 0x0d
    2736:	9e 85       	ldd	r25, Y+14	; 0x0e
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e2       	ldi	r20, 0x20	; 32
    273e:	51 e4       	ldi	r21, 0x41	; 65
    2740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	bc 01       	movw	r22, r24
    274a:	cd 01       	movw	r24, r26
    274c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	9e 83       	std	Y+6, r25	; 0x06
    2756:	8d 83       	std	Y+5, r24	; 0x05
    2758:	0f c0       	rjmp	.+30     	; 0x2778 <LCD_init+0x3d8>
    275a:	80 e9       	ldi	r24, 0x90	; 144
    275c:	91 e0       	ldi	r25, 0x01	; 1
    275e:	9c 83       	std	Y+4, r25	; 0x04
    2760:	8b 83       	std	Y+3, r24	; 0x03
    2762:	8b 81       	ldd	r24, Y+3	; 0x03
    2764:	9c 81       	ldd	r25, Y+4	; 0x04
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	f1 f7       	brne	.-4      	; 0x2766 <LCD_init+0x3c6>
    276a:	9c 83       	std	Y+4, r25	; 0x04
    276c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276e:	8d 81       	ldd	r24, Y+5	; 0x05
    2770:	9e 81       	ldd	r25, Y+6	; 0x06
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	9e 83       	std	Y+6, r25	; 0x06
    2776:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2778:	8d 81       	ldd	r24, Y+5	; 0x05
    277a:	9e 81       	ldd	r25, Y+6	; 0x06
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	69 f7       	brne	.-38     	; 0x275a <LCD_init+0x3ba>
    2780:	14 c0       	rjmp	.+40     	; 0x27aa <LCD_init+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2782:	6f 81       	ldd	r22, Y+7	; 0x07
    2784:	78 85       	ldd	r23, Y+8	; 0x08
    2786:	89 85       	ldd	r24, Y+9	; 0x09
    2788:	9a 85       	ldd	r25, Y+10	; 0x0a
    278a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	9e 83       	std	Y+6, r25	; 0x06
    2794:	8d 83       	std	Y+5, r24	; 0x05
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	9a 83       	std	Y+2, r25	; 0x02
    279c:	89 83       	std	Y+1, r24	; 0x01
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	9a 81       	ldd	r25, Y+2	; 0x02
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	f1 f7       	brne	.-4      	; 0x27a2 <LCD_init+0x402>
    27a6:	9a 83       	std	Y+2, r25	; 0x02
    27a8:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	InitFinished = 1;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	80 93 8c 00 	sts	0x008C, r24
}
    27b0:	e8 96       	adiw	r28, 0x38	; 56
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	f8 94       	cli
    27b6:	de bf       	out	0x3e, r29	; 62
    27b8:	0f be       	out	0x3f, r0	; 63
    27ba:	cd bf       	out	0x3d, r28	; 61
    27bc:	cf 91       	pop	r28
    27be:	df 91       	pop	r29
    27c0:	08 95       	ret

000027c2 <LCD_writeCommand>:

void LCD_writeCommand(uint8 command)
{
    27c2:	df 93       	push	r29
    27c4:	cf 93       	push	r28
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    27ca:	ab 97       	sbiw	r28, 0x2b	; 43
    27cc:	0f b6       	in	r0, 0x3f	; 63
    27ce:	f8 94       	cli
    27d0:	de bf       	out	0x3e, r29	; 62
    27d2:	0f be       	out	0x3f, r0	; 63
    27d4:	cd bf       	out	0x3d, r28	; 61
    27d6:	8b a7       	std	Y+43, r24	; 0x2b
	GPIO_SetupPin_Value(PORTA_ID,LCD_RS_PIN,LOGIC_LOW);/*RS*/
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	63 e0       	ldi	r22, 0x03	; 3
    27dc:	40 e0       	ldi	r20, 0x00	; 0
    27de:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>

	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN1,GET_BIT(command,4));
    27e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    27e4:	82 95       	swap	r24
    27e6:	8f 70       	andi	r24, 0x0F	; 15
    27e8:	98 2f       	mov	r25, r24
    27ea:	91 70       	andi	r25, 0x01	; 1
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	60 e0       	ldi	r22, 0x00	; 0
    27f0:	49 2f       	mov	r20, r25
    27f2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN2,GET_BIT(command,5));
    27f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    27f8:	82 95       	swap	r24
    27fa:	86 95       	lsr	r24
    27fc:	87 70       	andi	r24, 0x07	; 7
    27fe:	98 2f       	mov	r25, r24
    2800:	91 70       	andi	r25, 0x01	; 1
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	61 e0       	ldi	r22, 0x01	; 1
    2806:	49 2f       	mov	r20, r25
    2808:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN3,GET_BIT(command,6));
    280c:	8b a5       	ldd	r24, Y+43	; 0x2b
    280e:	82 95       	swap	r24
    2810:	86 95       	lsr	r24
    2812:	86 95       	lsr	r24
    2814:	83 70       	andi	r24, 0x03	; 3
    2816:	98 2f       	mov	r25, r24
    2818:	91 70       	andi	r25, 0x01	; 1
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	62 e0       	ldi	r22, 0x02	; 2
    281e:	49 2f       	mov	r20, r25
    2820:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN4,GET_BIT(command,7));
    2824:	8b a5       	ldd	r24, Y+43	; 0x2b
    2826:	98 2f       	mov	r25, r24
    2828:	99 1f       	adc	r25, r25
    282a:	99 27       	eor	r25, r25
    282c:	99 1f       	adc	r25, r25
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	64 e0       	ldi	r22, 0x04	; 4
    2832:	49 2f       	mov	r20, r25
    2834:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>

	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_HIGH);/*EN*/
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	62 e0       	ldi	r22, 0x02	; 2
    283c:	41 e0       	ldi	r20, 0x01	; 1
    283e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	a0 e8       	ldi	r26, 0x80	; 128
    2848:	b0 e4       	ldi	r27, 0x40	; 64
    284a:	8f a3       	std	Y+39, r24	; 0x27
    284c:	98 a7       	std	Y+40, r25	; 0x28
    284e:	a9 a7       	std	Y+41, r26	; 0x29
    2850:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2852:	6f a1       	ldd	r22, Y+39	; 0x27
    2854:	78 a5       	ldd	r23, Y+40	; 0x28
    2856:	89 a5       	ldd	r24, Y+41	; 0x29
    2858:	9a a5       	ldd	r25, Y+42	; 0x2a
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	4a e7       	ldi	r20, 0x7A	; 122
    2860:	55 e4       	ldi	r21, 0x45	; 69
    2862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	8b a3       	std	Y+35, r24	; 0x23
    286c:	9c a3       	std	Y+36, r25	; 0x24
    286e:	ad a3       	std	Y+37, r26	; 0x25
    2870:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2872:	6b a1       	ldd	r22, Y+35	; 0x23
    2874:	7c a1       	ldd	r23, Y+36	; 0x24
    2876:	8d a1       	ldd	r24, Y+37	; 0x25
    2878:	9e a1       	ldd	r25, Y+38	; 0x26
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	40 e8       	ldi	r20, 0x80	; 128
    2880:	5f e3       	ldi	r21, 0x3F	; 63
    2882:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2886:	88 23       	and	r24, r24
    2888:	2c f4       	brge	.+10     	; 0x2894 <LCD_writeCommand+0xd2>
		__ticks = 1;
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	9a a3       	std	Y+34, r25	; 0x22
    2890:	89 a3       	std	Y+33, r24	; 0x21
    2892:	3f c0       	rjmp	.+126    	; 0x2912 <LCD_writeCommand+0x150>
	else if (__tmp > 65535)
    2894:	6b a1       	ldd	r22, Y+35	; 0x23
    2896:	7c a1       	ldd	r23, Y+36	; 0x24
    2898:	8d a1       	ldd	r24, Y+37	; 0x25
    289a:	9e a1       	ldd	r25, Y+38	; 0x26
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	3f ef       	ldi	r19, 0xFF	; 255
    28a0:	4f e7       	ldi	r20, 0x7F	; 127
    28a2:	57 e4       	ldi	r21, 0x47	; 71
    28a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28a8:	18 16       	cp	r1, r24
    28aa:	4c f5       	brge	.+82     	; 0x28fe <LCD_writeCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ac:	6f a1       	ldd	r22, Y+39	; 0x27
    28ae:	78 a5       	ldd	r23, Y+40	; 0x28
    28b0:	89 a5       	ldd	r24, Y+41	; 0x29
    28b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e2       	ldi	r20, 0x20	; 32
    28ba:	51 e4       	ldi	r21, 0x41	; 65
    28bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	bc 01       	movw	r22, r24
    28c6:	cd 01       	movw	r24, r26
    28c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	9a a3       	std	Y+34, r25	; 0x22
    28d2:	89 a3       	std	Y+33, r24	; 0x21
    28d4:	0f c0       	rjmp	.+30     	; 0x28f4 <LCD_writeCommand+0x132>
    28d6:	80 e9       	ldi	r24, 0x90	; 144
    28d8:	91 e0       	ldi	r25, 0x01	; 1
    28da:	98 a3       	std	Y+32, r25	; 0x20
    28dc:	8f 8f       	std	Y+31, r24	; 0x1f
    28de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28e0:	98 a1       	ldd	r25, Y+32	; 0x20
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	f1 f7       	brne	.-4      	; 0x28e2 <LCD_writeCommand+0x120>
    28e6:	98 a3       	std	Y+32, r25	; 0x20
    28e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ea:	89 a1       	ldd	r24, Y+33	; 0x21
    28ec:	9a a1       	ldd	r25, Y+34	; 0x22
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	9a a3       	std	Y+34, r25	; 0x22
    28f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f4:	89 a1       	ldd	r24, Y+33	; 0x21
    28f6:	9a a1       	ldd	r25, Y+34	; 0x22
    28f8:	00 97       	sbiw	r24, 0x00	; 0
    28fa:	69 f7       	brne	.-38     	; 0x28d6 <LCD_writeCommand+0x114>
    28fc:	14 c0       	rjmp	.+40     	; 0x2926 <LCD_writeCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2900:	7c a1       	ldd	r23, Y+36	; 0x24
    2902:	8d a1       	ldd	r24, Y+37	; 0x25
    2904:	9e a1       	ldd	r25, Y+38	; 0x26
    2906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	9a a3       	std	Y+34, r25	; 0x22
    2910:	89 a3       	std	Y+33, r24	; 0x21
    2912:	89 a1       	ldd	r24, Y+33	; 0x21
    2914:	9a a1       	ldd	r25, Y+34	; 0x22
    2916:	9e 8f       	std	Y+30, r25	; 0x1e
    2918:	8d 8f       	std	Y+29, r24	; 0x1d
    291a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    291c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    291e:	01 97       	sbiw	r24, 0x01	; 1
    2920:	f1 f7       	brne	.-4      	; 0x291e <LCD_writeCommand+0x15c>
    2922:	9e 8f       	std	Y+30, r25	; 0x1e
    2924:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(4);
	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_LOW);/*EN*/
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	62 e0       	ldi	r22, 0x02	; 2
    292a:	40 e0       	ldi	r20, 0x00	; 0
    292c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>

	// _delay_ms(4);

	if(InitFinished)
    2930:	80 91 8c 00 	lds	r24, 0x008C
    2934:	88 23       	and	r24, r24
    2936:	09 f4       	brne	.+2      	; 0x293a <LCD_writeCommand+0x178>
    2938:	a2 c0       	rjmp	.+324    	; 0x2a7e <LCD_writeCommand+0x2bc>
	{
		GPIO_SetupPin_Value(PORTB_ID,LCD_PIN1,GET_BIT(command,0));
    293a:	8b a5       	ldd	r24, Y+43	; 0x2b
    293c:	98 2f       	mov	r25, r24
    293e:	91 70       	andi	r25, 0x01	; 1
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	60 e0       	ldi	r22, 0x00	; 0
    2944:	49 2f       	mov	r20, r25
    2946:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
		GPIO_SetupPin_Value(PORTB_ID,LCD_PIN2,GET_BIT(command,1));
    294a:	8b a5       	ldd	r24, Y+43	; 0x2b
    294c:	86 95       	lsr	r24
    294e:	98 2f       	mov	r25, r24
    2950:	91 70       	andi	r25, 0x01	; 1
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	61 e0       	ldi	r22, 0x01	; 1
    2956:	49 2f       	mov	r20, r25
    2958:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
		GPIO_SetupPin_Value(PORTB_ID,LCD_PIN3,GET_BIT(command,2));
    295c:	8b a5       	ldd	r24, Y+43	; 0x2b
    295e:	86 95       	lsr	r24
    2960:	86 95       	lsr	r24
    2962:	98 2f       	mov	r25, r24
    2964:	91 70       	andi	r25, 0x01	; 1
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	62 e0       	ldi	r22, 0x02	; 2
    296a:	49 2f       	mov	r20, r25
    296c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
		GPIO_SetupPin_Value(PORTB_ID,LCD_PIN4,GET_BIT(command,3));
    2970:	8b a5       	ldd	r24, Y+43	; 0x2b
    2972:	86 95       	lsr	r24
    2974:	86 95       	lsr	r24
    2976:	86 95       	lsr	r24
    2978:	98 2f       	mov	r25, r24
    297a:	91 70       	andi	r25, 0x01	; 1
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	64 e0       	ldi	r22, 0x04	; 4
    2980:	49 2f       	mov	r20, r25
    2982:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>

		GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_HIGH);/*EN*/
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	62 e0       	ldi	r22, 0x02	; 2
    298a:	41 e0       	ldi	r20, 0x01	; 1
    298c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	a0 e8       	ldi	r26, 0x80	; 128
    2996:	b0 e4       	ldi	r27, 0x40	; 64
    2998:	89 8f       	std	Y+25, r24	; 0x19
    299a:	9a 8f       	std	Y+26, r25	; 0x1a
    299c:	ab 8f       	std	Y+27, r26	; 0x1b
    299e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a0:	69 8d       	ldd	r22, Y+25	; 0x19
    29a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	4a e7       	ldi	r20, 0x7A	; 122
    29ae:	55 e4       	ldi	r21, 0x45	; 69
    29b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	8d 8b       	std	Y+21, r24	; 0x15
    29ba:	9e 8b       	std	Y+22, r25	; 0x16
    29bc:	af 8b       	std	Y+23, r26	; 0x17
    29be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29c0:	6d 89       	ldd	r22, Y+21	; 0x15
    29c2:	7e 89       	ldd	r23, Y+22	; 0x16
    29c4:	8f 89       	ldd	r24, Y+23	; 0x17
    29c6:	98 8d       	ldd	r25, Y+24	; 0x18
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e8       	ldi	r20, 0x80	; 128
    29ce:	5f e3       	ldi	r21, 0x3F	; 63
    29d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d4:	88 23       	and	r24, r24
    29d6:	2c f4       	brge	.+10     	; 0x29e2 <LCD_writeCommand+0x220>
		__ticks = 1;
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	9c 8b       	std	Y+20, r25	; 0x14
    29de:	8b 8b       	std	Y+19, r24	; 0x13
    29e0:	3f c0       	rjmp	.+126    	; 0x2a60 <LCD_writeCommand+0x29e>
	else if (__tmp > 65535)
    29e2:	6d 89       	ldd	r22, Y+21	; 0x15
    29e4:	7e 89       	ldd	r23, Y+22	; 0x16
    29e6:	8f 89       	ldd	r24, Y+23	; 0x17
    29e8:	98 8d       	ldd	r25, Y+24	; 0x18
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	3f ef       	ldi	r19, 0xFF	; 255
    29ee:	4f e7       	ldi	r20, 0x7F	; 127
    29f0:	57 e4       	ldi	r21, 0x47	; 71
    29f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29f6:	18 16       	cp	r1, r24
    29f8:	4c f5       	brge	.+82     	; 0x2a4c <LCD_writeCommand+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fa:	69 8d       	ldd	r22, Y+25	; 0x19
    29fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	40 e2       	ldi	r20, 0x20	; 32
    2a08:	51 e4       	ldi	r21, 0x41	; 65
    2a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	bc 01       	movw	r22, r24
    2a14:	cd 01       	movw	r24, r26
    2a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	9c 8b       	std	Y+20, r25	; 0x14
    2a20:	8b 8b       	std	Y+19, r24	; 0x13
    2a22:	0f c0       	rjmp	.+30     	; 0x2a42 <LCD_writeCommand+0x280>
    2a24:	80 e9       	ldi	r24, 0x90	; 144
    2a26:	91 e0       	ldi	r25, 0x01	; 1
    2a28:	9a 8b       	std	Y+18, r25	; 0x12
    2a2a:	89 8b       	std	Y+17, r24	; 0x11
    2a2c:	89 89       	ldd	r24, Y+17	; 0x11
    2a2e:	9a 89       	ldd	r25, Y+18	; 0x12
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	f1 f7       	brne	.-4      	; 0x2a30 <LCD_writeCommand+0x26e>
    2a34:	9a 8b       	std	Y+18, r25	; 0x12
    2a36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a38:	8b 89       	ldd	r24, Y+19	; 0x13
    2a3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	9c 8b       	std	Y+20, r25	; 0x14
    2a40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a42:	8b 89       	ldd	r24, Y+19	; 0x13
    2a44:	9c 89       	ldd	r25, Y+20	; 0x14
    2a46:	00 97       	sbiw	r24, 0x00	; 0
    2a48:	69 f7       	brne	.-38     	; 0x2a24 <LCD_writeCommand+0x262>
    2a4a:	14 c0       	rjmp	.+40     	; 0x2a74 <LCD_writeCommand+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a50:	8f 89       	ldd	r24, Y+23	; 0x17
    2a52:	98 8d       	ldd	r25, Y+24	; 0x18
    2a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	9c 8b       	std	Y+20, r25	; 0x14
    2a5e:	8b 8b       	std	Y+19, r24	; 0x13
    2a60:	8b 89       	ldd	r24, Y+19	; 0x13
    2a62:	9c 89       	ldd	r25, Y+20	; 0x14
    2a64:	98 8b       	std	Y+16, r25	; 0x10
    2a66:	8f 87       	std	Y+15, r24	; 0x0f
    2a68:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a6a:	98 89       	ldd	r25, Y+16	; 0x10
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	f1 f7       	brne	.-4      	; 0x2a6c <LCD_writeCommand+0x2aa>
    2a70:	98 8b       	std	Y+16, r25	; 0x10
    2a72:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(4);
		GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_LOW);/*EN*/
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	62 e0       	ldi	r22, 0x02	; 2
    2a78:	40 e0       	ldi	r20, 0x00	; 0
    2a7a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	a0 e8       	ldi	r26, 0x80	; 128
    2a84:	b0 e4       	ldi	r27, 0x40	; 64
    2a86:	8b 87       	std	Y+11, r24	; 0x0b
    2a88:	9c 87       	std	Y+12, r25	; 0x0c
    2a8a:	ad 87       	std	Y+13, r26	; 0x0d
    2a8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	4a e7       	ldi	r20, 0x7A	; 122
    2a9c:	55 e4       	ldi	r21, 0x45	; 69
    2a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	8f 83       	std	Y+7, r24	; 0x07
    2aa8:	98 87       	std	Y+8, r25	; 0x08
    2aaa:	a9 87       	std	Y+9, r26	; 0x09
    2aac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aae:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab0:	78 85       	ldd	r23, Y+8	; 0x08
    2ab2:	89 85       	ldd	r24, Y+9	; 0x09
    2ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e8       	ldi	r20, 0x80	; 128
    2abc:	5f e3       	ldi	r21, 0x3F	; 63
    2abe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ac2:	88 23       	and	r24, r24
    2ac4:	2c f4       	brge	.+10     	; 0x2ad0 <LCD_writeCommand+0x30e>
		__ticks = 1;
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	9e 83       	std	Y+6, r25	; 0x06
    2acc:	8d 83       	std	Y+5, r24	; 0x05
    2ace:	3f c0       	rjmp	.+126    	; 0x2b4e <LCD_writeCommand+0x38c>
	else if (__tmp > 65535)
    2ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad2:	78 85       	ldd	r23, Y+8	; 0x08
    2ad4:	89 85       	ldd	r24, Y+9	; 0x09
    2ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	3f ef       	ldi	r19, 0xFF	; 255
    2adc:	4f e7       	ldi	r20, 0x7F	; 127
    2ade:	57 e4       	ldi	r21, 0x47	; 71
    2ae0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ae4:	18 16       	cp	r1, r24
    2ae6:	4c f5       	brge	.+82     	; 0x2b3a <LCD_writeCommand+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	40 e2       	ldi	r20, 0x20	; 32
    2af6:	51 e4       	ldi	r21, 0x41	; 65
    2af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	bc 01       	movw	r22, r24
    2b02:	cd 01       	movw	r24, r26
    2b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	9e 83       	std	Y+6, r25	; 0x06
    2b0e:	8d 83       	std	Y+5, r24	; 0x05
    2b10:	0f c0       	rjmp	.+30     	; 0x2b30 <LCD_writeCommand+0x36e>
    2b12:	80 e9       	ldi	r24, 0x90	; 144
    2b14:	91 e0       	ldi	r25, 0x01	; 1
    2b16:	9c 83       	std	Y+4, r25	; 0x04
    2b18:	8b 83       	std	Y+3, r24	; 0x03
    2b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	f1 f7       	brne	.-4      	; 0x2b1e <LCD_writeCommand+0x35c>
    2b22:	9c 83       	std	Y+4, r25	; 0x04
    2b24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b26:	8d 81       	ldd	r24, Y+5	; 0x05
    2b28:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	9e 83       	std	Y+6, r25	; 0x06
    2b2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b30:	8d 81       	ldd	r24, Y+5	; 0x05
    2b32:	9e 81       	ldd	r25, Y+6	; 0x06
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	69 f7       	brne	.-38     	; 0x2b12 <LCD_writeCommand+0x350>
    2b38:	14 c0       	rjmp	.+40     	; 0x2b62 <LCD_writeCommand+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b3c:	78 85       	ldd	r23, Y+8	; 0x08
    2b3e:	89 85       	ldd	r24, Y+9	; 0x09
    2b40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	9e 83       	std	Y+6, r25	; 0x06
    2b4c:	8d 83       	std	Y+5, r24	; 0x05
    2b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b50:	9e 81       	ldd	r25, Y+6	; 0x06
    2b52:	9a 83       	std	Y+2, r25	; 0x02
    2b54:	89 83       	std	Y+1, r24	; 0x01
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	9a 81       	ldd	r25, Y+2	; 0x02
    2b5a:	01 97       	sbiw	r24, 0x01	; 1
    2b5c:	f1 f7       	brne	.-4      	; 0x2b5a <LCD_writeCommand+0x398>
    2b5e:	9a 83       	std	Y+2, r25	; 0x02
    2b60:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(4);
}
    2b62:	ab 96       	adiw	r28, 0x2b	; 43
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	f8 94       	cli
    2b68:	de bf       	out	0x3e, r29	; 62
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	cd bf       	out	0x3d, r28	; 61
    2b6e:	cf 91       	pop	r28
    2b70:	df 91       	pop	r29
    2b72:	08 95       	ret

00002b74 <LCD_writeData>:
void LCD_writeData(uint8 command)
{
    2b74:	df 93       	push	r29
    2b76:	cf 93       	push	r28
    2b78:	cd b7       	in	r28, 0x3d	; 61
    2b7a:	de b7       	in	r29, 0x3e	; 62
    2b7c:	e9 97       	sbiw	r28, 0x39	; 57
    2b7e:	0f b6       	in	r0, 0x3f	; 63
    2b80:	f8 94       	cli
    2b82:	de bf       	out	0x3e, r29	; 62
    2b84:	0f be       	out	0x3f, r0	; 63
    2b86:	cd bf       	out	0x3d, r28	; 61
    2b88:	89 af       	std	Y+57, r24	; 0x39

	GPIO_SetupPin_Value(PORTA_ID,LCD_RS_PIN,LOGIC_HIGH);
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	63 e0       	ldi	r22, 0x03	; 3
    2b8e:	41 e0       	ldi	r20, 0x01	; 1
    2b90:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>

	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN1,GET_BIT(command,4));
    2b94:	89 ad       	ldd	r24, Y+57	; 0x39
    2b96:	82 95       	swap	r24
    2b98:	8f 70       	andi	r24, 0x0F	; 15
    2b9a:	98 2f       	mov	r25, r24
    2b9c:	91 70       	andi	r25, 0x01	; 1
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	60 e0       	ldi	r22, 0x00	; 0
    2ba2:	49 2f       	mov	r20, r25
    2ba4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN2,GET_BIT(command,5));
    2ba8:	89 ad       	ldd	r24, Y+57	; 0x39
    2baa:	82 95       	swap	r24
    2bac:	86 95       	lsr	r24
    2bae:	87 70       	andi	r24, 0x07	; 7
    2bb0:	98 2f       	mov	r25, r24
    2bb2:	91 70       	andi	r25, 0x01	; 1
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	61 e0       	ldi	r22, 0x01	; 1
    2bb8:	49 2f       	mov	r20, r25
    2bba:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN3,GET_BIT(command,6));
    2bbe:	89 ad       	ldd	r24, Y+57	; 0x39
    2bc0:	82 95       	swap	r24
    2bc2:	86 95       	lsr	r24
    2bc4:	86 95       	lsr	r24
    2bc6:	83 70       	andi	r24, 0x03	; 3
    2bc8:	98 2f       	mov	r25, r24
    2bca:	91 70       	andi	r25, 0x01	; 1
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	62 e0       	ldi	r22, 0x02	; 2
    2bd0:	49 2f       	mov	r20, r25
    2bd2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN4,GET_BIT(command,7));
    2bd6:	89 ad       	ldd	r24, Y+57	; 0x39
    2bd8:	98 2f       	mov	r25, r24
    2bda:	99 1f       	adc	r25, r25
    2bdc:	99 27       	eor	r25, r25
    2bde:	99 1f       	adc	r25, r25
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	64 e0       	ldi	r22, 0x04	; 4
    2be4:	49 2f       	mov	r20, r25
    2be6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>

	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_HIGH);/*EN*/
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	62 e0       	ldi	r22, 0x02	; 2
    2bee:	41 e0       	ldi	r20, 0x01	; 1
    2bf0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	a0 e0       	ldi	r26, 0x00	; 0
    2bfa:	b0 e4       	ldi	r27, 0x40	; 64
    2bfc:	8d ab       	std	Y+53, r24	; 0x35
    2bfe:	9e ab       	std	Y+54, r25	; 0x36
    2c00:	af ab       	std	Y+55, r26	; 0x37
    2c02:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c04:	6d a9       	ldd	r22, Y+53	; 0x35
    2c06:	7e a9       	ldd	r23, Y+54	; 0x36
    2c08:	8f a9       	ldd	r24, Y+55	; 0x37
    2c0a:	98 ad       	ldd	r25, Y+56	; 0x38
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	4a e7       	ldi	r20, 0x7A	; 122
    2c12:	55 e4       	ldi	r21, 0x45	; 69
    2c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	89 ab       	std	Y+49, r24	; 0x31
    2c1e:	9a ab       	std	Y+50, r25	; 0x32
    2c20:	ab ab       	std	Y+51, r26	; 0x33
    2c22:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c24:	69 a9       	ldd	r22, Y+49	; 0x31
    2c26:	7a a9       	ldd	r23, Y+50	; 0x32
    2c28:	8b a9       	ldd	r24, Y+51	; 0x33
    2c2a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e8       	ldi	r20, 0x80	; 128
    2c32:	5f e3       	ldi	r21, 0x3F	; 63
    2c34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c38:	88 23       	and	r24, r24
    2c3a:	2c f4       	brge	.+10     	; 0x2c46 <LCD_writeData+0xd2>
		__ticks = 1;
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	98 ab       	std	Y+48, r25	; 0x30
    2c42:	8f a7       	std	Y+47, r24	; 0x2f
    2c44:	3f c0       	rjmp	.+126    	; 0x2cc4 <LCD_writeData+0x150>
	else if (__tmp > 65535)
    2c46:	69 a9       	ldd	r22, Y+49	; 0x31
    2c48:	7a a9       	ldd	r23, Y+50	; 0x32
    2c4a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c4c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	3f ef       	ldi	r19, 0xFF	; 255
    2c52:	4f e7       	ldi	r20, 0x7F	; 127
    2c54:	57 e4       	ldi	r21, 0x47	; 71
    2c56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c5a:	18 16       	cp	r1, r24
    2c5c:	4c f5       	brge	.+82     	; 0x2cb0 <LCD_writeData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c5e:	6d a9       	ldd	r22, Y+53	; 0x35
    2c60:	7e a9       	ldd	r23, Y+54	; 0x36
    2c62:	8f a9       	ldd	r24, Y+55	; 0x37
    2c64:	98 ad       	ldd	r25, Y+56	; 0x38
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	40 e2       	ldi	r20, 0x20	; 32
    2c6c:	51 e4       	ldi	r21, 0x41	; 65
    2c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	bc 01       	movw	r22, r24
    2c78:	cd 01       	movw	r24, r26
    2c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	98 ab       	std	Y+48, r25	; 0x30
    2c84:	8f a7       	std	Y+47, r24	; 0x2f
    2c86:	0f c0       	rjmp	.+30     	; 0x2ca6 <LCD_writeData+0x132>
    2c88:	80 e9       	ldi	r24, 0x90	; 144
    2c8a:	91 e0       	ldi	r25, 0x01	; 1
    2c8c:	9e a7       	std	Y+46, r25	; 0x2e
    2c8e:	8d a7       	std	Y+45, r24	; 0x2d
    2c90:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c92:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c94:	01 97       	sbiw	r24, 0x01	; 1
    2c96:	f1 f7       	brne	.-4      	; 0x2c94 <LCD_writeData+0x120>
    2c98:	9e a7       	std	Y+46, r25	; 0x2e
    2c9a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c9e:	98 a9       	ldd	r25, Y+48	; 0x30
    2ca0:	01 97       	sbiw	r24, 0x01	; 1
    2ca2:	98 ab       	std	Y+48, r25	; 0x30
    2ca4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ca8:	98 a9       	ldd	r25, Y+48	; 0x30
    2caa:	00 97       	sbiw	r24, 0x00	; 0
    2cac:	69 f7       	brne	.-38     	; 0x2c88 <LCD_writeData+0x114>
    2cae:	14 c0       	rjmp	.+40     	; 0x2cd8 <LCD_writeData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb0:	69 a9       	ldd	r22, Y+49	; 0x31
    2cb2:	7a a9       	ldd	r23, Y+50	; 0x32
    2cb4:	8b a9       	ldd	r24, Y+51	; 0x33
    2cb6:	9c a9       	ldd	r25, Y+52	; 0x34
    2cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	98 ab       	std	Y+48, r25	; 0x30
    2cc2:	8f a7       	std	Y+47, r24	; 0x2f
    2cc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cc6:	98 a9       	ldd	r25, Y+48	; 0x30
    2cc8:	9c a7       	std	Y+44, r25	; 0x2c
    2cca:	8b a7       	std	Y+43, r24	; 0x2b
    2ccc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cce:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	f1 f7       	brne	.-4      	; 0x2cd0 <LCD_writeData+0x15c>
    2cd4:	9c a7       	std	Y+44, r25	; 0x2c
    2cd6:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2);
	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_LOW);/*EN*/
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	62 e0       	ldi	r22, 0x02	; 2
    2cdc:	40 e0       	ldi	r20, 0x00	; 0
    2cde:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	a0 e0       	ldi	r26, 0x00	; 0
    2ce8:	b0 e4       	ldi	r27, 0x40	; 64
    2cea:	8f a3       	std	Y+39, r24	; 0x27
    2cec:	98 a7       	std	Y+40, r25	; 0x28
    2cee:	a9 a7       	std	Y+41, r26	; 0x29
    2cf0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf2:	6f a1       	ldd	r22, Y+39	; 0x27
    2cf4:	78 a5       	ldd	r23, Y+40	; 0x28
    2cf6:	89 a5       	ldd	r24, Y+41	; 0x29
    2cf8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	4a e7       	ldi	r20, 0x7A	; 122
    2d00:	55 e4       	ldi	r21, 0x45	; 69
    2d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	8b a3       	std	Y+35, r24	; 0x23
    2d0c:	9c a3       	std	Y+36, r25	; 0x24
    2d0e:	ad a3       	std	Y+37, r26	; 0x25
    2d10:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d12:	6b a1       	ldd	r22, Y+35	; 0x23
    2d14:	7c a1       	ldd	r23, Y+36	; 0x24
    2d16:	8d a1       	ldd	r24, Y+37	; 0x25
    2d18:	9e a1       	ldd	r25, Y+38	; 0x26
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	40 e8       	ldi	r20, 0x80	; 128
    2d20:	5f e3       	ldi	r21, 0x3F	; 63
    2d22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d26:	88 23       	and	r24, r24
    2d28:	2c f4       	brge	.+10     	; 0x2d34 <LCD_writeData+0x1c0>
		__ticks = 1;
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	9a a3       	std	Y+34, r25	; 0x22
    2d30:	89 a3       	std	Y+33, r24	; 0x21
    2d32:	3f c0       	rjmp	.+126    	; 0x2db2 <LCD_writeData+0x23e>
	else if (__tmp > 65535)
    2d34:	6b a1       	ldd	r22, Y+35	; 0x23
    2d36:	7c a1       	ldd	r23, Y+36	; 0x24
    2d38:	8d a1       	ldd	r24, Y+37	; 0x25
    2d3a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	3f ef       	ldi	r19, 0xFF	; 255
    2d40:	4f e7       	ldi	r20, 0x7F	; 127
    2d42:	57 e4       	ldi	r21, 0x47	; 71
    2d44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d48:	18 16       	cp	r1, r24
    2d4a:	4c f5       	brge	.+82     	; 0x2d9e <LCD_writeData+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d4c:	6f a1       	ldd	r22, Y+39	; 0x27
    2d4e:	78 a5       	ldd	r23, Y+40	; 0x28
    2d50:	89 a5       	ldd	r24, Y+41	; 0x29
    2d52:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	40 e2       	ldi	r20, 0x20	; 32
    2d5a:	51 e4       	ldi	r21, 0x41	; 65
    2d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	bc 01       	movw	r22, r24
    2d66:	cd 01       	movw	r24, r26
    2d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	9a a3       	std	Y+34, r25	; 0x22
    2d72:	89 a3       	std	Y+33, r24	; 0x21
    2d74:	0f c0       	rjmp	.+30     	; 0x2d94 <LCD_writeData+0x220>
    2d76:	80 e9       	ldi	r24, 0x90	; 144
    2d78:	91 e0       	ldi	r25, 0x01	; 1
    2d7a:	98 a3       	std	Y+32, r25	; 0x20
    2d7c:	8f 8f       	std	Y+31, r24	; 0x1f
    2d7e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d80:	98 a1       	ldd	r25, Y+32	; 0x20
    2d82:	01 97       	sbiw	r24, 0x01	; 1
    2d84:	f1 f7       	brne	.-4      	; 0x2d82 <LCD_writeData+0x20e>
    2d86:	98 a3       	std	Y+32, r25	; 0x20
    2d88:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d8a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d8c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d8e:	01 97       	sbiw	r24, 0x01	; 1
    2d90:	9a a3       	std	Y+34, r25	; 0x22
    2d92:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d94:	89 a1       	ldd	r24, Y+33	; 0x21
    2d96:	9a a1       	ldd	r25, Y+34	; 0x22
    2d98:	00 97       	sbiw	r24, 0x00	; 0
    2d9a:	69 f7       	brne	.-38     	; 0x2d76 <LCD_writeData+0x202>
    2d9c:	14 c0       	rjmp	.+40     	; 0x2dc6 <LCD_writeData+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d9e:	6b a1       	ldd	r22, Y+35	; 0x23
    2da0:	7c a1       	ldd	r23, Y+36	; 0x24
    2da2:	8d a1       	ldd	r24, Y+37	; 0x25
    2da4:	9e a1       	ldd	r25, Y+38	; 0x26
    2da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	9a a3       	std	Y+34, r25	; 0x22
    2db0:	89 a3       	std	Y+33, r24	; 0x21
    2db2:	89 a1       	ldd	r24, Y+33	; 0x21
    2db4:	9a a1       	ldd	r25, Y+34	; 0x22
    2db6:	9e 8f       	std	Y+30, r25	; 0x1e
    2db8:	8d 8f       	std	Y+29, r24	; 0x1d
    2dba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dbc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dbe:	01 97       	sbiw	r24, 0x01	; 1
    2dc0:	f1 f7       	brne	.-4      	; 0x2dbe <LCD_writeData+0x24a>
    2dc2:	9e 8f       	std	Y+30, r25	; 0x1e
    2dc4:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(2);

	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN1,GET_BIT(command,0));
    2dc6:	89 ad       	ldd	r24, Y+57	; 0x39
    2dc8:	98 2f       	mov	r25, r24
    2dca:	91 70       	andi	r25, 0x01	; 1
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	60 e0       	ldi	r22, 0x00	; 0
    2dd0:	49 2f       	mov	r20, r25
    2dd2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN2,GET_BIT(command,1));
    2dd6:	89 ad       	ldd	r24, Y+57	; 0x39
    2dd8:	86 95       	lsr	r24
    2dda:	98 2f       	mov	r25, r24
    2ddc:	91 70       	andi	r25, 0x01	; 1
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	61 e0       	ldi	r22, 0x01	; 1
    2de2:	49 2f       	mov	r20, r25
    2de4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN3,GET_BIT(command,2));
    2de8:	89 ad       	ldd	r24, Y+57	; 0x39
    2dea:	86 95       	lsr	r24
    2dec:	86 95       	lsr	r24
    2dee:	98 2f       	mov	r25, r24
    2df0:	91 70       	andi	r25, 0x01	; 1
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	62 e0       	ldi	r22, 0x02	; 2
    2df6:	49 2f       	mov	r20, r25
    2df8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN4,GET_BIT(command,3));
    2dfc:	89 ad       	ldd	r24, Y+57	; 0x39
    2dfe:	86 95       	lsr	r24
    2e00:	86 95       	lsr	r24
    2e02:	86 95       	lsr	r24
    2e04:	98 2f       	mov	r25, r24
    2e06:	91 70       	andi	r25, 0x01	; 1
    2e08:	81 e0       	ldi	r24, 0x01	; 1
    2e0a:	64 e0       	ldi	r22, 0x04	; 4
    2e0c:	49 2f       	mov	r20, r25
    2e0e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>


	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_HIGH);/*EN*/
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	62 e0       	ldi	r22, 0x02	; 2
    2e16:	41 e0       	ldi	r20, 0x01	; 1
    2e18:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	a0 e0       	ldi	r26, 0x00	; 0
    2e22:	b0 e4       	ldi	r27, 0x40	; 64
    2e24:	89 8f       	std	Y+25, r24	; 0x19
    2e26:	9a 8f       	std	Y+26, r25	; 0x1a
    2e28:	ab 8f       	std	Y+27, r26	; 0x1b
    2e2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e2c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	4a e7       	ldi	r20, 0x7A	; 122
    2e3a:	55 e4       	ldi	r21, 0x45	; 69
    2e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	8d 8b       	std	Y+21, r24	; 0x15
    2e46:	9e 8b       	std	Y+22, r25	; 0x16
    2e48:	af 8b       	std	Y+23, r26	; 0x17
    2e4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e50:	8f 89       	ldd	r24, Y+23	; 0x17
    2e52:	98 8d       	ldd	r25, Y+24	; 0x18
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	40 e8       	ldi	r20, 0x80	; 128
    2e5a:	5f e3       	ldi	r21, 0x3F	; 63
    2e5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e60:	88 23       	and	r24, r24
    2e62:	2c f4       	brge	.+10     	; 0x2e6e <LCD_writeData+0x2fa>
		__ticks = 1;
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	9c 8b       	std	Y+20, r25	; 0x14
    2e6a:	8b 8b       	std	Y+19, r24	; 0x13
    2e6c:	3f c0       	rjmp	.+126    	; 0x2eec <LCD_writeData+0x378>
	else if (__tmp > 65535)
    2e6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e70:	7e 89       	ldd	r23, Y+22	; 0x16
    2e72:	8f 89       	ldd	r24, Y+23	; 0x17
    2e74:	98 8d       	ldd	r25, Y+24	; 0x18
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	3f ef       	ldi	r19, 0xFF	; 255
    2e7a:	4f e7       	ldi	r20, 0x7F	; 127
    2e7c:	57 e4       	ldi	r21, 0x47	; 71
    2e7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e82:	18 16       	cp	r1, r24
    2e84:	4c f5       	brge	.+82     	; 0x2ed8 <LCD_writeData+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e86:	69 8d       	ldd	r22, Y+25	; 0x19
    2e88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e2       	ldi	r20, 0x20	; 32
    2e94:	51 e4       	ldi	r21, 0x41	; 65
    2e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	cd 01       	movw	r24, r26
    2ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	9c 8b       	std	Y+20, r25	; 0x14
    2eac:	8b 8b       	std	Y+19, r24	; 0x13
    2eae:	0f c0       	rjmp	.+30     	; 0x2ece <LCD_writeData+0x35a>
    2eb0:	80 e9       	ldi	r24, 0x90	; 144
    2eb2:	91 e0       	ldi	r25, 0x01	; 1
    2eb4:	9a 8b       	std	Y+18, r25	; 0x12
    2eb6:	89 8b       	std	Y+17, r24	; 0x11
    2eb8:	89 89       	ldd	r24, Y+17	; 0x11
    2eba:	9a 89       	ldd	r25, Y+18	; 0x12
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <LCD_writeData+0x348>
    2ec0:	9a 8b       	std	Y+18, r25	; 0x12
    2ec2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	9c 8b       	std	Y+20, r25	; 0x14
    2ecc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ece:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ed2:	00 97       	sbiw	r24, 0x00	; 0
    2ed4:	69 f7       	brne	.-38     	; 0x2eb0 <LCD_writeData+0x33c>
    2ed6:	14 c0       	rjmp	.+40     	; 0x2f00 <LCD_writeData+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed8:	6d 89       	ldd	r22, Y+21	; 0x15
    2eda:	7e 89       	ldd	r23, Y+22	; 0x16
    2edc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ede:	98 8d       	ldd	r25, Y+24	; 0x18
    2ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	9c 8b       	std	Y+20, r25	; 0x14
    2eea:	8b 8b       	std	Y+19, r24	; 0x13
    2eec:	8b 89       	ldd	r24, Y+19	; 0x13
    2eee:	9c 89       	ldd	r25, Y+20	; 0x14
    2ef0:	98 8b       	std	Y+16, r25	; 0x10
    2ef2:	8f 87       	std	Y+15, r24	; 0x0f
    2ef4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ef6:	98 89       	ldd	r25, Y+16	; 0x10
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <LCD_writeData+0x384>
    2efc:	98 8b       	std	Y+16, r25	; 0x10
    2efe:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);
	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_LOW);/*EN*/
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	62 e0       	ldi	r22, 0x02	; 2
    2f04:	40 e0       	ldi	r20, 0x00	; 0
    2f06:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	a0 e0       	ldi	r26, 0x00	; 0
    2f10:	b0 e4       	ldi	r27, 0x40	; 64
    2f12:	8b 87       	std	Y+11, r24	; 0x0b
    2f14:	9c 87       	std	Y+12, r25	; 0x0c
    2f16:	ad 87       	std	Y+13, r26	; 0x0d
    2f18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	4a e7       	ldi	r20, 0x7A	; 122
    2f28:	55 e4       	ldi	r21, 0x45	; 69
    2f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	8f 83       	std	Y+7, r24	; 0x07
    2f34:	98 87       	std	Y+8, r25	; 0x08
    2f36:	a9 87       	std	Y+9, r26	; 0x09
    2f38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f3c:	78 85       	ldd	r23, Y+8	; 0x08
    2f3e:	89 85       	ldd	r24, Y+9	; 0x09
    2f40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	40 e8       	ldi	r20, 0x80	; 128
    2f48:	5f e3       	ldi	r21, 0x3F	; 63
    2f4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f4e:	88 23       	and	r24, r24
    2f50:	2c f4       	brge	.+10     	; 0x2f5c <LCD_writeData+0x3e8>
		__ticks = 1;
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	9e 83       	std	Y+6, r25	; 0x06
    2f58:	8d 83       	std	Y+5, r24	; 0x05
    2f5a:	3f c0       	rjmp	.+126    	; 0x2fda <LCD_writeData+0x466>
	else if (__tmp > 65535)
    2f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5e:	78 85       	ldd	r23, Y+8	; 0x08
    2f60:	89 85       	ldd	r24, Y+9	; 0x09
    2f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	3f ef       	ldi	r19, 0xFF	; 255
    2f68:	4f e7       	ldi	r20, 0x7F	; 127
    2f6a:	57 e4       	ldi	r21, 0x47	; 71
    2f6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f70:	18 16       	cp	r1, r24
    2f72:	4c f5       	brge	.+82     	; 0x2fc6 <LCD_writeData+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e2       	ldi	r20, 0x20	; 32
    2f82:	51 e4       	ldi	r21, 0x41	; 65
    2f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	bc 01       	movw	r22, r24
    2f8e:	cd 01       	movw	r24, r26
    2f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	9e 83       	std	Y+6, r25	; 0x06
    2f9a:	8d 83       	std	Y+5, r24	; 0x05
    2f9c:	0f c0       	rjmp	.+30     	; 0x2fbc <LCD_writeData+0x448>
    2f9e:	80 e9       	ldi	r24, 0x90	; 144
    2fa0:	91 e0       	ldi	r25, 0x01	; 1
    2fa2:	9c 83       	std	Y+4, r25	; 0x04
    2fa4:	8b 83       	std	Y+3, r24	; 0x03
    2fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	f1 f7       	brne	.-4      	; 0x2faa <LCD_writeData+0x436>
    2fae:	9c 83       	std	Y+4, r25	; 0x04
    2fb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	9e 83       	std	Y+6, r25	; 0x06
    2fba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc0:	00 97       	sbiw	r24, 0x00	; 0
    2fc2:	69 f7       	brne	.-38     	; 0x2f9e <LCD_writeData+0x42a>
    2fc4:	14 c0       	rjmp	.+40     	; 0x2fee <LCD_writeData+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc8:	78 85       	ldd	r23, Y+8	; 0x08
    2fca:	89 85       	ldd	r24, Y+9	; 0x09
    2fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	9e 83       	std	Y+6, r25	; 0x06
    2fd8:	8d 83       	std	Y+5, r24	; 0x05
    2fda:	8d 81       	ldd	r24, Y+5	; 0x05
    2fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fde:	9a 83       	std	Y+2, r25	; 0x02
    2fe0:	89 83       	std	Y+1, r24	; 0x01
    2fe2:	89 81       	ldd	r24, Y+1	; 0x01
    2fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	f1 f7       	brne	.-4      	; 0x2fe6 <LCD_writeData+0x472>
    2fea:	9a 83       	std	Y+2, r25	; 0x02
    2fec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2fee:	e9 96       	adiw	r28, 0x39	; 57
    2ff0:	0f b6       	in	r0, 0x3f	; 63
    2ff2:	f8 94       	cli
    2ff4:	de bf       	out	0x3e, r29	; 62
    2ff6:	0f be       	out	0x3f, r0	; 63
    2ff8:	cd bf       	out	0x3d, r28	; 61
    2ffa:	cf 91       	pop	r28
    2ffc:	df 91       	pop	r29
    2ffe:	08 95       	ret

00003000 <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{
    3000:	df 93       	push	r29
    3002:	cf 93       	push	r28
    3004:	00 d0       	rcall	.+0      	; 0x3006 <LCD_goToRowColumn+0x6>
    3006:	00 d0       	rcall	.+0      	; 0x3008 <LCD_goToRowColumn+0x8>
    3008:	0f 92       	push	r0
    300a:	cd b7       	in	r28, 0x3d	; 61
    300c:	de b7       	in	r29, 0x3e	; 62
    300e:	8a 83       	std	Y+2, r24	; 0x02
    3010:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    3012:	8a 81       	ldd	r24, Y+2	; 0x02
    3014:	28 2f       	mov	r18, r24
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	3d 83       	std	Y+5, r19	; 0x05
    301a:	2c 83       	std	Y+4, r18	; 0x04
    301c:	8c 81       	ldd	r24, Y+4	; 0x04
    301e:	9d 81       	ldd	r25, Y+5	; 0x05
    3020:	81 30       	cpi	r24, 0x01	; 1
    3022:	91 05       	cpc	r25, r1
    3024:	c9 f0       	breq	.+50     	; 0x3058 <LCD_goToRowColumn+0x58>
    3026:	2c 81       	ldd	r18, Y+4	; 0x04
    3028:	3d 81       	ldd	r19, Y+5	; 0x05
    302a:	22 30       	cpi	r18, 0x02	; 2
    302c:	31 05       	cpc	r19, r1
    302e:	2c f4       	brge	.+10     	; 0x303a <LCD_goToRowColumn+0x3a>
    3030:	8c 81       	ldd	r24, Y+4	; 0x04
    3032:	9d 81       	ldd	r25, Y+5	; 0x05
    3034:	00 97       	sbiw	r24, 0x00	; 0
    3036:	61 f0       	breq	.+24     	; 0x3050 <LCD_goToRowColumn+0x50>
    3038:	1a c0       	rjmp	.+52     	; 0x306e <LCD_goToRowColumn+0x6e>
    303a:	2c 81       	ldd	r18, Y+4	; 0x04
    303c:	3d 81       	ldd	r19, Y+5	; 0x05
    303e:	22 30       	cpi	r18, 0x02	; 2
    3040:	31 05       	cpc	r19, r1
    3042:	71 f0       	breq	.+28     	; 0x3060 <LCD_goToRowColumn+0x60>
    3044:	8c 81       	ldd	r24, Y+4	; 0x04
    3046:	9d 81       	ldd	r25, Y+5	; 0x05
    3048:	83 30       	cpi	r24, 0x03	; 3
    304a:	91 05       	cpc	r25, r1
    304c:	69 f0       	breq	.+26     	; 0x3068 <LCD_goToRowColumn+0x68>
    304e:	0f c0       	rjmp	.+30     	; 0x306e <LCD_goToRowColumn+0x6e>
	{
		case 0:
				Address=0x80+col;
    3050:	8b 81       	ldd	r24, Y+3	; 0x03
    3052:	80 58       	subi	r24, 0x80	; 128
    3054:	89 83       	std	Y+1, r24	; 0x01
    3056:	0b c0       	rjmp	.+22     	; 0x306e <LCD_goToRowColumn+0x6e>
				break;
		case 1:
				Address=0xC0+col;
    3058:	8b 81       	ldd	r24, Y+3	; 0x03
    305a:	80 54       	subi	r24, 0x40	; 64
    305c:	89 83       	std	Y+1, r24	; 0x01
    305e:	07 c0       	rjmp	.+14     	; 0x306e <LCD_goToRowColumn+0x6e>
				break;
		case 2:
				Address=0x94+col;
    3060:	8b 81       	ldd	r24, Y+3	; 0x03
    3062:	8c 56       	subi	r24, 0x6C	; 108
    3064:	89 83       	std	Y+1, r24	; 0x01
    3066:	03 c0       	rjmp	.+6      	; 0x306e <LCD_goToRowColumn+0x6e>
				break;
		case 3:
				Address=0xD4+col;
    3068:	8b 81       	ldd	r24, Y+3	; 0x03
    306a:	8c 52       	subi	r24, 0x2C	; 44
    306c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_writeCommand(Address);
    306e:	89 81       	ldd	r24, Y+1	; 0x01
    3070:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_writeCommand>
}
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	0f 90       	pop	r0
    307c:	0f 90       	pop	r0
    307e:	cf 91       	pop	r28
    3080:	df 91       	pop	r29
    3082:	08 95       	ret

00003084 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    3084:	df 93       	push	r29
    3086:	cf 93       	push	r28
    3088:	00 d0       	rcall	.+0      	; 0x308a <LCD_displayString+0x6>
    308a:	0f 92       	push	r0
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
    3090:	9b 83       	std	Y+3, r25	; 0x03
    3092:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3094:	19 82       	std	Y+1, r1	; 0x01
    3096:	0e c0       	rjmp	.+28     	; 0x30b4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_writeData(Str[i]);
    3098:	89 81       	ldd	r24, Y+1	; 0x01
    309a:	28 2f       	mov	r18, r24
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	8a 81       	ldd	r24, Y+2	; 0x02
    30a0:	9b 81       	ldd	r25, Y+3	; 0x03
    30a2:	fc 01       	movw	r30, r24
    30a4:	e2 0f       	add	r30, r18
    30a6:	f3 1f       	adc	r31, r19
    30a8:	80 81       	ld	r24, Z
    30aa:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <LCD_writeData>
		i++;
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	8f 5f       	subi	r24, 0xFF	; 255
    30b2:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    30b4:	89 81       	ldd	r24, Y+1	; 0x01
    30b6:	28 2f       	mov	r18, r24
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	8a 81       	ldd	r24, Y+2	; 0x02
    30bc:	9b 81       	ldd	r25, Y+3	; 0x03
    30be:	fc 01       	movw	r30, r24
    30c0:	e2 0f       	add	r30, r18
    30c2:	f3 1f       	adc	r31, r19
    30c4:	80 81       	ld	r24, Z
    30c6:	88 23       	and	r24, r24
    30c8:	39 f7       	brne	.-50     	; 0x3098 <LCD_displayString+0x14>
	{
		LCD_writeData(Str[i]);
		i++;
	}
}
    30ca:	0f 90       	pop	r0
    30cc:	0f 90       	pop	r0
    30ce:	0f 90       	pop	r0
    30d0:	cf 91       	pop	r28
    30d2:	df 91       	pop	r29
    30d4:	08 95       	ret

000030d6 <LCD_clearScreen>:
void LCD_clearScreen(void)
{
    30d6:	df 93       	push	r29
    30d8:	cf 93       	push	r28
    30da:	cd b7       	in	r28, 0x3d	; 61
    30dc:	de b7       	in	r29, 0x3e	; 62
	LCD_writeCommand(CLEAR_COMMAND); //clear display
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <LCD_writeCommand>
}
    30e4:	cf 91       	pop	r28
    30e6:	df 91       	pop	r29
    30e8:	08 95       	ret

000030ea <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    30ea:	df 93       	push	r29
    30ec:	cf 93       	push	r28
    30ee:	cd b7       	in	r28, 0x3d	; 61
    30f0:	de b7       	in	r29, 0x3e	; 62
    30f2:	62 97       	sbiw	r28, 0x12	; 18
    30f4:	0f b6       	in	r0, 0x3f	; 63
    30f6:	f8 94       	cli
    30f8:	de bf       	out	0x3e, r29	; 62
    30fa:	0f be       	out	0x3f, r0	; 63
    30fc:	cd bf       	out	0x3d, r28	; 61
    30fe:	9a 8b       	std	Y+18, r25	; 0x12
    3100:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    3102:	89 89       	ldd	r24, Y+17	; 0x11
    3104:	9a 89       	ldd	r25, Y+18	; 0x12
    3106:	9e 01       	movw	r18, r28
    3108:	2f 5f       	subi	r18, 0xFF	; 255
    310a:	3f 4f       	sbci	r19, 0xFF	; 255
    310c:	b9 01       	movw	r22, r18
    310e:	4a e0       	ldi	r20, 0x0A	; 10
    3110:	50 e0       	ldi	r21, 0x00	; 0
    3112:	0e 94 04 1a 	call	0x3408	; 0x3408 <itoa>
   LCD_displayString(buff);
    3116:	ce 01       	movw	r24, r28
    3118:	01 96       	adiw	r24, 0x01	; 1
    311a:	0e 94 42 18 	call	0x3084	; 0x3084 <LCD_displayString>
}
    311e:	62 96       	adiw	r28, 0x12	; 18
    3120:	0f b6       	in	r0, 0x3f	; 63
    3122:	f8 94       	cli
    3124:	de bf       	out	0x3e, r29	; 62
    3126:	0f be       	out	0x3f, r0	; 63
    3128:	cd bf       	out	0x3d, r28	; 61
    312a:	cf 91       	pop	r28
    312c:	df 91       	pop	r29
    312e:	08 95       	ret

00003130 <KeyPad_init>:

#include "KeyPad.h"


void KeyPad_init()
{
    3130:	df 93       	push	r29
    3132:	cf 93       	push	r28
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
	/*Configure Direction of Rows*/
	GPIO_SetupPin_Direction(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW1,PIN_OUTPUT);
    3138:	82 e0       	ldi	r24, 0x02	; 2
    313a:	62 e0       	ldi	r22, 0x02	; 2
    313c:	41 e0       	ldi	r20, 0x01	; 1
    313e:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW2,PIN_OUTPUT);
    3142:	82 e0       	ldi	r24, 0x02	; 2
    3144:	63 e0       	ldi	r22, 0x03	; 3
    3146:	41 e0       	ldi	r20, 0x01	; 1
    3148:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW3,PIN_OUTPUT);
    314c:	82 e0       	ldi	r24, 0x02	; 2
    314e:	64 e0       	ldi	r22, 0x04	; 4
    3150:	41 e0       	ldi	r20, 0x01	; 1
    3152:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW4,PIN_OUTPUT);
    3156:	82 e0       	ldi	r24, 0x02	; 2
    3158:	65 e0       	ldi	r22, 0x05	; 5
    315a:	41 e0       	ldi	r20, 0x01	; 1
    315c:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_SetupPin_Direction>

	GPIO_SetupPin_Direction(KEYPAD_COLS_PORT_ID,KEYPAD_COL1,PIN_INPUT);
    3160:	83 e0       	ldi	r24, 0x03	; 3
    3162:	63 e0       	ldi	r22, 0x03	; 3
    3164:	40 e0       	ldi	r20, 0x00	; 0
    3166:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_COLS_PORT_ID,KEYPAD_COL2,PIN_INPUT);
    316a:	83 e0       	ldi	r24, 0x03	; 3
    316c:	65 e0       	ldi	r22, 0x05	; 5
    316e:	40 e0       	ldi	r20, 0x00	; 0
    3170:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_COLS_PORT_ID,KEYPAD_COL3,PIN_INPUT);
    3174:	83 e0       	ldi	r24, 0x03	; 3
    3176:	66 e0       	ldi	r22, 0x06	; 6
    3178:	40 e0       	ldi	r20, 0x00	; 0
    317a:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_COLS_PORT_ID,KEYPAD_COL4,PIN_INPUT);
    317e:	83 e0       	ldi	r24, 0x03	; 3
    3180:	67 e0       	ldi	r22, 0x07	; 7
    3182:	40 e0       	ldi	r20, 0x00	; 0
    3184:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_SetupPin_Direction>

	GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW1,LOGIC_HIGH);
    3188:	82 e0       	ldi	r24, 0x02	; 2
    318a:	62 e0       	ldi	r22, 0x02	; 2
    318c:	41 e0       	ldi	r20, 0x01	; 1
    318e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW2,LOGIC_HIGH);
    3192:	82 e0       	ldi	r24, 0x02	; 2
    3194:	63 e0       	ldi	r22, 0x03	; 3
    3196:	41 e0       	ldi	r20, 0x01	; 1
    3198:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW3,LOGIC_HIGH);
    319c:	82 e0       	ldi	r24, 0x02	; 2
    319e:	64 e0       	ldi	r22, 0x04	; 4
    31a0:	41 e0       	ldi	r20, 0x01	; 1
    31a2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW4,LOGIC_HIGH);
    31a6:	82 e0       	ldi	r24, 0x02	; 2
    31a8:	65 e0       	ldi	r22, 0x05	; 5
    31aa:	41 e0       	ldi	r20, 0x01	; 1
    31ac:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>

	GPIO_SetupPin_Value(KEYPAD_COLS_PORT_ID,KEYPAD_ROW1,LOGIC_LOW);
    31b0:	83 e0       	ldi	r24, 0x03	; 3
    31b2:	62 e0       	ldi	r22, 0x02	; 2
    31b4:	40 e0       	ldi	r20, 0x00	; 0
    31b6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_COLS_PORT_ID,KEYPAD_ROW2,LOGIC_LOW);
    31ba:	83 e0       	ldi	r24, 0x03	; 3
    31bc:	63 e0       	ldi	r22, 0x03	; 3
    31be:	40 e0       	ldi	r20, 0x00	; 0
    31c0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_COLS_PORT_ID,KEYPAD_ROW3,LOGIC_LOW);
    31c4:	83 e0       	ldi	r24, 0x03	; 3
    31c6:	64 e0       	ldi	r22, 0x04	; 4
    31c8:	40 e0       	ldi	r20, 0x00	; 0
    31ca:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_COLS_PORT_ID,KEYPAD_ROW4,LOGIC_LOW);
    31ce:	83 e0       	ldi	r24, 0x03	; 3
    31d0:	65 e0       	ldi	r22, 0x05	; 5
    31d2:	40 e0       	ldi	r20, 0x00	; 0
    31d4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>

}
    31d8:	cf 91       	pop	r28
    31da:	df 91       	pop	r29
    31dc:	08 95       	ret

000031de <KeyPad_getPressedKey>:

uint8 KeyPad_getPressedKey()
{
    31de:	df 93       	push	r29
    31e0:	cf 93       	push	r28
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
    31e6:	a0 97       	sbiw	r28, 0x20	; 32
    31e8:	0f b6       	in	r0, 0x3f	; 63
    31ea:	f8 94       	cli
    31ec:	de bf       	out	0x3e, r29	; 62
    31ee:	0f be       	out	0x3f, r0	; 63
    31f0:	cd bf       	out	0x3d, r28	; 61
	uint8 KeyPad_data[NUMBER_OF_ROWS][NUMBER_OF_COLS]=KEYPAD_DATA;
    31f2:	9e 01       	movw	r18, r28
    31f4:	2c 5f       	subi	r18, 0xFC	; 252
    31f6:	3f 4f       	sbci	r19, 0xFF	; 255
    31f8:	3d 8f       	std	Y+29, r19	; 0x1d
    31fa:	2c 8f       	std	Y+28, r18	; 0x1c
    31fc:	88 e6       	ldi	r24, 0x68	; 104
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	9f 8f       	std	Y+31, r25	; 0x1f
    3202:	8e 8f       	std	Y+30, r24	; 0x1e
    3204:	90 e1       	ldi	r25, 0x10	; 16
    3206:	98 a3       	std	Y+32, r25	; 0x20
    3208:	ee 8d       	ldd	r30, Y+30	; 0x1e
    320a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    320c:	00 80       	ld	r0, Z
    320e:	2e 8d       	ldd	r18, Y+30	; 0x1e
    3210:	3f 8d       	ldd	r19, Y+31	; 0x1f
    3212:	2f 5f       	subi	r18, 0xFF	; 255
    3214:	3f 4f       	sbci	r19, 0xFF	; 255
    3216:	3f 8f       	std	Y+31, r19	; 0x1f
    3218:	2e 8f       	std	Y+30, r18	; 0x1e
    321a:	ec 8d       	ldd	r30, Y+28	; 0x1c
    321c:	fd 8d       	ldd	r31, Y+29	; 0x1d
    321e:	00 82       	st	Z, r0
    3220:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3222:	3d 8d       	ldd	r19, Y+29	; 0x1d
    3224:	2f 5f       	subi	r18, 0xFF	; 255
    3226:	3f 4f       	sbci	r19, 0xFF	; 255
    3228:	3d 8f       	std	Y+29, r19	; 0x1d
    322a:	2c 8f       	std	Y+28, r18	; 0x1c
    322c:	38 a1       	ldd	r19, Y+32	; 0x20
    322e:	31 50       	subi	r19, 0x01	; 1
    3230:	38 a3       	std	Y+32, r19	; 0x20
    3232:	88 a1       	ldd	r24, Y+32	; 0x20
    3234:	88 23       	and	r24, r24
    3236:	41 f7       	brne	.-48     	; 0x3208 <KeyPad_getPressedKey+0x2a>

	uint8 KeyPad_col_Pins[NUMBER_OF_COLS]=KEYPAD_COL_PINS;
    3238:	83 e0       	ldi	r24, 0x03	; 3
    323a:	8c 8b       	std	Y+20, r24	; 0x14
    323c:	85 e0       	ldi	r24, 0x05	; 5
    323e:	8d 8b       	std	Y+21, r24	; 0x15
    3240:	86 e0       	ldi	r24, 0x06	; 6
    3242:	8e 8b       	std	Y+22, r24	; 0x16
    3244:	87 e0       	ldi	r24, 0x07	; 7
    3246:	8f 8b       	std	Y+23, r24	; 0x17

	uint8 KeyPad_row_Pins[NUMBER_OF_ROWS]=KEYPAD_ROW_PINS;
    3248:	82 e0       	ldi	r24, 0x02	; 2
    324a:	88 8f       	std	Y+24, r24	; 0x18
    324c:	83 e0       	ldi	r24, 0x03	; 3
    324e:	89 8f       	std	Y+25, r24	; 0x19
    3250:	84 e0       	ldi	r24, 0x04	; 4
    3252:	8a 8f       	std	Y+26, r24	; 0x1a
    3254:	85 e0       	ldi	r24, 0x05	; 5
    3256:	8b 8f       	std	Y+27, r24	; 0x1b

	uint8 Data=0XFF;
    3258:	8f ef       	ldi	r24, 0xFF	; 255
    325a:	8b 83       	std	Y+3, r24	; 0x03

	for(uint8 row=0;row<NUMBER_OF_ROWS;row++)
    325c:	1a 82       	std	Y+2, r1	; 0x02
    325e:	56 c0       	rjmp	.+172    	; 0x330c <KeyPad_getPressedKey+0x12e>
	{
		GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KeyPad_row_Pins[row],LOGIC_LOW);
    3260:	8a 81       	ldd	r24, Y+2	; 0x02
    3262:	28 2f       	mov	r18, r24
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	ce 01       	movw	r24, r28
    3268:	48 96       	adiw	r24, 0x18	; 24
    326a:	fc 01       	movw	r30, r24
    326c:	e2 0f       	add	r30, r18
    326e:	f3 1f       	adc	r31, r19
    3270:	90 81       	ld	r25, Z
    3272:	82 e0       	ldi	r24, 0x02	; 2
    3274:	69 2f       	mov	r22, r25
    3276:	40 e0       	ldi	r20, 0x00	; 0
    3278:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>
		for(uint8 col=0;col<NUMBER_OF_COLS;col++)
    327c:	19 82       	std	Y+1, r1	; 0x01
    327e:	32 c0       	rjmp	.+100    	; 0x32e4 <KeyPad_getPressedKey+0x106>
		{


			while(GET_BIT(KEYPAD_COLS_PORT,KeyPad_col_Pins[col])==LOGIC_LOW)
			{
				Data=KeyPad_data[row][col];
    3280:	8a 81       	ldd	r24, Y+2	; 0x02
    3282:	28 2f       	mov	r18, r24
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	89 81       	ldd	r24, Y+1	; 0x01
    3288:	48 2f       	mov	r20, r24
    328a:	50 e0       	ldi	r21, 0x00	; 0
    328c:	22 0f       	add	r18, r18
    328e:	33 1f       	adc	r19, r19
    3290:	22 0f       	add	r18, r18
    3292:	33 1f       	adc	r19, r19
    3294:	ce 01       	movw	r24, r28
    3296:	01 96       	adiw	r24, 0x01	; 1
    3298:	82 0f       	add	r24, r18
    329a:	93 1f       	adc	r25, r19
    329c:	84 0f       	add	r24, r20
    329e:	95 1f       	adc	r25, r21
    32a0:	fc 01       	movw	r30, r24
    32a2:	33 96       	adiw	r30, 0x03	; 3
    32a4:	80 81       	ld	r24, Z
    32a6:	8b 83       	std	Y+3, r24	; 0x03
		GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KeyPad_row_Pins[row],LOGIC_LOW);
		for(uint8 col=0;col<NUMBER_OF_COLS;col++)
		{


			while(GET_BIT(KEYPAD_COLS_PORT,KeyPad_col_Pins[col])==LOGIC_LOW)
    32a8:	e0 e3       	ldi	r30, 0x30	; 48
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	80 81       	ld	r24, Z
    32ae:	48 2f       	mov	r20, r24
    32b0:	50 e0       	ldi	r21, 0x00	; 0
    32b2:	89 81       	ldd	r24, Y+1	; 0x01
    32b4:	28 2f       	mov	r18, r24
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	ce 01       	movw	r24, r28
    32ba:	44 96       	adiw	r24, 0x14	; 20
    32bc:	fc 01       	movw	r30, r24
    32be:	e2 0f       	add	r30, r18
    32c0:	f3 1f       	adc	r31, r19
    32c2:	80 81       	ld	r24, Z
    32c4:	88 2f       	mov	r24, r24
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	fa 01       	movw	r30, r20
    32ca:	02 c0       	rjmp	.+4      	; 0x32d0 <KeyPad_getPressedKey+0xf2>
    32cc:	f5 95       	asr	r31
    32ce:	e7 95       	ror	r30
    32d0:	8a 95       	dec	r24
    32d2:	e2 f7       	brpl	.-8      	; 0x32cc <KeyPad_getPressedKey+0xee>
    32d4:	cf 01       	movw	r24, r30
    32d6:	81 70       	andi	r24, 0x01	; 1
    32d8:	90 70       	andi	r25, 0x00	; 0
    32da:	00 97       	sbiw	r24, 0x00	; 0
    32dc:	89 f2       	breq	.-94     	; 0x3280 <KeyPad_getPressedKey+0xa2>
	uint8 Data=0XFF;

	for(uint8 row=0;row<NUMBER_OF_ROWS;row++)
	{
		GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KeyPad_row_Pins[row],LOGIC_LOW);
		for(uint8 col=0;col<NUMBER_OF_COLS;col++)
    32de:	89 81       	ldd	r24, Y+1	; 0x01
    32e0:	8f 5f       	subi	r24, 0xFF	; 255
    32e2:	89 83       	std	Y+1, r24	; 0x01
    32e4:	89 81       	ldd	r24, Y+1	; 0x01
    32e6:	84 30       	cpi	r24, 0x04	; 4
    32e8:	f8 f2       	brcs	.-66     	; 0x32a8 <KeyPad_getPressedKey+0xca>
				Data=KeyPad_data[row][col];
			}


		}
		GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KeyPad_row_Pins[row],LOGIC_HIGH);
    32ea:	8a 81       	ldd	r24, Y+2	; 0x02
    32ec:	28 2f       	mov	r18, r24
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	ce 01       	movw	r24, r28
    32f2:	48 96       	adiw	r24, 0x18	; 24
    32f4:	fc 01       	movw	r30, r24
    32f6:	e2 0f       	add	r30, r18
    32f8:	f3 1f       	adc	r31, r19
    32fa:	90 81       	ld	r25, Z
    32fc:	82 e0       	ldi	r24, 0x02	; 2
    32fe:	69 2f       	mov	r22, r25
    3300:	41 e0       	ldi	r20, 0x01	; 1
    3302:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_SetupPin_Value>

	uint8 KeyPad_row_Pins[NUMBER_OF_ROWS]=KEYPAD_ROW_PINS;

	uint8 Data=0XFF;

	for(uint8 row=0;row<NUMBER_OF_ROWS;row++)
    3306:	8a 81       	ldd	r24, Y+2	; 0x02
    3308:	8f 5f       	subi	r24, 0xFF	; 255
    330a:	8a 83       	std	Y+2, r24	; 0x02
    330c:	8a 81       	ldd	r24, Y+2	; 0x02
    330e:	84 30       	cpi	r24, 0x04	; 4
    3310:	08 f4       	brcc	.+2      	; 0x3314 <KeyPad_getPressedKey+0x136>
    3312:	a6 cf       	rjmp	.-180    	; 0x3260 <KeyPad_getPressedKey+0x82>


		}
		GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KeyPad_row_Pins[row],LOGIC_HIGH);
	}
	return Data;
    3314:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3316:	a0 96       	adiw	r28, 0x20	; 32
    3318:	0f b6       	in	r0, 0x3f	; 63
    331a:	f8 94       	cli
    331c:	de bf       	out	0x3e, r29	; 62
    331e:	0f be       	out	0x3f, r0	; 63
    3320:	cd bf       	out	0x3d, r28	; 61
    3322:	cf 91       	pop	r28
    3324:	df 91       	pop	r29
    3326:	08 95       	ret

00003328 <mapAngle>:
//#include"MCAL/Timer0/Timer0_interface.h"

#undef F_CPU
#define F_CPU 16000000U

uint16 mapAngle(uint16 angle) {
    3328:	df 93       	push	r29
    332a:	cf 93       	push	r28
    332c:	00 d0       	rcall	.+0      	; 0x332e <mapAngle+0x6>
    332e:	00 d0       	rcall	.+0      	; 0x3330 <mapAngle+0x8>
    3330:	cd b7       	in	r28, 0x3d	; 61
    3332:	de b7       	in	r29, 0x3e	; 62
    3334:	9c 83       	std	Y+4, r25	; 0x04
    3336:	8b 83       	std	Y+3, r24	; 0x03
    uint16 pulseWidth = (angle * (1750/180) + 750) * 2;
    3338:	8b 81       	ldd	r24, Y+3	; 0x03
    333a:	9c 81       	ldd	r25, Y+4	; 0x04
    333c:	9c 01       	movw	r18, r24
    333e:	22 0f       	add	r18, r18
    3340:	33 1f       	adc	r19, r19
    3342:	c9 01       	movw	r24, r18
    3344:	88 0f       	add	r24, r24
    3346:	99 1f       	adc	r25, r25
    3348:	88 0f       	add	r24, r24
    334a:	99 1f       	adc	r25, r25
    334c:	88 0f       	add	r24, r24
    334e:	99 1f       	adc	r25, r25
    3350:	82 0f       	add	r24, r18
    3352:	93 1f       	adc	r25, r19
    3354:	84 52       	subi	r24, 0x24	; 36
    3356:	9a 4f       	sbci	r25, 0xFA	; 250
    3358:	9a 83       	std	Y+2, r25	; 0x02
    335a:	89 83       	std	Y+1, r24	; 0x01
    return pulseWidth;
    335c:	89 81       	ldd	r24, Y+1	; 0x01
    335e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3360:	0f 90       	pop	r0
    3362:	0f 90       	pop	r0
    3364:	0f 90       	pop	r0
    3366:	0f 90       	pop	r0
    3368:	cf 91       	pop	r28
    336a:	df 91       	pop	r29
    336c:	08 95       	ret

0000336e <main>:

int  main(void)
{
    336e:	df 93       	push	r29
    3370:	cf 93       	push	r28
    3372:	cd b7       	in	r28, 0x3d	; 61
    3374:	de b7       	in	r29, 0x3e	; 62
	TIM1_init();
    3376:	0e 94 39 08 	call	0x1072	; 0x1072 <TIM1_init>
	TIM1_setICR(40000);
    337a:	80 e4       	ldi	r24, 0x40	; 64
    337c:	9c e9       	ldi	r25, 0x9C	; 156
    337e:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <TIM1_setICR>
	GPIO_SetupPin_Direction(PORTD_ID,5, PIN_OUTPUT);
    3382:	83 e0       	ldi	r24, 0x03	; 3
    3384:	65 e0       	ldi	r22, 0x05	; 5
    3386:	41 e0       	ldi	r20, 0x01	; 1
    3388:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_SetupPin_Direction>
	TIM1_dutyCycle_OCRA(1000);
    338c:	88 ee       	ldi	r24, 0xE8	; 232
    338e:	93 e0       	ldi	r25, 0x03	; 3
    3390:	0e 94 8e 08 	call	0x111c	; 0x111c <TIM1_dutyCycle_OCRA>
	TIM1_start();
    3394:	0e 94 52 08 	call	0x10a4	; 0x10a4 <TIM1_start>
    3398:	ff cf       	rjmp	.-2      	; 0x3398 <main+0x2a>

0000339a <__prologue_saves__>:
    339a:	2f 92       	push	r2
    339c:	3f 92       	push	r3
    339e:	4f 92       	push	r4
    33a0:	5f 92       	push	r5
    33a2:	6f 92       	push	r6
    33a4:	7f 92       	push	r7
    33a6:	8f 92       	push	r8
    33a8:	9f 92       	push	r9
    33aa:	af 92       	push	r10
    33ac:	bf 92       	push	r11
    33ae:	cf 92       	push	r12
    33b0:	df 92       	push	r13
    33b2:	ef 92       	push	r14
    33b4:	ff 92       	push	r15
    33b6:	0f 93       	push	r16
    33b8:	1f 93       	push	r17
    33ba:	cf 93       	push	r28
    33bc:	df 93       	push	r29
    33be:	cd b7       	in	r28, 0x3d	; 61
    33c0:	de b7       	in	r29, 0x3e	; 62
    33c2:	ca 1b       	sub	r28, r26
    33c4:	db 0b       	sbc	r29, r27
    33c6:	0f b6       	in	r0, 0x3f	; 63
    33c8:	f8 94       	cli
    33ca:	de bf       	out	0x3e, r29	; 62
    33cc:	0f be       	out	0x3f, r0	; 63
    33ce:	cd bf       	out	0x3d, r28	; 61
    33d0:	09 94       	ijmp

000033d2 <__epilogue_restores__>:
    33d2:	2a 88       	ldd	r2, Y+18	; 0x12
    33d4:	39 88       	ldd	r3, Y+17	; 0x11
    33d6:	48 88       	ldd	r4, Y+16	; 0x10
    33d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    33da:	6e 84       	ldd	r6, Y+14	; 0x0e
    33dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    33de:	8c 84       	ldd	r8, Y+12	; 0x0c
    33e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    33e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    33e4:	b9 84       	ldd	r11, Y+9	; 0x09
    33e6:	c8 84       	ldd	r12, Y+8	; 0x08
    33e8:	df 80       	ldd	r13, Y+7	; 0x07
    33ea:	ee 80       	ldd	r14, Y+6	; 0x06
    33ec:	fd 80       	ldd	r15, Y+5	; 0x05
    33ee:	0c 81       	ldd	r16, Y+4	; 0x04
    33f0:	1b 81       	ldd	r17, Y+3	; 0x03
    33f2:	aa 81       	ldd	r26, Y+2	; 0x02
    33f4:	b9 81       	ldd	r27, Y+1	; 0x01
    33f6:	ce 0f       	add	r28, r30
    33f8:	d1 1d       	adc	r29, r1
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	f8 94       	cli
    33fe:	de bf       	out	0x3e, r29	; 62
    3400:	0f be       	out	0x3f, r0	; 63
    3402:	cd bf       	out	0x3d, r28	; 61
    3404:	ed 01       	movw	r28, r26
    3406:	08 95       	ret

00003408 <itoa>:
    3408:	fb 01       	movw	r30, r22
    340a:	9f 01       	movw	r18, r30
    340c:	e8 94       	clt
    340e:	42 30       	cpi	r20, 0x02	; 2
    3410:	c4 f0       	brlt	.+48     	; 0x3442 <itoa+0x3a>
    3412:	45 32       	cpi	r20, 0x25	; 37
    3414:	b4 f4       	brge	.+44     	; 0x3442 <itoa+0x3a>
    3416:	4a 30       	cpi	r20, 0x0A	; 10
    3418:	29 f4       	brne	.+10     	; 0x3424 <itoa+0x1c>
    341a:	97 fb       	bst	r25, 7
    341c:	1e f4       	brtc	.+6      	; 0x3424 <itoa+0x1c>
    341e:	90 95       	com	r25
    3420:	81 95       	neg	r24
    3422:	9f 4f       	sbci	r25, 0xFF	; 255
    3424:	64 2f       	mov	r22, r20
    3426:	77 27       	eor	r23, r23
    3428:	0e 94 35 1a 	call	0x346a	; 0x346a <__udivmodhi4>
    342c:	80 5d       	subi	r24, 0xD0	; 208
    342e:	8a 33       	cpi	r24, 0x3A	; 58
    3430:	0c f0       	brlt	.+2      	; 0x3434 <itoa+0x2c>
    3432:	89 5d       	subi	r24, 0xD9	; 217
    3434:	81 93       	st	Z+, r24
    3436:	cb 01       	movw	r24, r22
    3438:	00 97       	sbiw	r24, 0x00	; 0
    343a:	a1 f7       	brne	.-24     	; 0x3424 <itoa+0x1c>
    343c:	16 f4       	brtc	.+4      	; 0x3442 <itoa+0x3a>
    343e:	5d e2       	ldi	r21, 0x2D	; 45
    3440:	51 93       	st	Z+, r21
    3442:	10 82       	st	Z, r1
    3444:	c9 01       	movw	r24, r18
    3446:	0c 94 25 1a 	jmp	0x344a	; 0x344a <strrev>

0000344a <strrev>:
    344a:	dc 01       	movw	r26, r24
    344c:	fc 01       	movw	r30, r24
    344e:	67 2f       	mov	r22, r23
    3450:	71 91       	ld	r23, Z+
    3452:	77 23       	and	r23, r23
    3454:	e1 f7       	brne	.-8      	; 0x344e <strrev+0x4>
    3456:	32 97       	sbiw	r30, 0x02	; 2
    3458:	04 c0       	rjmp	.+8      	; 0x3462 <strrev+0x18>
    345a:	7c 91       	ld	r23, X
    345c:	6d 93       	st	X+, r22
    345e:	70 83       	st	Z, r23
    3460:	62 91       	ld	r22, -Z
    3462:	ae 17       	cp	r26, r30
    3464:	bf 07       	cpc	r27, r31
    3466:	c8 f3       	brcs	.-14     	; 0x345a <strrev+0x10>
    3468:	08 95       	ret

0000346a <__udivmodhi4>:
    346a:	aa 1b       	sub	r26, r26
    346c:	bb 1b       	sub	r27, r27
    346e:	51 e1       	ldi	r21, 0x11	; 17
    3470:	07 c0       	rjmp	.+14     	; 0x3480 <__udivmodhi4_ep>

00003472 <__udivmodhi4_loop>:
    3472:	aa 1f       	adc	r26, r26
    3474:	bb 1f       	adc	r27, r27
    3476:	a6 17       	cp	r26, r22
    3478:	b7 07       	cpc	r27, r23
    347a:	10 f0       	brcs	.+4      	; 0x3480 <__udivmodhi4_ep>
    347c:	a6 1b       	sub	r26, r22
    347e:	b7 0b       	sbc	r27, r23

00003480 <__udivmodhi4_ep>:
    3480:	88 1f       	adc	r24, r24
    3482:	99 1f       	adc	r25, r25
    3484:	5a 95       	dec	r21
    3486:	a9 f7       	brne	.-22     	; 0x3472 <__udivmodhi4_loop>
    3488:	80 95       	com	r24
    348a:	90 95       	com	r25
    348c:	bc 01       	movw	r22, r24
    348e:	cd 01       	movw	r24, r26
    3490:	08 95       	ret

00003492 <_exit>:
    3492:	f8 94       	cli

00003494 <__stop_program>:
    3494:	ff cf       	rjmp	.-2      	; 0x3494 <__stop_program>
