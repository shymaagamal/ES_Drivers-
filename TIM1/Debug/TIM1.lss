
TIM1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003582  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00003582  00003616  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800078  00800078  0000362e  2**0
                  ALLOC
  3 .stab         00003e70  00000000  00000000  00003630  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000028e9  00000000  00000000  000074a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009d89  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a039  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bc82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000cb6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d91c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000da7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000dd09  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e4d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <__vector_1>
       8:	0c 94 7d 10 	jmp	0x20fa	; 0x20fa <__vector_2>
       c:	0c 94 b0 10 	jmp	0x2160	; 0x2160 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 51 09 	jmp	0x12a2	; 0x12a2 <__vector_6>
      1c:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__vector_7>
      20:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__vector_8>
      24:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b3 19 	call	0x3366	; 0x3366 <main>
      8a:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 43 1a 	jmp	0x3486	; 0x3486 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5f 1a 	jmp	0x34be	; 0x34be <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4f 1a 	jmp	0x349e	; 0x349e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6b 1a 	jmp	0x34d6	; 0x34d6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4f 1a 	jmp	0x349e	; 0x349e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6b 1a 	jmp	0x34d6	; 0x34d6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 43 1a 	jmp	0x3486	; 0x3486 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5f 1a 	jmp	0x34be	; 0x34be <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4f 1a 	jmp	0x349e	; 0x349e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6b 1a 	jmp	0x34d6	; 0x34d6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4f 1a 	jmp	0x349e	; 0x349e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6b 1a 	jmp	0x34d6	; 0x34d6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4f 1a 	jmp	0x349e	; 0x349e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6b 1a 	jmp	0x34d6	; 0x34d6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 53 1a 	jmp	0x34a6	; 0x34a6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIM1_WGMMood>:
void (*TIM1_callBackOCRA_ptr)(void) = NULL;
void (*TIM1_callBackOCRB_ptr)(void) = NULL;
void (*TIM1_callBackICR_ptr)(void) = NULL;

void TIM1_WGMMood(WGMMood WGM)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <TIM1_WGMMood+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	89 83       	std	Y+1, r24	; 0x01

switch(WGM)
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	28 2f       	mov	r18, r24
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	3b 83       	std	Y+3, r19	; 0x03
     b5c:	2a 83       	std	Y+2, r18	; 0x02
     b5e:	8a 81       	ldd	r24, Y+2	; 0x02
     b60:	9b 81       	ldd	r25, Y+3	; 0x03
     b62:	87 30       	cpi	r24, 0x07	; 7
     b64:	91 05       	cpc	r25, r1
     b66:	09 f4       	brne	.+2      	; 0xb6a <TIM1_WGMMood+0x24>
     b68:	ad c0       	rjmp	.+346    	; 0xcc4 <TIM1_WGMMood+0x17e>
     b6a:	2a 81       	ldd	r18, Y+2	; 0x02
     b6c:	3b 81       	ldd	r19, Y+3	; 0x03
     b6e:	28 30       	cpi	r18, 0x08	; 8
     b70:	31 05       	cpc	r19, r1
     b72:	4c f5       	brge	.+82     	; 0xbc6 <TIM1_WGMMood+0x80>
     b74:	8a 81       	ldd	r24, Y+2	; 0x02
     b76:	9b 81       	ldd	r25, Y+3	; 0x03
     b78:	83 30       	cpi	r24, 0x03	; 3
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <TIM1_WGMMood+0x3a>
     b7e:	71 c0       	rjmp	.+226    	; 0xc62 <TIM1_WGMMood+0x11c>
     b80:	2a 81       	ldd	r18, Y+2	; 0x02
     b82:	3b 81       	ldd	r19, Y+3	; 0x03
     b84:	24 30       	cpi	r18, 0x04	; 4
     b86:	31 05       	cpc	r19, r1
     b88:	8c f4       	brge	.+34     	; 0xbac <TIM1_WGMMood+0x66>
     b8a:	8a 81       	ldd	r24, Y+2	; 0x02
     b8c:	9b 81       	ldd	r25, Y+3	; 0x03
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	91 05       	cpc	r25, r1
     b92:	09 f4       	brne	.+2      	; 0xb96 <TIM1_WGMMood+0x50>
     b94:	4e c0       	rjmp	.+156    	; 0xc32 <TIM1_WGMMood+0xec>
     b96:	2a 81       	ldd	r18, Y+2	; 0x02
     b98:	3b 81       	ldd	r19, Y+3	; 0x03
     b9a:	22 30       	cpi	r18, 0x02	; 2
     b9c:	31 05       	cpc	r19, r1
     b9e:	0c f0       	brlt	.+2      	; 0xba2 <TIM1_WGMMood+0x5c>
     ba0:	54 c0       	rjmp	.+168    	; 0xc4a <TIM1_WGMMood+0x104>
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	9b 81       	ldd	r25, Y+3	; 0x03
     ba6:	00 97       	sbiw	r24, 0x00	; 0
     ba8:	c9 f1       	breq	.+114    	; 0xc1c <TIM1_WGMMood+0xd6>
     baa:	e8 c0       	rjmp	.+464    	; 0xd7c <TIM1_WGMMood+0x236>
     bac:	2a 81       	ldd	r18, Y+2	; 0x02
     bae:	3b 81       	ldd	r19, Y+3	; 0x03
     bb0:	25 30       	cpi	r18, 0x05	; 5
     bb2:	31 05       	cpc	r19, r1
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <TIM1_WGMMood+0x72>
     bb6:	6c c0       	rjmp	.+216    	; 0xc90 <TIM1_WGMMood+0x14a>
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	9b 81       	ldd	r25, Y+3	; 0x03
     bbc:	86 30       	cpi	r24, 0x06	; 6
     bbe:	91 05       	cpc	r25, r1
     bc0:	0c f0       	brlt	.+2      	; 0xbc4 <TIM1_WGMMood+0x7e>
     bc2:	73 c0       	rjmp	.+230    	; 0xcaa <TIM1_WGMMood+0x164>
     bc4:	59 c0       	rjmp	.+178    	; 0xc78 <TIM1_WGMMood+0x132>
     bc6:	2a 81       	ldd	r18, Y+2	; 0x02
     bc8:	3b 81       	ldd	r19, Y+3	; 0x03
     bca:	2b 30       	cpi	r18, 0x0B	; 11
     bcc:	31 05       	cpc	r19, r1
     bce:	09 f4       	brne	.+2      	; 0xbd2 <TIM1_WGMMood+0x8c>
     bd0:	a7 c0       	rjmp	.+334    	; 0xd20 <TIM1_WGMMood+0x1da>
     bd2:	8a 81       	ldd	r24, Y+2	; 0x02
     bd4:	9b 81       	ldd	r25, Y+3	; 0x03
     bd6:	8c 30       	cpi	r24, 0x0C	; 12
     bd8:	91 05       	cpc	r25, r1
     bda:	6c f4       	brge	.+26     	; 0xbf6 <TIM1_WGMMood+0xb0>
     bdc:	2a 81       	ldd	r18, Y+2	; 0x02
     bde:	3b 81       	ldd	r19, Y+3	; 0x03
     be0:	29 30       	cpi	r18, 0x09	; 9
     be2:	31 05       	cpc	r19, r1
     be4:	09 f4       	brne	.+2      	; 0xbe8 <TIM1_WGMMood+0xa2>
     be6:	86 c0       	rjmp	.+268    	; 0xcf4 <TIM1_WGMMood+0x1ae>
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	9b 81       	ldd	r25, Y+3	; 0x03
     bec:	8a 30       	cpi	r24, 0x0A	; 10
     bee:	91 05       	cpc	r25, r1
     bf0:	0c f0       	brlt	.+2      	; 0xbf4 <TIM1_WGMMood+0xae>
     bf2:	8b c0       	rjmp	.+278    	; 0xd0a <TIM1_WGMMood+0x1c4>
     bf4:	73 c0       	rjmp	.+230    	; 0xcdc <TIM1_WGMMood+0x196>
     bf6:	2a 81       	ldd	r18, Y+2	; 0x02
     bf8:	3b 81       	ldd	r19, Y+3	; 0x03
     bfa:	2d 30       	cpi	r18, 0x0D	; 13
     bfc:	31 05       	cpc	r19, r1
     bfe:	09 f4       	brne	.+2      	; 0xc02 <TIM1_WGMMood+0xbc>
     c00:	a7 c0       	rjmp	.+334    	; 0xd50 <TIM1_WGMMood+0x20a>
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	9b 81       	ldd	r25, Y+3	; 0x03
     c06:	8d 30       	cpi	r24, 0x0D	; 13
     c08:	91 05       	cpc	r25, r1
     c0a:	0c f4       	brge	.+2      	; 0xc0e <TIM1_WGMMood+0xc8>
     c0c:	96 c0       	rjmp	.+300    	; 0xd3a <TIM1_WGMMood+0x1f4>
     c0e:	2a 81       	ldd	r18, Y+2	; 0x02
     c10:	3b 81       	ldd	r19, Y+3	; 0x03
     c12:	2e 30       	cpi	r18, 0x0E	; 14
     c14:	31 05       	cpc	r19, r1
     c16:	09 f4       	brne	.+2      	; 0xc1a <TIM1_WGMMood+0xd4>
     c18:	a7 c0       	rjmp	.+334    	; 0xd68 <TIM1_WGMMood+0x222>
     c1a:	b0 c0       	rjmp	.+352    	; 0xd7c <TIM1_WGMMood+0x236>
{
case TIM1_Normal:
TCCR1A_REG->WGM=0b00;
     c1c:	ef e4       	ldi	r30, 0x4F	; 79
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	8c 7f       	andi	r24, 0xFC	; 252
     c24:	80 83       	st	Z, r24
TCCR1B_REG->WGM=0b00;
     c26:	ee e4       	ldi	r30, 0x4E	; 78
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	87 7e       	andi	r24, 0xE7	; 231
     c2e:	80 83       	st	Z, r24
     c30:	a5 c0       	rjmp	.+330    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_PWMPhaseCorrect8bit:
	TCCR1A_REG->WGM=0b01;
     c32:	ef e4       	ldi	r30, 0x4F	; 79
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	8c 7f       	andi	r24, 0xFC	; 252
     c3a:	81 60       	ori	r24, 0x01	; 1
     c3c:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b00;
     c3e:	ee e4       	ldi	r30, 0x4E	; 78
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	87 7e       	andi	r24, 0xE7	; 231
     c46:	80 83       	st	Z, r24
     c48:	99 c0       	rjmp	.+306    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_PWMPhaseCorrect9bit:
	TCCR1A_REG->WGM=0b10;
     c4a:	ef e4       	ldi	r30, 0x4F	; 79
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	8c 7f       	andi	r24, 0xFC	; 252
     c52:	82 60       	ori	r24, 0x02	; 2
     c54:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b00;
     c56:	ee e4       	ldi	r30, 0x4E	; 78
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	87 7e       	andi	r24, 0xE7	; 231
     c5e:	80 83       	st	Z, r24
     c60:	8d c0       	rjmp	.+282    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_PWMPhaseCorrect10bit:
	TCCR1A_REG->WGM=0b11;
     c62:	ef e4       	ldi	r30, 0x4F	; 79
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	83 60       	ori	r24, 0x03	; 3
     c6a:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b00;
     c6c:	ee e4       	ldi	r30, 0x4E	; 78
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	87 7e       	andi	r24, 0xE7	; 231
     c74:	80 83       	st	Z, r24
     c76:	82 c0       	rjmp	.+260    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_CTC:
	TCCR1A_REG->WGM=0b00;
     c78:	ef e4       	ldi	r30, 0x4F	; 79
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	8c 7f       	andi	r24, 0xFC	; 252
     c80:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b01;
     c82:	ee e4       	ldi	r30, 0x4E	; 78
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	87 7e       	andi	r24, 0xE7	; 231
     c8a:	88 60       	ori	r24, 0x08	; 8
     c8c:	80 83       	st	Z, r24
     c8e:	76 c0       	rjmp	.+236    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_FastPWM8bit:
	TCCR1A_REG->WGM=0b01;
     c90:	ef e4       	ldi	r30, 0x4F	; 79
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	8c 7f       	andi	r24, 0xFC	; 252
     c98:	81 60       	ori	r24, 0x01	; 1
     c9a:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b10;
     c9c:	ee e4       	ldi	r30, 0x4E	; 78
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	87 7e       	andi	r24, 0xE7	; 231
     ca4:	80 61       	ori	r24, 0x10	; 16
     ca6:	80 83       	st	Z, r24
     ca8:	69 c0       	rjmp	.+210    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_FastPWM9bit:
	TCCR1A_REG->WGM=0b10;
     caa:	ef e4       	ldi	r30, 0x4F	; 79
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8c 7f       	andi	r24, 0xFC	; 252
     cb2:	82 60       	ori	r24, 0x02	; 2
     cb4:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b01;
     cb6:	ee e4       	ldi	r30, 0x4E	; 78
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	87 7e       	andi	r24, 0xE7	; 231
     cbe:	88 60       	ori	r24, 0x08	; 8
     cc0:	80 83       	st	Z, r24
     cc2:	5c c0       	rjmp	.+184    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_FastPWM10bit:
	TCCR1A_REG->WGM=0b11;
     cc4:	ef e4       	ldi	r30, 0x4F	; 79
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	83 60       	ori	r24, 0x03	; 3
     ccc:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b01;
     cce:	ee e4       	ldi	r30, 0x4E	; 78
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	87 7e       	andi	r24, 0xE7	; 231
     cd6:	88 60       	ori	r24, 0x08	; 8
     cd8:	80 83       	st	Z, r24
     cda:	50 c0       	rjmp	.+160    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_PWMPhaseandFrequencyCorrect_ICR1_TOP:
	TCCR1A_REG->WGM=0b00;
     cdc:	ef e4       	ldi	r30, 0x4F	; 79
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	8c 7f       	andi	r24, 0xFC	; 252
     ce4:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b10;
     ce6:	ee e4       	ldi	r30, 0x4E	; 78
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	87 7e       	andi	r24, 0xE7	; 231
     cee:	80 61       	ori	r24, 0x10	; 16
     cf0:	80 83       	st	Z, r24
     cf2:	44 c0       	rjmp	.+136    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_PWMPhaseandFrequencyCorrect_OCR1A_TOP:
	TCCR1A_REG->WGM=0b00;
     cf4:	ef e4       	ldi	r30, 0x4F	; 79
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	8c 7f       	andi	r24, 0xFC	; 252
     cfc:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b00;
     cfe:	ee e4       	ldi	r30, 0x4E	; 78
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	87 7e       	andi	r24, 0xE7	; 231
     d06:	80 83       	st	Z, r24
     d08:	39 c0       	rjmp	.+114    	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_PWMPhaseCorrect_ICR1_TOP:
	TCCR1A_REG->WGM=0b00;
     d0a:	ef e4       	ldi	r30, 0x4F	; 79
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	8c 7f       	andi	r24, 0xFC	; 252
     d12:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b00;
     d14:	ee e4       	ldi	r30, 0x4E	; 78
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	87 7e       	andi	r24, 0xE7	; 231
     d1c:	80 83       	st	Z, r24
     d1e:	2e c0       	rjmp	.+92     	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_PWMPhaseCorrect_OCR1A_TOP:
	TCCR1A_REG->WGM=0b01;
     d20:	ef e4       	ldi	r30, 0x4F	; 79
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	8c 7f       	andi	r24, 0xFC	; 252
     d28:	81 60       	ori	r24, 0x01	; 1
     d2a:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b10;
     d2c:	ee e4       	ldi	r30, 0x4E	; 78
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	87 7e       	andi	r24, 0xE7	; 231
     d34:	80 61       	ori	r24, 0x10	; 16
     d36:	80 83       	st	Z, r24
     d38:	21 c0       	rjmp	.+66     	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_CTC_ICR1_TOP:
	TCCR1A_REG->WGM=0b00;
     d3a:	ef e4       	ldi	r30, 0x4F	; 79
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8c 7f       	andi	r24, 0xFC	; 252
     d42:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b11;
     d44:	ee e4       	ldi	r30, 0x4E	; 78
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	88 61       	ori	r24, 0x18	; 24
     d4c:	80 83       	st	Z, r24
     d4e:	16 c0       	rjmp	.+44     	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_FASTPWM_ICR1_TOP:
	TCCR1A_REG->WGM=0b10;
     d50:	ef e4       	ldi	r30, 0x4F	; 79
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	8c 7f       	andi	r24, 0xFC	; 252
     d58:	82 60       	ori	r24, 0x02	; 2
     d5a:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b11;
     d5c:	ee e4       	ldi	r30, 0x4E	; 78
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	88 61       	ori	r24, 0x18	; 24
     d64:	80 83       	st	Z, r24
     d66:	0a c0       	rjmp	.+20     	; 0xd7c <TIM1_WGMMood+0x236>
break;
case TIM1_FASTPWM_OCR1A_TOP:
	TCCR1A_REG->WGM=0b11;
     d68:	ef e4       	ldi	r30, 0x4F	; 79
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	83 60       	ori	r24, 0x03	; 3
     d70:	80 83       	st	Z, r24
	TCCR1B_REG->WGM=0b11;
     d72:	ee e4       	ldi	r30, 0x4E	; 78
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	88 61       	ori	r24, 0x18	; 24
     d7a:	80 83       	st	Z, r24
break;
}


}
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <TIM1_FastPWMMood>:
void TIM1_FastPWMMood(COMFastPWM COM)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <TIM1_FastPWMMood+0x6>
     d8e:	0f 92       	push	r0
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	89 83       	std	Y+1, r24	; 0x01
	switch(COM)
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	3b 83       	std	Y+3, r19	; 0x03
     d9e:	2a 83       	std	Y+2, r18	; 0x02
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	9b 81       	ldd	r25, Y+3	; 0x03
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	59 f1       	breq	.+86     	; 0xe00 <TIM1_FastPWMMood+0x78>
     daa:	2a 81       	ldd	r18, Y+2	; 0x02
     dac:	3b 81       	ldd	r19, Y+3	; 0x03
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	2c f4       	brge	.+10     	; 0xdbe <TIM1_FastPWMMood+0x36>
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	9b 81       	ldd	r25, Y+3	; 0x03
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	69 f0       	breq	.+26     	; 0xdd6 <TIM1_FastPWMMood+0x4e>
     dbc:	5f c0       	rjmp	.+190    	; 0xe7c <TIM1_FastPWMMood+0xf4>
     dbe:	2a 81       	ldd	r18, Y+2	; 0x02
     dc0:	3b 81       	ldd	r19, Y+3	; 0x03
     dc2:	22 30       	cpi	r18, 0x02	; 2
     dc4:	31 05       	cpc	r19, r1
     dc6:	89 f1       	breq	.+98     	; 0xe2a <TIM1_FastPWMMood+0xa2>
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	9b 81       	ldd	r25, Y+3	; 0x03
     dcc:	83 30       	cpi	r24, 0x03	; 3
     dce:	91 05       	cpc	r25, r1
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <TIM1_FastPWMMood+0x4c>
     dd2:	40 c0       	rjmp	.+128    	; 0xe54 <TIM1_FastPWMMood+0xcc>
     dd4:	53 c0       	rjmp	.+166    	; 0xe7c <TIM1_FastPWMMood+0xf4>
	{
	case TIM1_NormalFastPWM:
		TCCR1A_REG->COM1A0=0;
     dd6:	ef e4       	ldi	r30, 0x4F	; 79
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	8f 7b       	andi	r24, 0xBF	; 191
     dde:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=0;
     de0:	ef e4       	ldi	r30, 0x4F	; 79
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	8f 7e       	andi	r24, 0xEF	; 239
     de8:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=0;
     dea:	ef e4       	ldi	r30, 0x4F	; 79
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	8f 77       	andi	r24, 0x7F	; 127
     df2:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=0;
     df4:	ef e4       	ldi	r30, 0x4F	; 79
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	8f 7d       	andi	r24, 0xDF	; 223
     dfc:	80 83       	st	Z, r24
     dfe:	3e c0       	rjmp	.+124    	; 0xe7c <TIM1_FastPWMMood+0xf4>
		break;
	case TIM1_Toggle_OC1A_OnCompareMatchFastPWM:
		TCCR1A_REG->COM1A0=1;
     e00:	ef e4       	ldi	r30, 0x4F	; 79
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	80 64       	ori	r24, 0x40	; 64
     e08:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=1;
     e0a:	ef e4       	ldi	r30, 0x4F	; 79
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	80 61       	ori	r24, 0x10	; 16
     e12:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=0;
     e14:	ef e4       	ldi	r30, 0x4F	; 79
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	8f 77       	andi	r24, 0x7F	; 127
     e1c:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=0;
     e1e:	ef e4       	ldi	r30, 0x4F	; 79
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	8f 7d       	andi	r24, 0xDF	; 223
     e26:	80 83       	st	Z, r24
     e28:	29 c0       	rjmp	.+82     	; 0xe7c <TIM1_FastPWMMood+0xf4>
		break;
	case TIM1_ClearOnCompareMatchFastPWM:
		TCCR1A_REG->COM1A0=0;
     e2a:	ef e4       	ldi	r30, 0x4F	; 79
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	8f 7b       	andi	r24, 0xBF	; 191
     e32:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=0;
     e34:	ef e4       	ldi	r30, 0x4F	; 79
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	8f 7e       	andi	r24, 0xEF	; 239
     e3c:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=1;
     e3e:	ef e4       	ldi	r30, 0x4F	; 79
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	80 68       	ori	r24, 0x80	; 128
     e46:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=1;
     e48:	ef e4       	ldi	r30, 0x4F	; 79
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 62       	ori	r24, 0x20	; 32
     e50:	80 83       	st	Z, r24
     e52:	14 c0       	rjmp	.+40     	; 0xe7c <TIM1_FastPWMMood+0xf4>
		break;
	case TIM1_SetOnCompareMatchFastPWM:
		TCCR1A_REG->COM1A0=1;
     e54:	ef e4       	ldi	r30, 0x4F	; 79
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	80 64       	ori	r24, 0x40	; 64
     e5c:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=1;
     e5e:	ef e4       	ldi	r30, 0x4F	; 79
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	80 61       	ori	r24, 0x10	; 16
     e66:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=1;
     e68:	ef e4       	ldi	r30, 0x4F	; 79
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	80 68       	ori	r24, 0x80	; 128
     e70:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=1;
     e72:	ef e4       	ldi	r30, 0x4F	; 79
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 62       	ori	r24, 0x20	; 32
     e7a:	80 83       	st	Z, r24
		break;

	}
}
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <TIM1_NonPWMMood>:
void TIM1_NonPWMMood(COMNonPWM COM)
{
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <TIM1_NonPWMMood+0x6>
     e8e:	0f 92       	push	r0
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	89 83       	std	Y+1, r24	; 0x01
	switch(COM)
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	3b 83       	std	Y+3, r19	; 0x03
     e9e:	2a 83       	std	Y+2, r18	; 0x02
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	9b 81       	ldd	r25, Y+3	; 0x03
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	91 05       	cpc	r25, r1
     ea8:	59 f1       	breq	.+86     	; 0xf00 <TIM1_NonPWMMood+0x78>
     eaa:	2a 81       	ldd	r18, Y+2	; 0x02
     eac:	3b 81       	ldd	r19, Y+3	; 0x03
     eae:	22 30       	cpi	r18, 0x02	; 2
     eb0:	31 05       	cpc	r19, r1
     eb2:	2c f4       	brge	.+10     	; 0xebe <TIM1_NonPWMMood+0x36>
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	9b 81       	ldd	r25, Y+3	; 0x03
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	69 f0       	breq	.+26     	; 0xed6 <TIM1_NonPWMMood+0x4e>
     ebc:	5f c0       	rjmp	.+190    	; 0xf7c <TIM1_NonPWMMood+0xf4>
     ebe:	2a 81       	ldd	r18, Y+2	; 0x02
     ec0:	3b 81       	ldd	r19, Y+3	; 0x03
     ec2:	22 30       	cpi	r18, 0x02	; 2
     ec4:	31 05       	cpc	r19, r1
     ec6:	89 f1       	breq	.+98     	; 0xf2a <TIM1_NonPWMMood+0xa2>
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	9b 81       	ldd	r25, Y+3	; 0x03
     ecc:	83 30       	cpi	r24, 0x03	; 3
     ece:	91 05       	cpc	r25, r1
     ed0:	09 f4       	brne	.+2      	; 0xed4 <TIM1_NonPWMMood+0x4c>
     ed2:	40 c0       	rjmp	.+128    	; 0xf54 <TIM1_NonPWMMood+0xcc>
     ed4:	53 c0       	rjmp	.+166    	; 0xf7c <TIM1_NonPWMMood+0xf4>
	{
	case TIM1_NormalNONPWM:
		TCCR1A_REG->COM1A0=0;
     ed6:	ef e4       	ldi	r30, 0x4F	; 79
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	8f 7b       	andi	r24, 0xBF	; 191
     ede:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=0;
     ee0:	ef e4       	ldi	r30, 0x4F	; 79
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	8f 7e       	andi	r24, 0xEF	; 239
     ee8:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=0;
     eea:	ef e4       	ldi	r30, 0x4F	; 79
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	8f 77       	andi	r24, 0x7F	; 127
     ef2:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=0;
     ef4:	ef e4       	ldi	r30, 0x4F	; 79
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	8f 7d       	andi	r24, 0xDF	; 223
     efc:	80 83       	st	Z, r24
     efe:	3e c0       	rjmp	.+124    	; 0xf7c <TIM1_NonPWMMood+0xf4>
		break;
	case TIM1_ToggleOncomparematchNONPWM:
		TCCR1A_REG->COM1A0=1;
     f00:	ef e4       	ldi	r30, 0x4F	; 79
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	80 64       	ori	r24, 0x40	; 64
     f08:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=1;
     f0a:	ef e4       	ldi	r30, 0x4F	; 79
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 61       	ori	r24, 0x10	; 16
     f12:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=0;
     f14:	ef e4       	ldi	r30, 0x4F	; 79
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	8f 77       	andi	r24, 0x7F	; 127
     f1c:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=0;
     f1e:	ef e4       	ldi	r30, 0x4F	; 79
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	8f 7d       	andi	r24, 0xDF	; 223
     f26:	80 83       	st	Z, r24
     f28:	29 c0       	rjmp	.+82     	; 0xf7c <TIM1_NonPWMMood+0xf4>
		break;
	case TIM1_ClearOnCompareMatchNONPWM:
		TCCR1A_REG->COM1A0=0;
     f2a:	ef e4       	ldi	r30, 0x4F	; 79
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	8f 7b       	andi	r24, 0xBF	; 191
     f32:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=0;
     f34:	ef e4       	ldi	r30, 0x4F	; 79
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	8f 7e       	andi	r24, 0xEF	; 239
     f3c:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=1;
     f3e:	ef e4       	ldi	r30, 0x4F	; 79
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	80 68       	ori	r24, 0x80	; 128
     f46:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=1;
     f48:	ef e4       	ldi	r30, 0x4F	; 79
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	80 62       	ori	r24, 0x20	; 32
     f50:	80 83       	st	Z, r24
     f52:	14 c0       	rjmp	.+40     	; 0xf7c <TIM1_NonPWMMood+0xf4>
		break;
	case TIM1_SetOncomparematchNONPWM:
		TCCR1A_REG->COM1A0=1;
     f54:	ef e4       	ldi	r30, 0x4F	; 79
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	80 64       	ori	r24, 0x40	; 64
     f5c:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=1;
     f5e:	ef e4       	ldi	r30, 0x4F	; 79
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	80 61       	ori	r24, 0x10	; 16
     f66:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=1;
     f68:	ef e4       	ldi	r30, 0x4F	; 79
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	80 68       	ori	r24, 0x80	; 128
     f70:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=1;
     f72:	ef e4       	ldi	r30, 0x4F	; 79
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	80 62       	ori	r24, 0x20	; 32
     f7a:	80 83       	st	Z, r24
		break;

	}
}
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <TIM1_phaseCorrectMood>:
void TIM1_phaseCorrectMood(COMPhaseCorrect COM)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <TIM1_phaseCorrectMood+0x6>
     f8e:	0f 92       	push	r0
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	89 83       	std	Y+1, r24	; 0x01
	switch(COM)
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	3b 83       	std	Y+3, r19	; 0x03
     f9e:	2a 83       	std	Y+2, r18	; 0x02
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	9b 81       	ldd	r25, Y+3	; 0x03
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	91 05       	cpc	r25, r1
     fa8:	59 f1       	breq	.+86     	; 0x1000 <TIM1_phaseCorrectMood+0x78>
     faa:	2a 81       	ldd	r18, Y+2	; 0x02
     fac:	3b 81       	ldd	r19, Y+3	; 0x03
     fae:	22 30       	cpi	r18, 0x02	; 2
     fb0:	31 05       	cpc	r19, r1
     fb2:	2c f4       	brge	.+10     	; 0xfbe <TIM1_phaseCorrectMood+0x36>
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	9b 81       	ldd	r25, Y+3	; 0x03
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	69 f0       	breq	.+26     	; 0xfd6 <TIM1_phaseCorrectMood+0x4e>
     fbc:	5f c0       	rjmp	.+190    	; 0x107c <TIM1_phaseCorrectMood+0xf4>
     fbe:	2a 81       	ldd	r18, Y+2	; 0x02
     fc0:	3b 81       	ldd	r19, Y+3	; 0x03
     fc2:	22 30       	cpi	r18, 0x02	; 2
     fc4:	31 05       	cpc	r19, r1
     fc6:	89 f1       	breq	.+98     	; 0x102a <TIM1_phaseCorrectMood+0xa2>
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	9b 81       	ldd	r25, Y+3	; 0x03
     fcc:	83 30       	cpi	r24, 0x03	; 3
     fce:	91 05       	cpc	r25, r1
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <TIM1_phaseCorrectMood+0x4c>
     fd2:	40 c0       	rjmp	.+128    	; 0x1054 <TIM1_phaseCorrectMood+0xcc>
     fd4:	53 c0       	rjmp	.+166    	; 0x107c <TIM1_phaseCorrectMood+0xf4>
	{
	case TIM1_NormalPhasePWM:
		TCCR1A_REG->COM1A0=0;
     fd6:	ef e4       	ldi	r30, 0x4F	; 79
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8f 7b       	andi	r24, 0xBF	; 191
     fde:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=0;
     fe0:	ef e4       	ldi	r30, 0x4F	; 79
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8f 7e       	andi	r24, 0xEF	; 239
     fe8:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=0;
     fea:	ef e4       	ldi	r30, 0x4F	; 79
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	8f 77       	andi	r24, 0x7F	; 127
     ff2:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=0;
     ff4:	ef e4       	ldi	r30, 0x4F	; 79
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	8f 7d       	andi	r24, 0xDF	; 223
     ffc:	80 83       	st	Z, r24
     ffe:	3e c0       	rjmp	.+124    	; 0x107c <TIM1_phaseCorrectMood+0xf4>
		break;
	case TIM1_Toggle_OC1A_OnCompareMatchPhasePWM:
		TCCR1A_REG->COM1A0=1;
    1000:	ef e4       	ldi	r30, 0x4F	; 79
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	80 64       	ori	r24, 0x40	; 64
    1008:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=1;
    100a:	ef e4       	ldi	r30, 0x4F	; 79
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	80 61       	ori	r24, 0x10	; 16
    1012:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=0;
    1014:	ef e4       	ldi	r30, 0x4F	; 79
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	8f 77       	andi	r24, 0x7F	; 127
    101c:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=0;
    101e:	ef e4       	ldi	r30, 0x4F	; 79
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	8f 7d       	andi	r24, 0xDF	; 223
    1026:	80 83       	st	Z, r24
    1028:	29 c0       	rjmp	.+82     	; 0x107c <TIM1_phaseCorrectMood+0xf4>
		break;
	case TIM1_ClearOnCompareMatchPhasePWM:
		TCCR1A_REG->COM1A0=0;
    102a:	ef e4       	ldi	r30, 0x4F	; 79
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	8f 7b       	andi	r24, 0xBF	; 191
    1032:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=0;
    1034:	ef e4       	ldi	r30, 0x4F	; 79
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	8f 7e       	andi	r24, 0xEF	; 239
    103c:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=1;
    103e:	ef e4       	ldi	r30, 0x4F	; 79
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	80 68       	ori	r24, 0x80	; 128
    1046:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=1;
    1048:	ef e4       	ldi	r30, 0x4F	; 79
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	80 62       	ori	r24, 0x20	; 32
    1050:	80 83       	st	Z, r24
    1052:	14 c0       	rjmp	.+40     	; 0x107c <TIM1_phaseCorrectMood+0xf4>
		break;
	case TIM1_SetOnCompareMatchPhasePWM:
		TCCR1A_REG->COM1A0=1;
    1054:	ef e4       	ldi	r30, 0x4F	; 79
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	80 64       	ori	r24, 0x40	; 64
    105c:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B0=1;
    105e:	ef e4       	ldi	r30, 0x4F	; 79
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	80 61       	ori	r24, 0x10	; 16
    1066:	80 83       	st	Z, r24
		TCCR1A_REG->COM1A1=1;
    1068:	ef e4       	ldi	r30, 0x4F	; 79
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	80 68       	ori	r24, 0x80	; 128
    1070:	80 83       	st	Z, r24
		TCCR1A_REG->COM1B1=1;
    1072:	ef e4       	ldi	r30, 0x4F	; 79
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	80 62       	ori	r24, 0x20	; 32
    107a:	80 83       	st	Z, r24
		break;

	}
}
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <TIM1_init>:


void TIM1_init(void)
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
#elif(TIM1_PHASE_CORRECT==1)

	TIM1_phaseCorrectMood(TIM1_PHASE_CORRECT_MOOD);

#elif(TIM1_FAST_PWM==1)
	TCCR1A_REG->COM1A0=0;
    1090:	ef e4       	ldi	r30, 0x4F	; 79
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	8f 7b       	andi	r24, 0xBF	; 191
    1098:	80 83       	st	Z, r24
	TCCR1A_REG->COM1B0=0;
    109a:	ef e4       	ldi	r30, 0x4F	; 79
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	8f 7e       	andi	r24, 0xEF	; 239
    10a2:	80 83       	st	Z, r24
	TCCR1A_REG->COM1A1=1;
    10a4:	ef e4       	ldi	r30, 0x4F	; 79
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	80 68       	ori	r24, 0x80	; 128
    10ac:	80 83       	st	Z, r24
	TCCR1A_REG->COM1B1=1;
    10ae:	ef e4       	ldi	r30, 0x4F	; 79
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	80 62       	ori	r24, 0x20	; 32
    10b6:	80 83       	st	Z, r24
	TIM1_FastPWMMood(TIM1_FAST_PWM_MOOD);/*TIM1_ClearOnCompareMatchFastPWM*/
    10b8:	82 e0       	ldi	r24, 0x02	; 2
    10ba:	0e 94 c4 06 	call	0xd88	; 0xd88 <TIM1_FastPWMMood>

#endif
	TIM1_WGMMood(TIM1_WGM_MOOD);
    10be:	8e e0       	ldi	r24, 0x0E	; 14
    10c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIM1_WGMMood>
}
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <TIM1_stop>:



void TIM1_stop(void)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
	TCCR1B_REG->CS=TIM1_NoClockSource;
    10d2:	ee e4       	ldi	r30, 0x4E	; 78
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	88 7f       	andi	r24, 0xF8	; 248
    10da:	80 83       	st	Z, r24
}
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <TIM1_start>:

void TIM1_start(void)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
	TCCR1B_REG->CS=0b011;
    10ea:	ee e4       	ldi	r30, 0x4E	; 78
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	88 7f       	andi	r24, 0xF8	; 248
    10f2:	83 60       	ori	r24, 0x03	; 3
    10f4:	80 83       	st	Z, r24
}
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <TIM1_setPreload>:
void TIM1_setPreload(uint16 preload_Val)
{
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	00 d0       	rcall	.+0      	; 0x1102 <TIM1_setPreload+0x6>
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	9a 83       	std	Y+2, r25	; 0x02
    1108:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_REG=preload_Val;
    110a:	ec e4       	ldi	r30, 0x4C	; 76
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	9a 81       	ldd	r25, Y+2	; 0x02
    1112:	91 83       	std	Z+1, r25	; 0x01
    1114:	80 83       	st	Z, r24
}
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <TIM1_getVal>:
uint16 TIM1_getVal(void)
{
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
	return TCNT1_REG;
    1128:	ec e4       	ldi	r30, 0x4C	; 76
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <TIM1_setICR>:
void TIM1_setICR(uint16 val)
{
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	00 d0       	rcall	.+0      	; 0x113c <TIM1_setICR+0x6>
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	9a 83       	std	Y+2, r25	; 0x02
    1142:	89 83       	std	Y+1, r24	; 0x01
	ICR1_REG=val;
    1144:	e6 e4       	ldi	r30, 0x46	; 70
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	9a 81       	ldd	r25, Y+2	; 0x02
    114c:	91 83       	std	Z+1, r25	; 0x01
    114e:	80 83       	st	Z, r24
}
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <TIM1_dutyCycle_OCRA>:
void TIM1_dutyCycle_OCRA(uint16 dutyCycle)
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	00 d0       	rcall	.+0      	; 0x1160 <TIM1_dutyCycle_OCRA+0x6>
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_REG = dutyCycle;
    1168:	ea e4       	ldi	r30, 0x4A	; 74
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	91 83       	std	Z+1, r25	; 0x01
    1172:	80 83       	st	Z, r24
}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <TIM1_dutyCycle_OCRB>:
void TIM1_dutyCycle_OCRB(uint16 dutyCycle)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	00 d0       	rcall	.+0      	; 0x1184 <TIM1_dutyCycle_OCRB+0x6>
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_REG=dutyCycle;
    118c:	e8 e4       	ldi	r30, 0x48	; 72
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	9a 81       	ldd	r25, Y+2	; 0x02
    1194:	91 83       	std	Z+1, r25	; 0x01
    1196:	80 83       	st	Z, r24
}
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <TIM1_EnableOVFInterrupt>:
void TIM1_EnableOVFInterrupt(void(*CallbackFunction)(void))
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <TIM1_EnableOVFInterrupt+0x6>
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	9a 83       	std	Y+2, r25	; 0x02
    11ae:	89 83       	std	Y+1, r24	; 0x01
	TIM1_TIFR_REG->TOV1=1;
    11b0:	e8 e5       	ldi	r30, 0x58	; 88
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	84 60       	ori	r24, 0x04	; 4
    11b8:	80 83       	st	Z, r24
	TIM1_TIMSK_REG->TOIE1=1;
    11ba:	e9 e5       	ldi	r30, 0x59	; 89
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	84 60       	ori	r24, 0x04	; 4
    11c2:	80 83       	st	Z, r24
	if(CallbackFunction !=NULL)
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	9a 81       	ldd	r25, Y+2	; 0x02
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	31 f0       	breq	.+12     	; 0x11d8 <TIM1_EnableOVFInterrupt+0x36>
	{
		TIM1_callBackOV_ptr=CallbackFunction;
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	9a 81       	ldd	r25, Y+2	; 0x02
    11d0:	90 93 79 00 	sts	0x0079, r25
    11d4:	80 93 78 00 	sts	0x0078, r24
	}
}
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <TIM1_Enable_OCRA_Interrupt>:

void TIM1_Enable_OCRA_Interrupt(void(*CallbackFunction)(void))
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <TIM1_Enable_OCRA_Interrupt+0x6>
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	9a 83       	std	Y+2, r25	; 0x02
    11ee:	89 83       	std	Y+1, r24	; 0x01

	TIM1_TIFR_REG->OCF1A=1;
    11f0:	e8 e5       	ldi	r30, 0x58	; 88
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	80 61       	ori	r24, 0x10	; 16
    11f8:	80 83       	st	Z, r24
	TIM1_TIMSK_REG->OCIE1A=1;
    11fa:	e9 e5       	ldi	r30, 0x59	; 89
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	80 61       	ori	r24, 0x10	; 16
    1202:	80 83       	st	Z, r24

	if(CallbackFunction !=NULL)
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	31 f0       	breq	.+12     	; 0x1218 <TIM1_Enable_OCRA_Interrupt+0x36>
	{
		TIM1_callBackOCRA_ptr=CallbackFunction;
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	9a 81       	ldd	r25, Y+2	; 0x02
    1210:	90 93 7b 00 	sts	0x007B, r25
    1214:	80 93 7a 00 	sts	0x007A, r24
	}

}
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <TIM1_Enable_OCRB_Interrupt>:
void TIM1_Enable_OCRB_Interrupt(void(*CallbackFunction)(void))
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	00 d0       	rcall	.+0      	; 0x1228 <TIM1_Enable_OCRB_Interrupt+0x6>
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	9a 83       	std	Y+2, r25	; 0x02
    122e:	89 83       	std	Y+1, r24	; 0x01
	TIM1_TIFR_REG->OCF1B=1;
    1230:	e8 e5       	ldi	r30, 0x58	; 88
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	88 60       	ori	r24, 0x08	; 8
    1238:	80 83       	st	Z, r24
	TIM1_TIMSK_REG->OCIE1B=1;
    123a:	e9 e5       	ldi	r30, 0x59	; 89
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	88 60       	ori	r24, 0x08	; 8
    1242:	80 83       	st	Z, r24
	if(CallbackFunction !=NULL)
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	31 f0       	breq	.+12     	; 0x1258 <TIM1_Enable_OCRB_Interrupt+0x36>
	{
		TIM1_callBackOCRB_ptr=CallbackFunction;
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	9a 81       	ldd	r25, Y+2	; 0x02
    1250:	90 93 7d 00 	sts	0x007D, r25
    1254:	80 93 7c 00 	sts	0x007C, r24
	}
}
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <TIM1_Enable_ICR_Interrupt>:
void TIM1_Enable_ICR_Interrupt(void(*CallbackFunction)(void))
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <TIM1_Enable_ICR_Interrupt+0x6>
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	9a 83       	std	Y+2, r25	; 0x02
    126e:	89 83       	std	Y+1, r24	; 0x01
	TIM1_TIFR_REG->ICF1=1;
    1270:	e8 e5       	ldi	r30, 0x58	; 88
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	80 62       	ori	r24, 0x20	; 32
    1278:	80 83       	st	Z, r24
	TIM1_TIMSK_REG->TICIE1=1;
    127a:	e9 e5       	ldi	r30, 0x59	; 89
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	80 62       	ori	r24, 0x20	; 32
    1282:	80 83       	st	Z, r24
	if(CallbackFunction !=NULL)
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	9a 81       	ldd	r25, Y+2	; 0x02
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	31 f0       	breq	.+12     	; 0x1298 <TIM1_Enable_ICR_Interrupt+0x36>
	{
		TIM1_callBackICR_ptr=CallbackFunction;
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	9a 81       	ldd	r25, Y+2	; 0x02
    1290:	90 93 7f 00 	sts	0x007F, r25
    1294:	80 93 7e 00 	sts	0x007E, r24
	}
}
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <__vector_6>:

void __vector_6(void) __attribute__((signal, used));
void __vector_6(void)		// TIMER1 CAPT
{
    12a2:	1f 92       	push	r1
    12a4:	0f 92       	push	r0
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	0f 92       	push	r0
    12aa:	11 24       	eor	r1, r1
    12ac:	2f 93       	push	r18
    12ae:	3f 93       	push	r19
    12b0:	4f 93       	push	r20
    12b2:	5f 93       	push	r21
    12b4:	6f 93       	push	r22
    12b6:	7f 93       	push	r23
    12b8:	8f 93       	push	r24
    12ba:	9f 93       	push	r25
    12bc:	af 93       	push	r26
    12be:	bf 93       	push	r27
    12c0:	ef 93       	push	r30
    12c2:	ff 93       	push	r31
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
	TIM1_callBackICR_ptr();
    12cc:	e0 91 7e 00 	lds	r30, 0x007E
    12d0:	f0 91 7f 00 	lds	r31, 0x007F
    12d4:	09 95       	icall
}
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	ff 91       	pop	r31
    12dc:	ef 91       	pop	r30
    12de:	bf 91       	pop	r27
    12e0:	af 91       	pop	r26
    12e2:	9f 91       	pop	r25
    12e4:	8f 91       	pop	r24
    12e6:	7f 91       	pop	r23
    12e8:	6f 91       	pop	r22
    12ea:	5f 91       	pop	r21
    12ec:	4f 91       	pop	r20
    12ee:	3f 91       	pop	r19
    12f0:	2f 91       	pop	r18
    12f2:	0f 90       	pop	r0
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	0f 90       	pop	r0
    12f8:	1f 90       	pop	r1
    12fa:	18 95       	reti

000012fc <__vector_7>:


void __vector_7(void) __attribute__((signal, used));
void __vector_7(void)		// TIMER1 COMPA
{
    12fc:	1f 92       	push	r1
    12fe:	0f 92       	push	r0
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	0f 92       	push	r0
    1304:	11 24       	eor	r1, r1
    1306:	2f 93       	push	r18
    1308:	3f 93       	push	r19
    130a:	4f 93       	push	r20
    130c:	5f 93       	push	r21
    130e:	6f 93       	push	r22
    1310:	7f 93       	push	r23
    1312:	8f 93       	push	r24
    1314:	9f 93       	push	r25
    1316:	af 93       	push	r26
    1318:	bf 93       	push	r27
    131a:	ef 93       	push	r30
    131c:	ff 93       	push	r31
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
	TIM1_callBackOCRA_ptr();
    1326:	e0 91 7a 00 	lds	r30, 0x007A
    132a:	f0 91 7b 00 	lds	r31, 0x007B
    132e:	09 95       	icall
}
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	ff 91       	pop	r31
    1336:	ef 91       	pop	r30
    1338:	bf 91       	pop	r27
    133a:	af 91       	pop	r26
    133c:	9f 91       	pop	r25
    133e:	8f 91       	pop	r24
    1340:	7f 91       	pop	r23
    1342:	6f 91       	pop	r22
    1344:	5f 91       	pop	r21
    1346:	4f 91       	pop	r20
    1348:	3f 91       	pop	r19
    134a:	2f 91       	pop	r18
    134c:	0f 90       	pop	r0
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	0f 90       	pop	r0
    1352:	1f 90       	pop	r1
    1354:	18 95       	reti

00001356 <__vector_8>:


void __vector_8(void) __attribute__((signal, used));
void __vector_8(void)		// TIMER1 COMPB
{
    1356:	1f 92       	push	r1
    1358:	0f 92       	push	r0
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	0f 92       	push	r0
    135e:	11 24       	eor	r1, r1
    1360:	2f 93       	push	r18
    1362:	3f 93       	push	r19
    1364:	4f 93       	push	r20
    1366:	5f 93       	push	r21
    1368:	6f 93       	push	r22
    136a:	7f 93       	push	r23
    136c:	8f 93       	push	r24
    136e:	9f 93       	push	r25
    1370:	af 93       	push	r26
    1372:	bf 93       	push	r27
    1374:	ef 93       	push	r30
    1376:	ff 93       	push	r31
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
	TIM1_callBackOCRB_ptr();
    1380:	e0 91 7c 00 	lds	r30, 0x007C
    1384:	f0 91 7d 00 	lds	r31, 0x007D
    1388:	09 95       	icall
}
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	ff 91       	pop	r31
    1390:	ef 91       	pop	r30
    1392:	bf 91       	pop	r27
    1394:	af 91       	pop	r26
    1396:	9f 91       	pop	r25
    1398:	8f 91       	pop	r24
    139a:	7f 91       	pop	r23
    139c:	6f 91       	pop	r22
    139e:	5f 91       	pop	r21
    13a0:	4f 91       	pop	r20
    13a2:	3f 91       	pop	r19
    13a4:	2f 91       	pop	r18
    13a6:	0f 90       	pop	r0
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	0f 90       	pop	r0
    13ac:	1f 90       	pop	r1
    13ae:	18 95       	reti

000013b0 <__vector_9>:


void __vector_9(void) __attribute__((signal, used));
void __vector_9(void)		// TIMER1 OVF
{
    13b0:	1f 92       	push	r1
    13b2:	0f 92       	push	r0
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	0f 92       	push	r0
    13b8:	11 24       	eor	r1, r1
    13ba:	2f 93       	push	r18
    13bc:	3f 93       	push	r19
    13be:	4f 93       	push	r20
    13c0:	5f 93       	push	r21
    13c2:	6f 93       	push	r22
    13c4:	7f 93       	push	r23
    13c6:	8f 93       	push	r24
    13c8:	9f 93       	push	r25
    13ca:	af 93       	push	r26
    13cc:	bf 93       	push	r27
    13ce:	ef 93       	push	r30
    13d0:	ff 93       	push	r31
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
	TIM1_callBackOV_ptr();
    13da:	e0 91 78 00 	lds	r30, 0x0078
    13de:	f0 91 79 00 	lds	r31, 0x0079
    13e2:	09 95       	icall
}
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	ff 91       	pop	r31
    13ea:	ef 91       	pop	r30
    13ec:	bf 91       	pop	r27
    13ee:	af 91       	pop	r26
    13f0:	9f 91       	pop	r25
    13f2:	8f 91       	pop	r24
    13f4:	7f 91       	pop	r23
    13f6:	6f 91       	pop	r22
    13f8:	5f 91       	pop	r21
    13fa:	4f 91       	pop	r20
    13fc:	3f 91       	pop	r19
    13fe:	2f 91       	pop	r18
    1400:	0f 90       	pop	r0
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	0f 90       	pop	r0
    1406:	1f 90       	pop	r1
    1408:	18 95       	reti

0000140a <TIM0_init>:

void (*TIM0_callBackOV_ptr)(void) = NULL;
void (*TIM0_callBackCOMP_ptr)(void) = NULL;

void TIM0_init()
{
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG->FOC0=0;
    1412:	e3 e5       	ldi	r30, 0x53	; 83
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	8f 77       	andi	r24, 0x7F	; 127
    141a:	80 83       	st	Z, r24
	TCCR0_REG->WGM01=0;
#elif(CTC)
	TCCR0_REG->WGM00=0;
	TCCR0_REG->WGM01=1;
#elif(FAST_PWM)
	TCCR0_REG->WGM00=1;
    141c:	e3 e5       	ldi	r30, 0x53	; 83
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	80 64       	ori	r24, 0x40	; 64
    1424:	80 83       	st	Z, r24
	TCCR0_REG->WGM01=1;
    1426:	e3 e5       	ldi	r30, 0x53	; 83
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	88 60       	ori	r24, 0x08	; 8
    142e:	80 83       	st	Z, r24
#endif

	TCCR0_REG->COM=COM_MODE;
    1430:	e3 e5       	ldi	r30, 0x53	; 83
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	8f 7c       	andi	r24, 0xCF	; 207
    1438:	80 62       	ori	r24, 0x20	; 32
    143a:	80 83       	st	Z, r24
}
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <TIM0_stop>:

void TIM0_stop(void)
{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG->CS=NoClockSource;
    144a:	e3 e5       	ldi	r30, 0x53	; 83
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	88 7f       	andi	r24, 0xF8	; 248
    1452:	80 83       	st	Z, r24
}
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <TIM0_start>:

void TIM0_start(void)
{
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG->CS=Prescaler;
    1462:	e3 e5       	ldi	r30, 0x53	; 83
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	88 7f       	andi	r24, 0xF8	; 248
    146a:	85 60       	ori	r24, 0x05	; 5
    146c:	80 83       	st	Z, r24
}
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <TIM0_setPreload>:
void TIM0_setPreload(uint8 preload_Val)
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	0f 92       	push	r0
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0_REG=preload_Val;
    1480:	e2 e5       	ldi	r30, 0x52	; 82
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	80 83       	st	Z, r24
}
    1488:	0f 90       	pop	r0
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <TIM0_dutyCycle>:
void TIM0_dutyCycle(uint8 dc)
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	0f 92       	push	r0
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	89 83       	std	Y+1, r24	; 0x01
#if(COM_MODE==ClearOnCompareMatchFastPWM)
	//OCR0_REG=(1-(dc/100))*256;
	OCR0_REG=dc;
    149c:	ec e5       	ldi	r30, 0x5C	; 92
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	80 83       	st	Z, r24
#elif(COM_MODE==SetOnCompareMatchFastPWM)
	OCR0_REG=(dc/100)*256;
#endif
	OCR0_REG=(1-(dc))*255;
    14a4:	ec e5       	ldi	r30, 0x5C	; 92
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	ac 01       	movw	r20, r24
    14b4:	42 1b       	sub	r20, r18
    14b6:	53 0b       	sbc	r21, r19
    14b8:	ca 01       	movw	r24, r20
    14ba:	9c 01       	movw	r18, r24
    14bc:	22 0f       	add	r18, r18
    14be:	33 1f       	adc	r19, r19
    14c0:	c9 01       	movw	r24, r18
    14c2:	96 95       	lsr	r25
    14c4:	98 2f       	mov	r25, r24
    14c6:	88 27       	eor	r24, r24
    14c8:	97 95       	ror	r25
    14ca:	87 95       	ror	r24
    14cc:	82 1b       	sub	r24, r18
    14ce:	93 0b       	sbc	r25, r19
    14d0:	84 0f       	add	r24, r20
    14d2:	95 1f       	adc	r25, r21
    14d4:	80 83       	st	Z, r24
}
    14d6:	0f 90       	pop	r0
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <TIM0_getVal>:
uint8 TIM0_getVal(void)
{
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
	return TCNT0_REG;
    14e6:	e2 e5       	ldi	r30, 0x52	; 82
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
}
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <delay_ms>:


void delay_ms(uint32 msec)
{
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <delay_ms+0x6>
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <delay_ms+0x8>
    14fa:	0f 92       	push	r0
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	69 83       	std	Y+1, r22	; 0x01
    1502:	7a 83       	std	Y+2, r23	; 0x02
    1504:	8b 83       	std	Y+3, r24	; 0x03
    1506:	9c 83       	std	Y+4, r25	; 0x04
	TIM0_TIFR_REG->TOV0=1;
    1508:	e8 e5       	ldi	r30, 0x58	; 88
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	81 60       	ori	r24, 0x01	; 1
    1510:	80 83       	st	Z, r24
	TIM0_TIMSK_REG->TOIE0=0;
    1512:	e9 e5       	ldi	r30, 0x59	; 89
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	8e 7f       	andi	r24, 0xFE	; 254
    151a:	80 83       	st	Z, r24
    151c:	0e c0       	rjmp	.+28     	; 0x153a <delay_ms+0x48>

	while(msec--)
	{
		TIM0_setPreload(6);
    151e:	86 e0       	ldi	r24, 0x06	; 6
    1520:	0e 94 3a 0a 	call	0x1474	; 0x1474 <TIM0_setPreload>
		while(TIM0_TIFR_REG->TOV0 != 1);
    1524:	e8 e5       	ldi	r30, 0x58	; 88
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	81 70       	andi	r24, 0x01	; 1
    152c:	88 23       	and	r24, r24
    152e:	d1 f3       	breq	.-12     	; 0x1524 <delay_ms+0x32>
		TIM0_TIFR_REG->TOV0=1;
    1530:	e8 e5       	ldi	r30, 0x58	; 88
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	81 60       	ori	r24, 0x01	; 1
    1538:	80 83       	st	Z, r24
void delay_ms(uint32 msec)
{
	TIM0_TIFR_REG->TOV0=1;
	TIM0_TIMSK_REG->TOIE0=0;

	while(msec--)
    153a:	1d 82       	std	Y+5, r1	; 0x05
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	9a 81       	ldd	r25, Y+2	; 0x02
    1540:	ab 81       	ldd	r26, Y+3	; 0x03
    1542:	bc 81       	ldd	r27, Y+4	; 0x04
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	a1 05       	cpc	r26, r1
    1548:	b1 05       	cpc	r27, r1
    154a:	11 f0       	breq	.+4      	; 0x1550 <delay_ms+0x5e>
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	8d 83       	std	Y+5, r24	; 0x05
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	9a 81       	ldd	r25, Y+2	; 0x02
    1554:	ab 81       	ldd	r26, Y+3	; 0x03
    1556:	bc 81       	ldd	r27, Y+4	; 0x04
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	a1 09       	sbc	r26, r1
    155c:	b1 09       	sbc	r27, r1
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	9a 83       	std	Y+2, r25	; 0x02
    1562:	ab 83       	std	Y+3, r26	; 0x03
    1564:	bc 83       	std	Y+4, r27	; 0x04
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	88 23       	and	r24, r24
    156a:	c9 f6       	brne	.-78     	; 0x151e <delay_ms+0x2c>

	}



}
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <TIM0_EnableOVFInterrupt>:
void TIM0_EnableOVFInterrupt(void(*CallbackFunction)(void))
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	00 d0       	rcall	.+0      	; 0x1582 <TIM0_EnableOVFInterrupt+0x6>
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	9a 83       	std	Y+2, r25	; 0x02
    1588:	89 83       	std	Y+1, r24	; 0x01
	TIM0_TIFR_REG->TOV0=1;
    158a:	e8 e5       	ldi	r30, 0x58	; 88
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	81 60       	ori	r24, 0x01	; 1
    1592:	80 83       	st	Z, r24
	TIM0_TIMSK_REG->TOIE0=1;
    1594:	e9 e5       	ldi	r30, 0x59	; 89
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	81 60       	ori	r24, 0x01	; 1
    159c:	80 83       	st	Z, r24
	if(CallbackFunction !=NULL)
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	9a 81       	ldd	r25, Y+2	; 0x02
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	31 f0       	breq	.+12     	; 0x15b2 <TIM0_EnableOVFInterrupt+0x36>
	{
		TIM0_callBackOV_ptr=CallbackFunction;
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	9a 81       	ldd	r25, Y+2	; 0x02
    15aa:	90 93 81 00 	sts	0x0081, r25
    15ae:	80 93 80 00 	sts	0x0080, r24
	}

}
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <TIM0_EnableCOMInterrupt>:
void TIM0_EnableCOMInterrupt(void(*CallbackFunction)(void))
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <TIM0_EnableCOMInterrupt+0x6>
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	9a 83       	std	Y+2, r25	; 0x02
    15c8:	89 83       	std	Y+1, r24	; 0x01
	TIM0_TIFR_REG->OCF0=1;
    15ca:	e8 e5       	ldi	r30, 0x58	; 88
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	82 60       	ori	r24, 0x02	; 2
    15d2:	80 83       	st	Z, r24
	TIM0_TIMSK_REG->OCIE0=1;
    15d4:	e9 e5       	ldi	r30, 0x59	; 89
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	82 60       	ori	r24, 0x02	; 2
    15dc:	80 83       	st	Z, r24
	if(CallbackFunction !=NULL)
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	9a 81       	ldd	r25, Y+2	; 0x02
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	31 f0       	breq	.+12     	; 0x15f2 <TIM0_EnableCOMInterrupt+0x36>
	{
		TIM0_callBackCOMP_ptr=CallbackFunction;
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ea:	90 93 83 00 	sts	0x0083, r25
    15ee:	80 93 82 00 	sts	0x0082, r24
	}

}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	08 95       	ret

000015fc <__vector_11>:
void __vector_11(void)	__attribute__((signal, used));
void __vector_11(void)
{
    15fc:	1f 92       	push	r1
    15fe:	0f 92       	push	r0
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	0f 92       	push	r0
    1604:	11 24       	eor	r1, r1
    1606:	2f 93       	push	r18
    1608:	3f 93       	push	r19
    160a:	4f 93       	push	r20
    160c:	5f 93       	push	r21
    160e:	6f 93       	push	r22
    1610:	7f 93       	push	r23
    1612:	8f 93       	push	r24
    1614:	9f 93       	push	r25
    1616:	af 93       	push	r26
    1618:	bf 93       	push	r27
    161a:	ef 93       	push	r30
    161c:	ff 93       	push	r31
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
	if(TIM0_callBackOV_ptr != NULL)
    1626:	80 91 80 00 	lds	r24, 0x0080
    162a:	90 91 81 00 	lds	r25, 0x0081
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	29 f0       	breq	.+10     	; 0x163c <__vector_11+0x40>
	{
		TIM0_callBackOV_ptr();
    1632:	e0 91 80 00 	lds	r30, 0x0080
    1636:	f0 91 81 00 	lds	r31, 0x0081
    163a:	09 95       	icall
	}
}
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	ff 91       	pop	r31
    1642:	ef 91       	pop	r30
    1644:	bf 91       	pop	r27
    1646:	af 91       	pop	r26
    1648:	9f 91       	pop	r25
    164a:	8f 91       	pop	r24
    164c:	7f 91       	pop	r23
    164e:	6f 91       	pop	r22
    1650:	5f 91       	pop	r21
    1652:	4f 91       	pop	r20
    1654:	3f 91       	pop	r19
    1656:	2f 91       	pop	r18
    1658:	0f 90       	pop	r0
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	0f 90       	pop	r0
    165e:	1f 90       	pop	r1
    1660:	18 95       	reti

00001662 <GPIO_SetupPin_Direction>:
#include "GPIO_Config.h"
#include "GPIO_Private.h"


void GPIO_SetupPin_Direction(uint8 port_id,uint8 pin_num,GPIO_PinDirection direction)
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	00 d0       	rcall	.+0      	; 0x1668 <GPIO_SetupPin_Direction+0x6>
    1668:	00 d0       	rcall	.+0      	; 0x166a <GPIO_SetupPin_Direction+0x8>
    166a:	0f 92       	push	r0
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	6a 83       	std	Y+2, r22	; 0x02
    1674:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num > NUM_OF_PINS || port_id > NUM_OF_PORTS)
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	89 30       	cpi	r24, 0x09	; 9
    167a:	08 f0       	brcs	.+2      	; 0x167e <GPIO_SetupPin_Direction+0x1c>
    167c:	e4 c0       	rjmp	.+456    	; 0x1846 <GPIO_SetupPin_Direction+0x1e4>
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	85 30       	cpi	r24, 0x05	; 5
    1682:	08 f0       	brcs	.+2      	; 0x1686 <GPIO_SetupPin_Direction+0x24>
    1684:	e0 c0       	rjmp	.+448    	; 0x1846 <GPIO_SetupPin_Direction+0x1e4>
	}
	else
	{


		switch(port_id)
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	3d 83       	std	Y+5, r19	; 0x05
    168e:	2c 83       	std	Y+4, r18	; 0x04
    1690:	8c 81       	ldd	r24, Y+4	; 0x04
    1692:	9d 81       	ldd	r25, Y+5	; 0x05
    1694:	81 30       	cpi	r24, 0x01	; 1
    1696:	91 05       	cpc	r25, r1
    1698:	09 f4       	brne	.+2      	; 0x169c <GPIO_SetupPin_Direction+0x3a>
    169a:	47 c0       	rjmp	.+142    	; 0x172a <GPIO_SetupPin_Direction+0xc8>
    169c:	2c 81       	ldd	r18, Y+4	; 0x04
    169e:	3d 81       	ldd	r19, Y+5	; 0x05
    16a0:	22 30       	cpi	r18, 0x02	; 2
    16a2:	31 05       	cpc	r19, r1
    16a4:	2c f4       	brge	.+10     	; 0x16b0 <GPIO_SetupPin_Direction+0x4e>
    16a6:	8c 81       	ldd	r24, Y+4	; 0x04
    16a8:	9d 81       	ldd	r25, Y+5	; 0x05
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	71 f0       	breq	.+28     	; 0x16ca <GPIO_SetupPin_Direction+0x68>
    16ae:	cb c0       	rjmp	.+406    	; 0x1846 <GPIO_SetupPin_Direction+0x1e4>
    16b0:	2c 81       	ldd	r18, Y+4	; 0x04
    16b2:	3d 81       	ldd	r19, Y+5	; 0x05
    16b4:	22 30       	cpi	r18, 0x02	; 2
    16b6:	31 05       	cpc	r19, r1
    16b8:	09 f4       	brne	.+2      	; 0x16bc <GPIO_SetupPin_Direction+0x5a>
    16ba:	67 c0       	rjmp	.+206    	; 0x178a <GPIO_SetupPin_Direction+0x128>
    16bc:	8c 81       	ldd	r24, Y+4	; 0x04
    16be:	9d 81       	ldd	r25, Y+5	; 0x05
    16c0:	83 30       	cpi	r24, 0x03	; 3
    16c2:	91 05       	cpc	r25, r1
    16c4:	09 f4       	brne	.+2      	; 0x16c8 <GPIO_SetupPin_Direction+0x66>
    16c6:	91 c0       	rjmp	.+290    	; 0x17ea <GPIO_SetupPin_Direction+0x188>
    16c8:	be c0       	rjmp	.+380    	; 0x1846 <GPIO_SetupPin_Direction+0x1e4>
		{
			case PORTA_ID:
				if(direction==PIN_INPUT)
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	88 23       	and	r24, r24
    16ce:	a9 f4       	brne	.+42     	; 0x16fa <GPIO_SetupPin_Direction+0x98>
				{

					CLEAR_BIT(DDRA,pin_num);
    16d0:	aa e3       	ldi	r26, 0x3A	; 58
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	ea e3       	ldi	r30, 0x3A	; 58
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	48 2f       	mov	r20, r24
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 2e       	mov	r0, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <GPIO_SetupPin_Direction+0x8c>
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	0a 94       	dec	r0
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <GPIO_SetupPin_Direction+0x88>
    16f2:	80 95       	com	r24
    16f4:	84 23       	and	r24, r20
    16f6:	8c 93       	st	X, r24
    16f8:	a6 c0       	rjmp	.+332    	; 0x1846 <GPIO_SetupPin_Direction+0x1e4>
				}
				else if(direction==PIN_OUTPUT)
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	09 f0       	breq	.+2      	; 0x1702 <GPIO_SetupPin_Direction+0xa0>
    1700:	a2 c0       	rjmp	.+324    	; 0x1846 <GPIO_SetupPin_Direction+0x1e4>
				{
					SET_BIT(DDRA,pin_num);
    1702:	aa e3       	ldi	r26, 0x3A	; 58
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	ea e3       	ldi	r30, 0x3A	; 58
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <GPIO_SetupPin_Direction+0xbe>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <GPIO_SetupPin_Direction+0xba>
    1724:	84 2b       	or	r24, r20
    1726:	8c 93       	st	X, r24
    1728:	8e c0       	rjmp	.+284    	; 0x1846 <GPIO_SetupPin_Direction+0x1e4>
				}
				break;
			case PORTB_ID:
				if(direction==PIN_INPUT)
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	88 23       	and	r24, r24
    172e:	a9 f4       	brne	.+42     	; 0x175a <GPIO_SetupPin_Direction+0xf8>
				{
					CLEAR_BIT(DDRB,pin_num);
    1730:	a7 e3       	ldi	r26, 0x37	; 55
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e7 e3       	ldi	r30, 0x37	; 55
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	48 2f       	mov	r20, r24
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	02 2e       	mov	r0, r18
    1748:	02 c0       	rjmp	.+4      	; 0x174e <GPIO_SetupPin_Direction+0xec>
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	0a 94       	dec	r0
    1750:	e2 f7       	brpl	.-8      	; 0x174a <GPIO_SetupPin_Direction+0xe8>
    1752:	80 95       	com	r24
    1754:	84 23       	and	r24, r20
    1756:	8c 93       	st	X, r24
    1758:	76 c0       	rjmp	.+236    	; 0x1846 <GPIO_SetupPin_Direction+0x1e4>
				}
				else if(direction==PIN_OUTPUT)
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	09 f0       	breq	.+2      	; 0x1762 <GPIO_SetupPin_Direction+0x100>
    1760:	72 c0       	rjmp	.+228    	; 0x1846 <GPIO_SetupPin_Direction+0x1e4>
				{
					SET_BIT(DDRB,pin_num);
    1762:	a7 e3       	ldi	r26, 0x37	; 55
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e7 e3       	ldi	r30, 0x37	; 55
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	48 2f       	mov	r20, r24
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	02 2e       	mov	r0, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <GPIO_SetupPin_Direction+0x11e>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	0a 94       	dec	r0
    1782:	e2 f7       	brpl	.-8      	; 0x177c <GPIO_SetupPin_Direction+0x11a>
    1784:	84 2b       	or	r24, r20
    1786:	8c 93       	st	X, r24
    1788:	5e c0       	rjmp	.+188    	; 0x1846 <GPIO_SetupPin_Direction+0x1e4>
				}
				break;
			case PORTC_ID:
				if(direction==PIN_INPUT)
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	88 23       	and	r24, r24
    178e:	a9 f4       	brne	.+42     	; 0x17ba <GPIO_SetupPin_Direction+0x158>
				{
					CLEAR_BIT(DDRC,pin_num);
    1790:	a4 e3       	ldi	r26, 0x34	; 52
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e4 e3       	ldi	r30, 0x34	; 52
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	48 2f       	mov	r20, r24
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 2e       	mov	r0, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <GPIO_SetupPin_Direction+0x14c>
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	0a 94       	dec	r0
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <GPIO_SetupPin_Direction+0x148>
    17b2:	80 95       	com	r24
    17b4:	84 23       	and	r24, r20
    17b6:	8c 93       	st	X, r24
    17b8:	46 c0       	rjmp	.+140    	; 0x1846 <GPIO_SetupPin_Direction+0x1e4>
				}
				else if(direction==PIN_OUTPUT)
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	09 f0       	breq	.+2      	; 0x17c2 <GPIO_SetupPin_Direction+0x160>
    17c0:	42 c0       	rjmp	.+132    	; 0x1846 <GPIO_SetupPin_Direction+0x1e4>
				{
					SET_BIT(DDRC,pin_num);
    17c2:	a4 e3       	ldi	r26, 0x34	; 52
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e4 e3       	ldi	r30, 0x34	; 52
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	48 2f       	mov	r20, r24
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	02 2e       	mov	r0, r18
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <GPIO_SetupPin_Direction+0x17e>
    17dc:	88 0f       	add	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	0a 94       	dec	r0
    17e2:	e2 f7       	brpl	.-8      	; 0x17dc <GPIO_SetupPin_Direction+0x17a>
    17e4:	84 2b       	or	r24, r20
    17e6:	8c 93       	st	X, r24
    17e8:	2e c0       	rjmp	.+92     	; 0x1846 <GPIO_SetupPin_Direction+0x1e4>
				}
				break;
			case PORTD_ID:
				if(direction==PIN_INPUT)
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	88 23       	and	r24, r24
    17ee:	a9 f4       	brne	.+42     	; 0x181a <GPIO_SetupPin_Direction+0x1b8>
				{
					CLEAR_BIT(DDRD,pin_num);
    17f0:	a1 e3       	ldi	r26, 0x31	; 49
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e1 e3       	ldi	r30, 0x31	; 49
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	48 2f       	mov	r20, r24
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 2e       	mov	r0, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <GPIO_SetupPin_Direction+0x1ac>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	0a 94       	dec	r0
    1810:	e2 f7       	brpl	.-8      	; 0x180a <GPIO_SetupPin_Direction+0x1a8>
    1812:	80 95       	com	r24
    1814:	84 23       	and	r24, r20
    1816:	8c 93       	st	X, r24
    1818:	16 c0       	rjmp	.+44     	; 0x1846 <GPIO_SetupPin_Direction+0x1e4>
				}
				else if(direction==PIN_OUTPUT)
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	99 f4       	brne	.+38     	; 0x1846 <GPIO_SetupPin_Direction+0x1e4>
				{
					SET_BIT(DDRD,pin_num);
    1820:	a1 e3       	ldi	r26, 0x31	; 49
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e1 e3       	ldi	r30, 0x31	; 49
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	48 2f       	mov	r20, r24
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	02 2e       	mov	r0, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <GPIO_SetupPin_Direction+0x1dc>
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	0a 94       	dec	r0
    1840:	e2 f7       	brpl	.-8      	; 0x183a <GPIO_SetupPin_Direction+0x1d8>
    1842:	84 2b       	or	r24, r20
    1844:	8c 93       	st	X, r24
				}
				break;

			}
	}
}
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <GPIO_SetupPort_Direction>:
void GPIO_SetupPort_Direction(uint8 port_id,GPIO_PortDirection direction)
{
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	00 d0       	rcall	.+0      	; 0x185c <GPIO_SetupPort_Direction+0x6>
    185c:	00 d0       	rcall	.+0      	; 0x185e <GPIO_SetupPort_Direction+0x8>
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	89 83       	std	Y+1, r24	; 0x01
    1864:	6a 83       	std	Y+2, r22	; 0x02
	if(port_id > NUM_OF_PORTS)
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	85 30       	cpi	r24, 0x05	; 5
    186a:	08 f0       	brcs	.+2      	; 0x186e <GPIO_SetupPort_Direction+0x18>
    186c:	5a c0       	rjmp	.+180    	; 0x1922 <GPIO_SetupPort_Direction+0xcc>
	{

	}
	else
	{
		switch(port_id)
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	3c 83       	std	Y+4, r19	; 0x04
    1876:	2b 83       	std	Y+3, r18	; 0x03
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	9c 81       	ldd	r25, Y+4	; 0x04
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	91 05       	cpc	r25, r1
    1880:	21 f1       	breq	.+72     	; 0x18ca <GPIO_SetupPort_Direction+0x74>
    1882:	2b 81       	ldd	r18, Y+3	; 0x03
    1884:	3c 81       	ldd	r19, Y+4	; 0x04
    1886:	22 30       	cpi	r18, 0x02	; 2
    1888:	31 05       	cpc	r19, r1
    188a:	2c f4       	brge	.+10     	; 0x1896 <GPIO_SetupPort_Direction+0x40>
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	9c 81       	ldd	r25, Y+4	; 0x04
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	61 f0       	breq	.+24     	; 0x18ac <GPIO_SetupPort_Direction+0x56>
    1894:	46 c0       	rjmp	.+140    	; 0x1922 <GPIO_SetupPort_Direction+0xcc>
    1896:	2b 81       	ldd	r18, Y+3	; 0x03
    1898:	3c 81       	ldd	r19, Y+4	; 0x04
    189a:	22 30       	cpi	r18, 0x02	; 2
    189c:	31 05       	cpc	r19, r1
    189e:	21 f1       	breq	.+72     	; 0x18e8 <GPIO_SetupPort_Direction+0x92>
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	9c 81       	ldd	r25, Y+4	; 0x04
    18a4:	83 30       	cpi	r24, 0x03	; 3
    18a6:	91 05       	cpc	r25, r1
    18a8:	71 f1       	breq	.+92     	; 0x1906 <GPIO_SetupPort_Direction+0xb0>
    18aa:	3b c0       	rjmp	.+118    	; 0x1922 <GPIO_SetupPort_Direction+0xcc>
			{
			case PORTA_ID:
				if(direction==Port_INPUT)
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	88 23       	and	r24, r24
    18b0:	21 f4       	brne	.+8      	; 0x18ba <GPIO_SetupPort_Direction+0x64>
				{

					CLEAR_BYTE(DDRA);
    18b2:	ea e3       	ldi	r30, 0x3A	; 58
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	10 82       	st	Z, r1
    18b8:	34 c0       	rjmp	.+104    	; 0x1922 <GPIO_SetupPort_Direction+0xcc>
				}
				else if(direction==port_OUTPUT)
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	89 f5       	brne	.+98     	; 0x1922 <GPIO_SetupPort_Direction+0xcc>
				{
					SET_BYTE(DDRA,0xFF);
    18c0:	ea e3       	ldi	r30, 0x3A	; 58
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	8f ef       	ldi	r24, 0xFF	; 255
    18c6:	80 83       	st	Z, r24
    18c8:	2c c0       	rjmp	.+88     	; 0x1922 <GPIO_SetupPort_Direction+0xcc>
				}
				break;
			case PORTB_ID:
				if(direction==Port_INPUT)
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	88 23       	and	r24, r24
    18ce:	21 f4       	brne	.+8      	; 0x18d8 <GPIO_SetupPort_Direction+0x82>
				{

					CLEAR_BYTE(DDRB);
    18d0:	e7 e3       	ldi	r30, 0x37	; 55
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	10 82       	st	Z, r1
    18d6:	25 c0       	rjmp	.+74     	; 0x1922 <GPIO_SetupPort_Direction+0xcc>
				}
				else if(direction==port_OUTPUT)
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	81 30       	cpi	r24, 0x01	; 1
    18dc:	11 f5       	brne	.+68     	; 0x1922 <GPIO_SetupPort_Direction+0xcc>
				{
					SET_BYTE(DDRB,0xFF);
    18de:	e7 e3       	ldi	r30, 0x37	; 55
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	8f ef       	ldi	r24, 0xFF	; 255
    18e4:	80 83       	st	Z, r24
    18e6:	1d c0       	rjmp	.+58     	; 0x1922 <GPIO_SetupPort_Direction+0xcc>
				}
				break;
			case PORTC_ID:
				if(direction==Port_INPUT)
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	88 23       	and	r24, r24
    18ec:	21 f4       	brne	.+8      	; 0x18f6 <GPIO_SetupPort_Direction+0xa0>
				{

					CLEAR_BYTE(DDRC);
    18ee:	e4 e3       	ldi	r30, 0x34	; 52
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	10 82       	st	Z, r1
    18f4:	16 c0       	rjmp	.+44     	; 0x1922 <GPIO_SetupPort_Direction+0xcc>
				}
				else if(direction==port_OUTPUT)
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	99 f4       	brne	.+38     	; 0x1922 <GPIO_SetupPort_Direction+0xcc>
				{
					SET_BYTE(DDRC,0xFF);
    18fc:	e4 e3       	ldi	r30, 0x34	; 52
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	8f ef       	ldi	r24, 0xFF	; 255
    1902:	80 83       	st	Z, r24
    1904:	0e c0       	rjmp	.+28     	; 0x1922 <GPIO_SetupPort_Direction+0xcc>
				}
				break;
			case PORTD_ID:
				if(direction==Port_INPUT)
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	88 23       	and	r24, r24
    190a:	21 f4       	brne	.+8      	; 0x1914 <GPIO_SetupPort_Direction+0xbe>
				{

					CLEAR_BYTE(DDRD);
    190c:	e1 e3       	ldi	r30, 0x31	; 49
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	10 82       	st	Z, r1
    1912:	07 c0       	rjmp	.+14     	; 0x1922 <GPIO_SetupPort_Direction+0xcc>
				}
				else if(direction==port_OUTPUT)
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	81 30       	cpi	r24, 0x01	; 1
    1918:	21 f4       	brne	.+8      	; 0x1922 <GPIO_SetupPort_Direction+0xcc>
				{
					SET_BYTE(DDRD,0xFF);
    191a:	e1 e3       	ldi	r30, 0x31	; 49
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	8f ef       	ldi	r24, 0xFF	; 255
    1920:	80 83       	st	Z, r24
				}
				break;

			}
	}
}
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <GPIO_SetupPin_Value>:

void GPIO_SetupPin_Value(uint8 port_id,uint8 pin_num,uint8 pin_value)
{
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	00 d0       	rcall	.+0      	; 0x1936 <GPIO_SetupPin_Value+0x6>
    1936:	00 d0       	rcall	.+0      	; 0x1938 <GPIO_SetupPin_Value+0x8>
    1938:	0f 92       	push	r0
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	6a 83       	std	Y+2, r22	; 0x02
    1942:	4b 83       	std	Y+3, r20	; 0x03

		switch(port_id)
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	3d 83       	std	Y+5, r19	; 0x05
    194c:	2c 83       	std	Y+4, r18	; 0x04
    194e:	8c 81       	ldd	r24, Y+4	; 0x04
    1950:	9d 81       	ldd	r25, Y+5	; 0x05
    1952:	81 30       	cpi	r24, 0x01	; 1
    1954:	91 05       	cpc	r25, r1
    1956:	09 f4       	brne	.+2      	; 0x195a <GPIO_SetupPin_Value+0x2a>
    1958:	47 c0       	rjmp	.+142    	; 0x19e8 <GPIO_SetupPin_Value+0xb8>
    195a:	2c 81       	ldd	r18, Y+4	; 0x04
    195c:	3d 81       	ldd	r19, Y+5	; 0x05
    195e:	22 30       	cpi	r18, 0x02	; 2
    1960:	31 05       	cpc	r19, r1
    1962:	2c f4       	brge	.+10     	; 0x196e <GPIO_SetupPin_Value+0x3e>
    1964:	8c 81       	ldd	r24, Y+4	; 0x04
    1966:	9d 81       	ldd	r25, Y+5	; 0x05
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	71 f0       	breq	.+28     	; 0x1988 <GPIO_SetupPin_Value+0x58>
    196c:	cb c0       	rjmp	.+406    	; 0x1b04 <GPIO_SetupPin_Value+0x1d4>
    196e:	2c 81       	ldd	r18, Y+4	; 0x04
    1970:	3d 81       	ldd	r19, Y+5	; 0x05
    1972:	22 30       	cpi	r18, 0x02	; 2
    1974:	31 05       	cpc	r19, r1
    1976:	09 f4       	brne	.+2      	; 0x197a <GPIO_SetupPin_Value+0x4a>
    1978:	67 c0       	rjmp	.+206    	; 0x1a48 <GPIO_SetupPin_Value+0x118>
    197a:	8c 81       	ldd	r24, Y+4	; 0x04
    197c:	9d 81       	ldd	r25, Y+5	; 0x05
    197e:	83 30       	cpi	r24, 0x03	; 3
    1980:	91 05       	cpc	r25, r1
    1982:	09 f4       	brne	.+2      	; 0x1986 <GPIO_SetupPin_Value+0x56>
    1984:	91 c0       	rjmp	.+290    	; 0x1aa8 <GPIO_SetupPin_Value+0x178>
    1986:	be c0       	rjmp	.+380    	; 0x1b04 <GPIO_SetupPin_Value+0x1d4>
			{
			case PORTA_ID:
				if(pin_value ==LOGIC_LOW)
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	88 23       	and	r24, r24
    198c:	a9 f4       	brne	.+42     	; 0x19b8 <GPIO_SetupPin_Value+0x88>
				{
					CLEAR_BIT(PORTA,pin_num);
    198e:	ab e3       	ldi	r26, 0x3B	; 59
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	eb e3       	ldi	r30, 0x3B	; 59
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	48 2f       	mov	r20, r24
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	02 2e       	mov	r0, r18
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <GPIO_SetupPin_Value+0x7c>
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	0a 94       	dec	r0
    19ae:	e2 f7       	brpl	.-8      	; 0x19a8 <GPIO_SetupPin_Value+0x78>
    19b0:	80 95       	com	r24
    19b2:	84 23       	and	r24, r20
    19b4:	8c 93       	st	X, r24
    19b6:	a6 c0       	rjmp	.+332    	; 0x1b04 <GPIO_SetupPin_Value+0x1d4>
				}
				else if(pin_value == LOGIC_HIGH)
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	81 30       	cpi	r24, 0x01	; 1
    19bc:	09 f0       	breq	.+2      	; 0x19c0 <GPIO_SetupPin_Value+0x90>
    19be:	a2 c0       	rjmp	.+324    	; 0x1b04 <GPIO_SetupPin_Value+0x1d4>
				{
					SET_BIT(PORTA,pin_num);
    19c0:	ab e3       	ldi	r26, 0x3B	; 59
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	eb e3       	ldi	r30, 0x3B	; 59
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	48 2f       	mov	r20, r24
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	02 2e       	mov	r0, r18
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <GPIO_SetupPin_Value+0xae>
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	0a 94       	dec	r0
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <GPIO_SetupPin_Value+0xaa>
    19e2:	84 2b       	or	r24, r20
    19e4:	8c 93       	st	X, r24
    19e6:	8e c0       	rjmp	.+284    	; 0x1b04 <GPIO_SetupPin_Value+0x1d4>
				}

				break;
			case PORTB_ID:
				if(pin_value ==LOGIC_LOW)
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	88 23       	and	r24, r24
    19ec:	a9 f4       	brne	.+42     	; 0x1a18 <GPIO_SetupPin_Value+0xe8>
				{
					CLEAR_BIT(PORTB,pin_num);
    19ee:	a8 e3       	ldi	r26, 0x38	; 56
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e8 e3       	ldi	r30, 0x38	; 56
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	48 2f       	mov	r20, r24
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	02 2e       	mov	r0, r18
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <GPIO_SetupPin_Value+0xdc>
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	0a 94       	dec	r0
    1a0e:	e2 f7       	brpl	.-8      	; 0x1a08 <GPIO_SetupPin_Value+0xd8>
    1a10:	80 95       	com	r24
    1a12:	84 23       	and	r24, r20
    1a14:	8c 93       	st	X, r24
    1a16:	76 c0       	rjmp	.+236    	; 0x1b04 <GPIO_SetupPin_Value+0x1d4>
				}
				else if(pin_value == LOGIC_HIGH)
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	81 30       	cpi	r24, 0x01	; 1
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <GPIO_SetupPin_Value+0xf0>
    1a1e:	72 c0       	rjmp	.+228    	; 0x1b04 <GPIO_SetupPin_Value+0x1d4>
				{
					SET_BIT(PORTB,pin_num);
    1a20:	a8 e3       	ldi	r26, 0x38	; 56
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e8 e3       	ldi	r30, 0x38	; 56
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 2e       	mov	r0, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <GPIO_SetupPin_Value+0x10e>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	0a 94       	dec	r0
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <GPIO_SetupPin_Value+0x10a>
    1a42:	84 2b       	or	r24, r20
    1a44:	8c 93       	st	X, r24
    1a46:	5e c0       	rjmp	.+188    	; 0x1b04 <GPIO_SetupPin_Value+0x1d4>
				}
				break;
			case PORTC_ID:
				if(pin_value ==LOGIC_LOW)
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	88 23       	and	r24, r24
    1a4c:	a9 f4       	brne	.+42     	; 0x1a78 <GPIO_SetupPin_Value+0x148>
				{
					CLEAR_BIT(PORTC,pin_num);
    1a4e:	a5 e3       	ldi	r26, 0x35	; 53
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e5 e3       	ldi	r30, 0x35	; 53
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	48 2f       	mov	r20, r24
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	02 2e       	mov	r0, r18
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <GPIO_SetupPin_Value+0x13c>
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	0a 94       	dec	r0
    1a6e:	e2 f7       	brpl	.-8      	; 0x1a68 <GPIO_SetupPin_Value+0x138>
    1a70:	80 95       	com	r24
    1a72:	84 23       	and	r24, r20
    1a74:	8c 93       	st	X, r24
    1a76:	46 c0       	rjmp	.+140    	; 0x1b04 <GPIO_SetupPin_Value+0x1d4>
				}
				else if(pin_value == LOGIC_HIGH)
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	81 30       	cpi	r24, 0x01	; 1
    1a7c:	09 f0       	breq	.+2      	; 0x1a80 <GPIO_SetupPin_Value+0x150>
    1a7e:	42 c0       	rjmp	.+132    	; 0x1b04 <GPIO_SetupPin_Value+0x1d4>
				{
					SET_BIT(PORTC,pin_num);
    1a80:	a5 e3       	ldi	r26, 0x35	; 53
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e5 e3       	ldi	r30, 0x35	; 53
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	48 2f       	mov	r20, r24
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	02 2e       	mov	r0, r18
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <GPIO_SetupPin_Value+0x16e>
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	0a 94       	dec	r0
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <GPIO_SetupPin_Value+0x16a>
    1aa2:	84 2b       	or	r24, r20
    1aa4:	8c 93       	st	X, r24
    1aa6:	2e c0       	rjmp	.+92     	; 0x1b04 <GPIO_SetupPin_Value+0x1d4>
				}
				break;
			case PORTD_ID:
				if(pin_value ==LOGIC_LOW)
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	88 23       	and	r24, r24
    1aac:	a9 f4       	brne	.+42     	; 0x1ad8 <GPIO_SetupPin_Value+0x1a8>
				{
					CLEAR_BIT(PORTD,pin_num);
    1aae:	a2 e3       	ldi	r26, 0x32	; 50
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e2 e3       	ldi	r30, 0x32	; 50
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	48 2f       	mov	r20, r24
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	02 2e       	mov	r0, r18
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <GPIO_SetupPin_Value+0x19c>
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	0a 94       	dec	r0
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <GPIO_SetupPin_Value+0x198>
    1ad0:	80 95       	com	r24
    1ad2:	84 23       	and	r24, r20
    1ad4:	8c 93       	st	X, r24
    1ad6:	16 c0       	rjmp	.+44     	; 0x1b04 <GPIO_SetupPin_Value+0x1d4>
				}
				else if(pin_value == LOGIC_HIGH)
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	99 f4       	brne	.+38     	; 0x1b04 <GPIO_SetupPin_Value+0x1d4>
				{
					SET_BIT(PORTD,pin_num);
    1ade:	a2 e3       	ldi	r26, 0x32	; 50
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e2 e3       	ldi	r30, 0x32	; 50
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	48 2f       	mov	r20, r24
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	02 2e       	mov	r0, r18
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <GPIO_SetupPin_Value+0x1cc>
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	0a 94       	dec	r0
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <GPIO_SetupPin_Value+0x1c8>
    1b00:	84 2b       	or	r24, r20
    1b02:	8c 93       	st	X, r24
				}
				break;

			}

}
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <GPIO_SetupPort_Value>:
void GPIO_SetupPort_Value(uint8 port_id,uint8 port_value)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <GPIO_SetupPort_Value+0x6>
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <GPIO_SetupPort_Value+0x8>
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	6a 83       	std	Y+2, r22	; 0x02
	if( port_id > NUM_OF_PORTS)
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	85 30       	cpi	r24, 0x05	; 5
    1b28:	90 f5       	brcc	.+100    	; 0x1b8e <GPIO_SetupPort_Value+0x7a>
	}
	else
	{


		switch(port_id)
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	3c 83       	std	Y+4, r19	; 0x04
    1b32:	2b 83       	std	Y+3, r18	; 0x03
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	9c 81       	ldd	r25, Y+4	; 0x04
    1b38:	81 30       	cpi	r24, 0x01	; 1
    1b3a:	91 05       	cpc	r25, r1
    1b3c:	d1 f0       	breq	.+52     	; 0x1b72 <GPIO_SetupPort_Value+0x5e>
    1b3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b40:	3c 81       	ldd	r19, Y+4	; 0x04
    1b42:	22 30       	cpi	r18, 0x02	; 2
    1b44:	31 05       	cpc	r19, r1
    1b46:	2c f4       	brge	.+10     	; 0x1b52 <GPIO_SetupPort_Value+0x3e>
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	61 f0       	breq	.+24     	; 0x1b68 <GPIO_SetupPort_Value+0x54>
    1b50:	1e c0       	rjmp	.+60     	; 0x1b8e <GPIO_SetupPort_Value+0x7a>
    1b52:	2b 81       	ldd	r18, Y+3	; 0x03
    1b54:	3c 81       	ldd	r19, Y+4	; 0x04
    1b56:	22 30       	cpi	r18, 0x02	; 2
    1b58:	31 05       	cpc	r19, r1
    1b5a:	81 f0       	breq	.+32     	; 0x1b7c <GPIO_SetupPort_Value+0x68>
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b60:	83 30       	cpi	r24, 0x03	; 3
    1b62:	91 05       	cpc	r25, r1
    1b64:	81 f0       	breq	.+32     	; 0x1b86 <GPIO_SetupPort_Value+0x72>
    1b66:	13 c0       	rjmp	.+38     	; 0x1b8e <GPIO_SetupPort_Value+0x7a>
			{
			case PORTA_ID:
				PORTA=port_value;
    1b68:	eb e3       	ldi	r30, 0x3B	; 59
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	80 83       	st	Z, r24
    1b70:	0e c0       	rjmp	.+28     	; 0x1b8e <GPIO_SetupPort_Value+0x7a>

				break;
			case PORTB_ID:
				PORTB=port_value;
    1b72:	e8 e3       	ldi	r30, 0x38	; 56
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	80 83       	st	Z, r24
    1b7a:	09 c0       	rjmp	.+18     	; 0x1b8e <GPIO_SetupPort_Value+0x7a>
				break;
			case PORTC_ID:
				PORTC=port_value;
    1b7c:	e5 e3       	ldi	r30, 0x35	; 53
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	80 83       	st	Z, r24
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <GPIO_SetupPort_Value+0x7a>
				break;
			case PORTD_ID:
				PORTD=port_value;
    1b86:	e2 e3       	ldi	r30, 0x32	; 50
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	80 83       	st	Z, r24
				break;

			}
	}
}
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <GPIO_GetPin_Value>:
uint8 GPIO_GetPin_Value(uint8 port_id,uint8 pin_num)
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <GPIO_GetPin_Value+0x6>
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <GPIO_GetPin_Value+0x8>
    1ba4:	0f 92       	push	r0
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	8a 83       	std	Y+2, r24	; 0x02
    1bac:	6b 83       	std	Y+3, r22	; 0x03
	uint8 valu=0;
    1bae:	19 82       	std	Y+1, r1	; 0x01
	if(pin_num > NUM_OF_PINS || port_id > NUM_OF_PORTS)
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	89 30       	cpi	r24, 0x09	; 9
    1bb4:	08 f0       	brcs	.+2      	; 0x1bb8 <GPIO_GetPin_Value+0x1c>
    1bb6:	6b c0       	rjmp	.+214    	; 0x1c8e <GPIO_GetPin_Value+0xf2>
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	85 30       	cpi	r24, 0x05	; 5
    1bbc:	08 f0       	brcs	.+2      	; 0x1bc0 <GPIO_GetPin_Value+0x24>
    1bbe:	67 c0       	rjmp	.+206    	; 0x1c8e <GPIO_GetPin_Value+0xf2>

	}
   else
	{

	switch(port_id)
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	3d 83       	std	Y+5, r19	; 0x05
    1bc8:	2c 83       	std	Y+4, r18	; 0x04
    1bca:	4c 81       	ldd	r20, Y+4	; 0x04
    1bcc:	5d 81       	ldd	r21, Y+5	; 0x05
    1bce:	41 30       	cpi	r20, 0x01	; 1
    1bd0:	51 05       	cpc	r21, r1
    1bd2:	41 f1       	breq	.+80     	; 0x1c24 <GPIO_GetPin_Value+0x88>
    1bd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd8:	82 30       	cpi	r24, 0x02	; 2
    1bda:	91 05       	cpc	r25, r1
    1bdc:	34 f4       	brge	.+12     	; 0x1bea <GPIO_GetPin_Value+0x4e>
    1bde:	2c 81       	ldd	r18, Y+4	; 0x04
    1be0:	3d 81       	ldd	r19, Y+5	; 0x05
    1be2:	21 15       	cp	r18, r1
    1be4:	31 05       	cpc	r19, r1
    1be6:	61 f0       	breq	.+24     	; 0x1c00 <GPIO_GetPin_Value+0x64>
    1be8:	52 c0       	rjmp	.+164    	; 0x1c8e <GPIO_GetPin_Value+0xf2>
    1bea:	4c 81       	ldd	r20, Y+4	; 0x04
    1bec:	5d 81       	ldd	r21, Y+5	; 0x05
    1bee:	42 30       	cpi	r20, 0x02	; 2
    1bf0:	51 05       	cpc	r21, r1
    1bf2:	51 f1       	breq	.+84     	; 0x1c48 <GPIO_GetPin_Value+0xac>
    1bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf8:	83 30       	cpi	r24, 0x03	; 3
    1bfa:	91 05       	cpc	r25, r1
    1bfc:	b9 f1       	breq	.+110    	; 0x1c6c <GPIO_GetPin_Value+0xd0>
    1bfe:	47 c0       	rjmp	.+142    	; 0x1c8e <GPIO_GetPin_Value+0xf2>
		{
		case PORTA_ID:
			valu=GET_BIT(PINA,pin_num);
    1c00:	e9 e3       	ldi	r30, 0x39	; 57
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	88 2f       	mov	r24, r24
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a9 01       	movw	r20, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <GPIO_GetPin_Value+0x7c>
    1c14:	55 95       	asr	r21
    1c16:	47 95       	ror	r20
    1c18:	8a 95       	dec	r24
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <GPIO_GetPin_Value+0x78>
    1c1c:	ca 01       	movw	r24, r20
    1c1e:	81 70       	andi	r24, 0x01	; 1
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	35 c0       	rjmp	.+106    	; 0x1c8e <GPIO_GetPin_Value+0xf2>

			break;
		case PORTB_ID:
			valu= GET_BIT(PINB,pin_num);
    1c24:	e6 e3       	ldi	r30, 0x36	; 54
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	88 2f       	mov	r24, r24
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	a9 01       	movw	r20, r18
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <GPIO_GetPin_Value+0xa0>
    1c38:	55 95       	asr	r21
    1c3a:	47 95       	ror	r20
    1c3c:	8a 95       	dec	r24
    1c3e:	e2 f7       	brpl	.-8      	; 0x1c38 <GPIO_GetPin_Value+0x9c>
    1c40:	ca 01       	movw	r24, r20
    1c42:	81 70       	andi	r24, 0x01	; 1
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	23 c0       	rjmp	.+70     	; 0x1c8e <GPIO_GetPin_Value+0xf2>
			break;
		case PORTC_ID:
			valu= GET_BIT(PINC,pin_num);
    1c48:	e3 e3       	ldi	r30, 0x33	; 51
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	88 2f       	mov	r24, r24
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	a9 01       	movw	r20, r18
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <GPIO_GetPin_Value+0xc4>
    1c5c:	55 95       	asr	r21
    1c5e:	47 95       	ror	r20
    1c60:	8a 95       	dec	r24
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <GPIO_GetPin_Value+0xc0>
    1c64:	ca 01       	movw	r24, r20
    1c66:	81 70       	andi	r24, 0x01	; 1
    1c68:	89 83       	std	Y+1, r24	; 0x01
    1c6a:	11 c0       	rjmp	.+34     	; 0x1c8e <GPIO_GetPin_Value+0xf2>
			break;
		case PORTD_ID:
			valu= GET_BIT(PIND,pin_num);
    1c6c:	e0 e3       	ldi	r30, 0x30	; 48
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	88 2f       	mov	r24, r24
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	a9 01       	movw	r20, r18
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <GPIO_GetPin_Value+0xe8>
    1c80:	55 95       	asr	r21
    1c82:	47 95       	ror	r20
    1c84:	8a 95       	dec	r24
    1c86:	e2 f7       	brpl	.-8      	; 0x1c80 <GPIO_GetPin_Value+0xe4>
    1c88:	ca 01       	movw	r24, r20
    1c8a:	81 70       	andi	r24, 0x01	; 1
    1c8c:	89 83       	std	Y+1, r24	; 0x01
			break;

		}

}
	return valu;
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <GPIO_GetPort_Value>:
uint8 GPIO_GetPort_Value(uint8 port_id)
{
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <GPIO_GetPort_Value+0x6>
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <GPIO_GetPort_Value+0x8>
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
    1cac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 pin=0x00;
    1cae:	19 82       	std	Y+1, r1	; 0x01
	if( port_id > NUM_OF_PORTS)
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	85 30       	cpi	r24, 0x05	; 5
    1cb4:	90 f5       	brcc	.+100    	; 0x1d1a <GPIO_GetPort_Value+0x7a>

	}
	else
	{

		switch(port_id)
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	3c 83       	std	Y+4, r19	; 0x04
    1cbe:	2b 83       	std	Y+3, r18	; 0x03
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc4:	81 30       	cpi	r24, 0x01	; 1
    1cc6:	91 05       	cpc	r25, r1
    1cc8:	d1 f0       	breq	.+52     	; 0x1cfe <GPIO_GetPort_Value+0x5e>
    1cca:	2b 81       	ldd	r18, Y+3	; 0x03
    1ccc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cce:	22 30       	cpi	r18, 0x02	; 2
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	2c f4       	brge	.+10     	; 0x1cde <GPIO_GetPort_Value+0x3e>
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	61 f0       	breq	.+24     	; 0x1cf4 <GPIO_GetPort_Value+0x54>
    1cdc:	1e c0       	rjmp	.+60     	; 0x1d1a <GPIO_GetPort_Value+0x7a>
    1cde:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce2:	22 30       	cpi	r18, 0x02	; 2
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	81 f0       	breq	.+32     	; 0x1d08 <GPIO_GetPort_Value+0x68>
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	83 30       	cpi	r24, 0x03	; 3
    1cee:	91 05       	cpc	r25, r1
    1cf0:	81 f0       	breq	.+32     	; 0x1d12 <GPIO_GetPort_Value+0x72>
    1cf2:	13 c0       	rjmp	.+38     	; 0x1d1a <GPIO_GetPort_Value+0x7a>
			{
			case PORTA_ID:
				pin= PINA;
    1cf4:	e9 e3       	ldi	r30, 0x39	; 57
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    1cfc:	0e c0       	rjmp	.+28     	; 0x1d1a <GPIO_GetPort_Value+0x7a>
				break;
			case PORTB_ID:
				pin= PINB;
    1cfe:	e6 e3       	ldi	r30, 0x36	; 54
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	89 83       	std	Y+1, r24	; 0x01
    1d06:	09 c0       	rjmp	.+18     	; 0x1d1a <GPIO_GetPort_Value+0x7a>
				break;
			case PORTC_ID:
				pin= PINC;
    1d08:	e3 e3       	ldi	r30, 0x33	; 51
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	04 c0       	rjmp	.+8      	; 0x1d1a <GPIO_GetPort_Value+0x7a>
				break;
			case PORTD_ID:
				pin= PIND;
    1d12:	e0 e3       	ldi	r30, 0x30	; 48
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
	}
	return pin;
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	08 95       	ret

00001d2a <GPIO_TogglePin_Value>:
void GPIO_TogglePin_Value(uint8 port_id,uint8 pin_num)
{
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <GPIO_TogglePin_Value+0x6>
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <GPIO_TogglePin_Value+0x8>
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	89 83       	std	Y+1, r24	; 0x01
    1d38:	6a 83       	std	Y+2, r22	; 0x02
	if(pin_num > NUM_OF_PINS || port_id > NUM_OF_PORTS)
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	89 30       	cpi	r24, 0x09	; 9
    1d3e:	08 f0       	brcs	.+2      	; 0x1d42 <GPIO_TogglePin_Value+0x18>
    1d40:	72 c0       	rjmp	.+228    	; 0x1e26 <GPIO_TogglePin_Value+0xfc>
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	85 30       	cpi	r24, 0x05	; 5
    1d46:	08 f0       	brcs	.+2      	; 0x1d4a <GPIO_TogglePin_Value+0x20>
    1d48:	6e c0       	rjmp	.+220    	; 0x1e26 <GPIO_TogglePin_Value+0xfc>
	{

	}
	else
	{
		switch(port_id)
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	3c 83       	std	Y+4, r19	; 0x04
    1d52:	2b 83       	std	Y+3, r18	; 0x03
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	9c 81       	ldd	r25, Y+4	; 0x04
    1d58:	81 30       	cpi	r24, 0x01	; 1
    1d5a:	91 05       	cpc	r25, r1
    1d5c:	49 f1       	breq	.+82     	; 0x1db0 <GPIO_TogglePin_Value+0x86>
    1d5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d60:	3c 81       	ldd	r19, Y+4	; 0x04
    1d62:	22 30       	cpi	r18, 0x02	; 2
    1d64:	31 05       	cpc	r19, r1
    1d66:	2c f4       	brge	.+10     	; 0x1d72 <GPIO_TogglePin_Value+0x48>
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	61 f0       	breq	.+24     	; 0x1d88 <GPIO_TogglePin_Value+0x5e>
    1d70:	5a c0       	rjmp	.+180    	; 0x1e26 <GPIO_TogglePin_Value+0xfc>
    1d72:	2b 81       	ldd	r18, Y+3	; 0x03
    1d74:	3c 81       	ldd	r19, Y+4	; 0x04
    1d76:	22 30       	cpi	r18, 0x02	; 2
    1d78:	31 05       	cpc	r19, r1
    1d7a:	71 f1       	breq	.+92     	; 0x1dd8 <GPIO_TogglePin_Value+0xae>
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d80:	83 30       	cpi	r24, 0x03	; 3
    1d82:	91 05       	cpc	r25, r1
    1d84:	e9 f1       	breq	.+122    	; 0x1e00 <GPIO_TogglePin_Value+0xd6>
    1d86:	4f c0       	rjmp	.+158    	; 0x1e26 <GPIO_TogglePin_Value+0xfc>
		{
			case PORTA_ID:
				TOGGLE_BIT(PORTA,pin_num);
    1d88:	ab e3       	ldi	r26, 0x3B	; 59
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	eb e3       	ldi	r30, 0x3B	; 59
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	48 2f       	mov	r20, r24
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	02 2e       	mov	r0, r18
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <GPIO_TogglePin_Value+0x7c>
    1da2:	88 0f       	add	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	0a 94       	dec	r0
    1da8:	e2 f7       	brpl	.-8      	; 0x1da2 <GPIO_TogglePin_Value+0x78>
    1daa:	84 27       	eor	r24, r20
    1dac:	8c 93       	st	X, r24
    1dae:	3b c0       	rjmp	.+118    	; 0x1e26 <GPIO_TogglePin_Value+0xfc>
				break;

			case PORTB_ID:
				TOGGLE_BIT(PORTB,pin_num);
    1db0:	a8 e3       	ldi	r26, 0x38	; 56
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e8 e3       	ldi	r30, 0x38	; 56
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	48 2f       	mov	r20, r24
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	02 2e       	mov	r0, r18
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <GPIO_TogglePin_Value+0xa4>
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	0a 94       	dec	r0
    1dd0:	e2 f7       	brpl	.-8      	; 0x1dca <GPIO_TogglePin_Value+0xa0>
    1dd2:	84 27       	eor	r24, r20
    1dd4:	8c 93       	st	X, r24
    1dd6:	27 c0       	rjmp	.+78     	; 0x1e26 <GPIO_TogglePin_Value+0xfc>
				break;

			case PORTC_ID:
				TOGGLE_BIT(PORTC,pin_num);
    1dd8:	a5 e3       	ldi	r26, 0x35	; 53
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e5 e3       	ldi	r30, 0x35	; 53
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	48 2f       	mov	r20, r24
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	28 2f       	mov	r18, r24
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	02 2e       	mov	r0, r18
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <GPIO_TogglePin_Value+0xcc>
    1df2:	88 0f       	add	r24, r24
    1df4:	99 1f       	adc	r25, r25
    1df6:	0a 94       	dec	r0
    1df8:	e2 f7       	brpl	.-8      	; 0x1df2 <GPIO_TogglePin_Value+0xc8>
    1dfa:	84 27       	eor	r24, r20
    1dfc:	8c 93       	st	X, r24
    1dfe:	13 c0       	rjmp	.+38     	; 0x1e26 <GPIO_TogglePin_Value+0xfc>
				break;

			case PORTD_ID:
				TOGGLE_BIT(PORTD,pin_num);
    1e00:	a2 e3       	ldi	r26, 0x32	; 50
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e2 e3       	ldi	r30, 0x32	; 50
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	48 2f       	mov	r20, r24
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	02 2e       	mov	r0, r18
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <GPIO_TogglePin_Value+0xf4>
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	0a 94       	dec	r0
    1e20:	e2 f7       	brpl	.-8      	; 0x1e1a <GPIO_TogglePin_Value+0xf0>
    1e22:	84 27       	eor	r24, r20
    1e24:	8c 93       	st	X, r24
				break;

			}
	}

}
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <GINT_Enable>:
#include "GINT_Config.h"



void GINT_Enable()
{
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,SREG_I_BIT);
    1e3c:	af e5       	ldi	r26, 0x5F	; 95
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	ef e5       	ldi	r30, 0x5F	; 95
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	80 68       	ori	r24, 0x80	; 128
    1e48:	8c 93       	st	X, r24
}
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <GINT_Disable>:
void GINT_Disable()
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG_REG,SREG_I_BIT);
    1e58:	af e5       	ldi	r26, 0x5F	; 95
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	ef e5       	ldi	r30, 0x5F	; 95
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	8f 77       	andi	r24, 0x7F	; 127
    1e64:	8c 93       	st	X, r24
}
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <EXTI_initINT1>:
void (*callback_Ptr_INT0)(void)=NULL;
void (*callback_Ptr_INT1)(void)=NULL;
void (*callback_Ptr_INT2)(void)=NULL;

void EXTI_initINT1(interupt_sense_control control)
{
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	0f 92       	push	r0
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    1e76:	89 83       	std	Y+1, r24	; 0x01
	GPIO_SetupPin_Direction(PORTD_ID, EXINT1_PIN, PIN_INPUT);
    1e78:	83 e0       	ldi	r24, 0x03	; 3
    1e7a:	63 e0       	ldi	r22, 0x03	; 3
    1e7c:	40 e0       	ldi	r20, 0x00	; 0
    1e7e:	0e 94 31 0b 	call	0x1662	; 0x1662 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Value(PORTD_ID, EXINT1_PIN, LOGIC_HIGH);
    1e82:	83 e0       	ldi	r24, 0x03	; 3
    1e84:	63 e0       	ldi	r22, 0x03	; 3
    1e86:	41 e0       	ldi	r20, 0x01	; 1
    1e88:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>

	if(control ==rising_edge)
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	81 30       	cpi	r24, 0x01	; 1
    1e90:	79 f4       	brne	.+30     	; 0x1eb0 <EXTI_initINT1+0x44>
	{
		SET_BIT(MCUCR_REG,MCUCR_ISC10);
    1e92:	a5 e5       	ldi	r26, 0x55	; 85
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e5 e5       	ldi	r30, 0x55	; 85
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	84 60       	ori	r24, 0x04	; 4
    1e9e:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,MCUCR_ISC11);
    1ea0:	a5 e5       	ldi	r26, 0x55	; 85
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e5 e5       	ldi	r30, 0x55	; 85
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	88 60       	ori	r24, 0x08	; 8
    1eac:	8c 93       	st	X, r24
    1eae:	11 c0       	rjmp	.+34     	; 0x1ed2 <EXTI_initINT1+0x66>
	}
	else if(control==falling_edge)
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	88 23       	and	r24, r24
    1eb4:	71 f4       	brne	.+28     	; 0x1ed2 <EXTI_initINT1+0x66>
	{
		CLEAR_BIT(MCUCR_REG,MCUCR_ISC10);
    1eb6:	a5 e5       	ldi	r26, 0x55	; 85
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e5 e5       	ldi	r30, 0x55	; 85
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	8b 7f       	andi	r24, 0xFB	; 251
    1ec2:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,MCUCR_ISC11);
    1ec4:	a5 e5       	ldi	r26, 0x55	; 85
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e5 e5       	ldi	r30, 0x55	; 85
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	88 60       	ori	r24, 0x08	; 8
    1ed0:	8c 93       	st	X, r24
	}
}
    1ed2:	0f 90       	pop	r0
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <EXTI_initINT0>:
void EXTI_initINT0(interupt_sense_control control)
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	0f 92       	push	r0
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	89 83       	std	Y+1, r24	; 0x01
	GPIO_SetupPin_Direction(PORTD_ID, EXINT0_PIN, PIN_INPUT);
    1ee6:	83 e0       	ldi	r24, 0x03	; 3
    1ee8:	62 e0       	ldi	r22, 0x02	; 2
    1eea:	40 e0       	ldi	r20, 0x00	; 0
    1eec:	0e 94 31 0b 	call	0x1662	; 0x1662 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Value(PORTD_ID, EXINT0_PIN, LOGIC_HIGH);
    1ef0:	83 e0       	ldi	r24, 0x03	; 3
    1ef2:	62 e0       	ldi	r22, 0x02	; 2
    1ef4:	41 e0       	ldi	r20, 0x01	; 1
    1ef6:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
	if(control ==rising_edge)
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	81 30       	cpi	r24, 0x01	; 1
    1efe:	79 f4       	brne	.+30     	; 0x1f1e <EXTI_initINT0+0x44>
	{
		SET_BIT(MCUCR_REG,MCUCR_ISC00);
    1f00:	a5 e5       	ldi	r26, 0x55	; 85
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e5 e5       	ldi	r30, 0x55	; 85
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	81 60       	ori	r24, 0x01	; 1
    1f0c:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,MCUCR_ISC01);
    1f0e:	a5 e5       	ldi	r26, 0x55	; 85
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e5 e5       	ldi	r30, 0x55	; 85
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	82 60       	ori	r24, 0x02	; 2
    1f1a:	8c 93       	st	X, r24
    1f1c:	11 c0       	rjmp	.+34     	; 0x1f40 <EXTI_initINT0+0x66>

	}
	else if(control==falling_edge)
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	88 23       	and	r24, r24
    1f22:	71 f4       	brne	.+28     	; 0x1f40 <EXTI_initINT0+0x66>
	{
		CLEAR_BIT(MCUCR_REG,MCUCR_ISC00);
    1f24:	a5 e5       	ldi	r26, 0x55	; 85
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e5 e5       	ldi	r30, 0x55	; 85
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	8e 7f       	andi	r24, 0xFE	; 254
    1f30:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,MCUCR_ISC01);
    1f32:	a5 e5       	ldi	r26, 0x55	; 85
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e5 e5       	ldi	r30, 0x55	; 85
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	82 60       	ori	r24, 0x02	; 2
    1f3e:	8c 93       	st	X, r24
	}

}
    1f40:	0f 90       	pop	r0
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <EXTI_initINT2>:
void EXTI_initINT2(interupt_sense_control control)
{
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	0f 92       	push	r0
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    1f52:	89 83       	std	Y+1, r24	; 0x01
	GPIO_SetupPin_Direction(PORTD_ID, EXINT2_PIN, PIN_INPUT);
    1f54:	83 e0       	ldi	r24, 0x03	; 3
    1f56:	62 e0       	ldi	r22, 0x02	; 2
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	0e 94 31 0b 	call	0x1662	; 0x1662 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Value(PORTD_ID, EXINT2_PIN, LOGIC_HIGH);
    1f5e:	83 e0       	ldi	r24, 0x03	; 3
    1f60:	62 e0       	ldi	r22, 0x02	; 2
    1f62:	41 e0       	ldi	r20, 0x01	; 1
    1f64:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
	if(control ==rising_edge)
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	81 30       	cpi	r24, 0x01	; 1
    1f6c:	41 f4       	brne	.+16     	; 0x1f7e <EXTI_initINT2+0x36>
	{
		SET_BIT(MCUCSR_REG,MCUCSR_ISC2);
    1f6e:	a5 e4       	ldi	r26, 0x45	; 69
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	e5 e4       	ldi	r30, 0x45	; 69
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	80 64       	ori	r24, 0x40	; 64
    1f7a:	8c 93       	st	X, r24
    1f7c:	0a c0       	rjmp	.+20     	; 0x1f92 <EXTI_initINT2+0x4a>
	}
	else if(control==falling_edge)
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	88 23       	and	r24, r24
    1f82:	39 f4       	brne	.+14     	; 0x1f92 <EXTI_initINT2+0x4a>
	{
		CLEAR_BIT(MCUCSR_REG,MCUCSR_ISC2);
    1f84:	a5 e4       	ldi	r26, 0x45	; 69
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e5 e4       	ldi	r30, 0x45	; 69
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	8f 7b       	andi	r24, 0xBF	; 191
    1f90:	8c 93       	st	X, r24
	}
}
    1f92:	0f 90       	pop	r0
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	08 95       	ret

00001f9a <EXTI_Enable>:

void EXTI_Enable(GINT_Control GControl, void (*callbackPtr)(void), interupt_sense_control control)
{
    1f9a:	df 93       	push	r29
    1f9c:	cf 93       	push	r28
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <EXTI_Enable+0x6>
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <EXTI_Enable+0x8>
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    1fa8:	7b 83       	std	Y+3, r23	; 0x03
    1faa:	6a 83       	std	Y+2, r22	; 0x02
    1fac:	4c 83       	std	Y+4, r20	; 0x04
	if(GControl==INT0)
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
    1fb0:	81 30       	cpi	r24, 0x01	; 1
    1fb2:	89 f4       	brne	.+34     	; 0x1fd6 <EXTI_Enable+0x3c>
	{
		SET_BIT(GICR_REG,GICR_INT0);
    1fb4:	ab e5       	ldi	r26, 0x5B	; 91
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	eb e5       	ldi	r30, 0x5B	; 91
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	80 64       	ori	r24, 0x40	; 64
    1fc0:	8c 93       	st	X, r24
		callback_Ptr_INT0=callbackPtr;
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc6:	90 93 85 00 	sts	0x0085, r25
    1fca:	80 93 84 00 	sts	0x0084, r24
		EXTI_initINT0(control);
    1fce:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd0:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <EXTI_initINT0>
    1fd4:	27 c0       	rjmp	.+78     	; 0x2024 <EXTI_Enable+0x8a>
	}
	else if(GControl==INT1)
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	88 23       	and	r24, r24
    1fda:	89 f4       	brne	.+34     	; 0x1ffe <EXTI_Enable+0x64>
	{
		SET_BIT(GICR_REG,GICR_INT1);
    1fdc:	ab e5       	ldi	r26, 0x5B	; 91
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	eb e5       	ldi	r30, 0x5B	; 91
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	80 68       	ori	r24, 0x80	; 128
    1fe8:	8c 93       	st	X, r24
		callback_Ptr_INT1=callbackPtr;
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
    1fec:	9b 81       	ldd	r25, Y+3	; 0x03
    1fee:	90 93 87 00 	sts	0x0087, r25
    1ff2:	80 93 86 00 	sts	0x0086, r24
		EXTI_initINT1(control);
    1ff6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff8:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <EXTI_initINT1>
    1ffc:	13 c0       	rjmp	.+38     	; 0x2024 <EXTI_Enable+0x8a>
	}
	else if(GControl==INT2)
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	82 30       	cpi	r24, 0x02	; 2
    2002:	81 f4       	brne	.+32     	; 0x2024 <EXTI_Enable+0x8a>
	{
		SET_BIT(GICR_REG,GICR_INT2);
    2004:	ab e5       	ldi	r26, 0x5B	; 91
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	eb e5       	ldi	r30, 0x5B	; 91
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	80 62       	ori	r24, 0x20	; 32
    2010:	8c 93       	st	X, r24
		callback_Ptr_INT2=callbackPtr;
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	9b 81       	ldd	r25, Y+3	; 0x03
    2016:	90 93 89 00 	sts	0x0089, r25
    201a:	80 93 88 00 	sts	0x0088, r24
		EXTI_initINT2(control);
    201e:	8c 81       	ldd	r24, Y+4	; 0x04
    2020:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <EXTI_initINT2>
	}
}
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	08 95       	ret

00002032 <Read_flags>:

uint8 Read_flags(GINT_Control GControl)
{
    2032:	df 93       	push	r29
    2034:	cf 93       	push	r28
    2036:	00 d0       	rcall	.+0      	; 0x2038 <Read_flags+0x6>
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 flag='3';
    203e:	83 e3       	ldi	r24, 0x33	; 51
    2040:	89 83       	std	Y+1, r24	; 0x01
	if(GControl==INT0)
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	81 30       	cpi	r24, 0x01	; 1
    2046:	51 f4       	brne	.+20     	; 0x205c <Read_flags+0x2a>
	{
		flag=GET_BIT(GIFR_REG,GIFR_INTF0);
    2048:	ea e5       	ldi	r30, 0x5A	; 90
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	82 95       	swap	r24
    2050:	86 95       	lsr	r24
    2052:	86 95       	lsr	r24
    2054:	83 70       	andi	r24, 0x03	; 3
    2056:	81 70       	andi	r24, 0x01	; 1
    2058:	89 83       	std	Y+1, r24	; 0x01
    205a:	16 c0       	rjmp	.+44     	; 0x2088 <Read_flags+0x56>
	}
	else if(GControl==INT1)
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	88 23       	and	r24, r24
    2060:	41 f4       	brne	.+16     	; 0x2072 <Read_flags+0x40>
	{
		flag=GET_BIT(GIFR_REG,GIFR_INTF1);
    2062:	ea e5       	ldi	r30, 0x5A	; 90
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	88 1f       	adc	r24, r24
    206a:	88 27       	eor	r24, r24
    206c:	88 1f       	adc	r24, r24
    206e:	89 83       	std	Y+1, r24	; 0x01
    2070:	0b c0       	rjmp	.+22     	; 0x2088 <Read_flags+0x56>
	}
	else if(GControl==INT2)
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	82 30       	cpi	r24, 0x02	; 2
    2076:	41 f4       	brne	.+16     	; 0x2088 <Read_flags+0x56>
	{
		flag=GET_BIT(GIFR_REG,GIFR_INTF2);
    2078:	ea e5       	ldi	r30, 0x5A	; 90
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	82 95       	swap	r24
    2080:	86 95       	lsr	r24
    2082:	87 70       	andi	r24, 0x07	; 7
    2084:	81 70       	andi	r24, 0x01	; 1
    2086:	89 83       	std	Y+1, r24	; 0x01
	}
	return flag ;
    2088:	89 81       	ldd	r24, Y+1	; 0x01
}
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <__vector_1>:



void __vector_1(void)__attribute__((signal)); // command to the compiler
void __vector_1(void)
{
    2094:	1f 92       	push	r1
    2096:	0f 92       	push	r0
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	0f 92       	push	r0
    209c:	11 24       	eor	r1, r1
    209e:	2f 93       	push	r18
    20a0:	3f 93       	push	r19
    20a2:	4f 93       	push	r20
    20a4:	5f 93       	push	r21
    20a6:	6f 93       	push	r22
    20a8:	7f 93       	push	r23
    20aa:	8f 93       	push	r24
    20ac:	9f 93       	push	r25
    20ae:	af 93       	push	r26
    20b0:	bf 93       	push	r27
    20b2:	ef 93       	push	r30
    20b4:	ff 93       	push	r31
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
	if(callback_Ptr_INT0 !=NULL)
    20be:	80 91 84 00 	lds	r24, 0x0084
    20c2:	90 91 85 00 	lds	r25, 0x0085
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	29 f0       	breq	.+10     	; 0x20d4 <__vector_1+0x40>
	{
		callback_Ptr_INT0();
    20ca:	e0 91 84 00 	lds	r30, 0x0084
    20ce:	f0 91 85 00 	lds	r31, 0x0085
    20d2:	09 95       	icall
	}
}
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	ff 91       	pop	r31
    20da:	ef 91       	pop	r30
    20dc:	bf 91       	pop	r27
    20de:	af 91       	pop	r26
    20e0:	9f 91       	pop	r25
    20e2:	8f 91       	pop	r24
    20e4:	7f 91       	pop	r23
    20e6:	6f 91       	pop	r22
    20e8:	5f 91       	pop	r21
    20ea:	4f 91       	pop	r20
    20ec:	3f 91       	pop	r19
    20ee:	2f 91       	pop	r18
    20f0:	0f 90       	pop	r0
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	0f 90       	pop	r0
    20f6:	1f 90       	pop	r1
    20f8:	18 95       	reti

000020fa <__vector_2>:

void __vector_2(void)__attribute__((signal));
void __vector_2(void)
{
    20fa:	1f 92       	push	r1
    20fc:	0f 92       	push	r0
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	0f 92       	push	r0
    2102:	11 24       	eor	r1, r1
    2104:	2f 93       	push	r18
    2106:	3f 93       	push	r19
    2108:	4f 93       	push	r20
    210a:	5f 93       	push	r21
    210c:	6f 93       	push	r22
    210e:	7f 93       	push	r23
    2110:	8f 93       	push	r24
    2112:	9f 93       	push	r25
    2114:	af 93       	push	r26
    2116:	bf 93       	push	r27
    2118:	ef 93       	push	r30
    211a:	ff 93       	push	r31
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
	if(callback_Ptr_INT1 !=NULL)
    2124:	80 91 86 00 	lds	r24, 0x0086
    2128:	90 91 87 00 	lds	r25, 0x0087
    212c:	00 97       	sbiw	r24, 0x00	; 0
    212e:	29 f0       	breq	.+10     	; 0x213a <__vector_2+0x40>
	{
		callback_Ptr_INT1();
    2130:	e0 91 86 00 	lds	r30, 0x0086
    2134:	f0 91 87 00 	lds	r31, 0x0087
    2138:	09 95       	icall
	}
}
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	ff 91       	pop	r31
    2140:	ef 91       	pop	r30
    2142:	bf 91       	pop	r27
    2144:	af 91       	pop	r26
    2146:	9f 91       	pop	r25
    2148:	8f 91       	pop	r24
    214a:	7f 91       	pop	r23
    214c:	6f 91       	pop	r22
    214e:	5f 91       	pop	r21
    2150:	4f 91       	pop	r20
    2152:	3f 91       	pop	r19
    2154:	2f 91       	pop	r18
    2156:	0f 90       	pop	r0
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	0f 90       	pop	r0
    215c:	1f 90       	pop	r1
    215e:	18 95       	reti

00002160 <__vector_3>:

void __vector_3(void)__attribute__((signal));
void __vector_3(void)
{
    2160:	1f 92       	push	r1
    2162:	0f 92       	push	r0
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	0f 92       	push	r0
    2168:	11 24       	eor	r1, r1
    216a:	2f 93       	push	r18
    216c:	3f 93       	push	r19
    216e:	4f 93       	push	r20
    2170:	5f 93       	push	r21
    2172:	6f 93       	push	r22
    2174:	7f 93       	push	r23
    2176:	8f 93       	push	r24
    2178:	9f 93       	push	r25
    217a:	af 93       	push	r26
    217c:	bf 93       	push	r27
    217e:	ef 93       	push	r30
    2180:	ff 93       	push	r31
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
	if(callback_Ptr_INT2 !=NULL)
    218a:	80 91 88 00 	lds	r24, 0x0088
    218e:	90 91 89 00 	lds	r25, 0x0089
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	29 f0       	breq	.+10     	; 0x21a0 <__vector_3+0x40>
	{
		callback_Ptr_INT2();
    2196:	e0 91 88 00 	lds	r30, 0x0088
    219a:	f0 91 89 00 	lds	r31, 0x0089
    219e:	09 95       	icall
	}
}
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	ff 91       	pop	r31
    21a6:	ef 91       	pop	r30
    21a8:	bf 91       	pop	r27
    21aa:	af 91       	pop	r26
    21ac:	9f 91       	pop	r25
    21ae:	8f 91       	pop	r24
    21b0:	7f 91       	pop	r23
    21b2:	6f 91       	pop	r22
    21b4:	5f 91       	pop	r21
    21b6:	4f 91       	pop	r20
    21b8:	3f 91       	pop	r19
    21ba:	2f 91       	pop	r18
    21bc:	0f 90       	pop	r0
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	0f 90       	pop	r0
    21c2:	1f 90       	pop	r1
    21c4:	18 95       	reti

000021c6 <ADC_init>:
/** ======================= Defining global variables ======================= */
void (*ADC_callBack_ptr)(void) = NULL;
/** ========================================================================= */

void ADC_init(void)
{
    21c6:	df 93       	push	r29
    21c8:	cf 93       	push	r28
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
	/* Set the ADC VREF */
	ADMUX_REG->REF=ADC_VOLTAGE_REFERENCE;
    21ce:	e7 e2       	ldi	r30, 0x27	; 39
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	8f 73       	andi	r24, 0x3F	; 63
    21d6:	80 64       	ori	r24, 0x40	; 64
    21d8:	80 83       	st	Z, r24

	/* Enable/Disable the ADC left adjust */
#if	(ADC_LEFT_ADJUST == 1)
	ADMUX_REG->ADLAR = LeftAdjustResult;
#else
	ADMUX_REG->ADLAR = RightAdjustResult;
    21da:	e7 e2       	ldi	r30, 0x27	; 39
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	8f 7d       	andi	r24, 0xDF	; 223
    21e2:	80 83       	st	Z, r24
#endif

	/* Enable/Disable the ADC Auto trigger mode (ADATE)*/
#if (ADC_AUTO_TRIGGER_ENABLE == AutoTriggered)
	/* Enable the ADC Auto trigger mode */
	ADCSRA_REG->ADATE = AutoTriggered;
    21e4:	e6 e2       	ldi	r30, 0x26	; 38
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	80 62       	ori	r24, 0x20	; 32
    21ec:	80 83       	st	Z, r24

	/* Set the Auto trigger mode source (ADTS)*/
	SFIOR_REG->ADTS = ADC_AUTO_TRIG_SOURCE;
    21ee:	e0 e5       	ldi	r30, 0x50	; 80
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	8f 71       	andi	r24, 0x1F	; 31
    21f6:	80 83       	st	Z, r24
#else
	ADCSRA_REG->ADATE = DisableAutoTriggered;
#endif

	/* Set the ADC clock division */
	ADCSRA_REG->ADPS = ADC_PRESCALER_FACTOR;
    21f8:	e6 e2       	ldi	r30, 0x26	; 38
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	88 7f       	andi	r24, 0xF8	; 248
    2200:	86 60       	ori	r24, 0x06	; 6
    2202:	80 83       	st	Z, r24

	/* Enable the ADC */

	ADCSRA_REG->ADEN = 1;
    2204:	e6 e2       	ldi	r30, 0x26	; 38
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	80 68       	ori	r24, 0x80	; 128
    220c:	80 83       	st	Z, r24
}
    220e:	cf 91       	pop	r28
    2210:	df 91       	pop	r29
    2212:	08 95       	ret

00002214 <ADC_selectChannel>:


void ADC_selectChannel(ADC_channel Channel)
{
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	0f 92       	push	r0
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	89 83       	std	Y+1, r24	; 0x01
	/* Set the channel selection */
	ADMUX_REG->MUX = Channel;
    2220:	e7 e2       	ldi	r30, 0x27	; 39
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	8f 71       	andi	r24, 0x1F	; 31
    2228:	98 2f       	mov	r25, r24
    222a:	9f 71       	andi	r25, 0x1F	; 31
    222c:	80 81       	ld	r24, Z
    222e:	80 7e       	andi	r24, 0xE0	; 224
    2230:	89 2b       	or	r24, r25
    2232:	80 83       	st	Z, r24
}
    2234:	0f 90       	pop	r0
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <ADC_startConversionPollingMode>:

void ADC_startConversionPollingMode(void)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
	/* Make sure the ADC Interrupt is disabled */
	if(ADCSRA_REG->ADIE == 1)
    2244:	e6 e2       	ldi	r30, 0x26	; 38
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	88 70       	andi	r24, 0x08	; 8
    224c:	88 23       	and	r24, r24
    224e:	51 f0       	breq	.+20     	; 0x2264 <ADC_startConversionPollingMode+0x28>
	{
		ADCSRA_REG->ADIF = 1;	// Clear the ADC Interrupt flag (ADIF)
    2250:	e6 e2       	ldi	r30, 0x26	; 38
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	80 61       	ori	r24, 0x10	; 16
    2258:	80 83       	st	Z, r24
		ADCSRA_REG->ADIE = 0;	// Clear ADIE
    225a:	e6 e2       	ldi	r30, 0x26	; 38
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	87 7f       	andi	r24, 0xF7	; 247
    2262:	80 83       	st	Z, r24
	}

	/* Start the ADC conversion */
	ADC_startConversion();
    2264:	0e 94 3d 11 	call	0x227a	; 0x227a <ADC_startConversion>
	/* Poll for the ADC conversion */
	while(ADCSRA_REG->ADSC == startConversion);
    2268:	e6 e2       	ldi	r30, 0x26	; 38
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	80 74       	andi	r24, 0x40	; 64
    2270:	88 23       	and	r24, r24
    2272:	d1 f7       	brne	.-12     	; 0x2268 <ADC_startConversionPollingMode+0x2c>
}
    2274:	cf 91       	pop	r28
    2276:	df 91       	pop	r29
    2278:	08 95       	ret

0000227a <ADC_startConversion>:

void ADC_startConversion(void)
{
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
	/* Start the ADC conversion */
	ADCSRA_REG->ADSC = startConversion;
    2282:	e6 e2       	ldi	r30, 0x26	; 38
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	80 64       	ori	r24, 0x40	; 64
    228a:	80 83       	st	Z, r24
}
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	08 95       	ret

00002292 <ADC_readChannel>:

uint16 ADC_readChannel(void)
{
    2292:	df 93       	push	r29
    2294:	cf 93       	push	r28
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
	uint16 data=0;
	data = (ADCL_REG >> 6);
	data |= (ADCH_REG << 2);
	return data;
#else
	return ADC_DATA_REG;
    229a:	e4 e2       	ldi	r30, 0x24	; 36
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	91 81       	ldd	r25, Z+1	; 0x01
#endif
}
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	08 95       	ret

000022a8 <ADC_setCallBackFunction>:
void ADC_setCallBackFunction(void (*callBackPtr)(void))
{
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <ADC_setCallBackFunction+0x6>
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	9a 83       	std	Y+2, r25	; 0x02
    22b4:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA_REG->ADIF=1;
    22b6:	e6 e2       	ldi	r30, 0x26	; 38
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	80 61       	ori	r24, 0x10	; 16
    22be:	80 83       	st	Z, r24
	ADCSRA_REG->ADIE=1;
    22c0:	e6 e2       	ldi	r30, 0x26	; 38
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	88 60       	ori	r24, 0x08	; 8
    22c8:	80 83       	st	Z, r24
	if(callBackPtr != NULL)
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
    22cc:	9a 81       	ldd	r25, Y+2	; 0x02
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	31 f0       	breq	.+12     	; 0x22de <ADC_setCallBackFunction+0x36>
	{
		ADC_callBack_ptr = callBackPtr;
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
    22d4:	9a 81       	ldd	r25, Y+2	; 0x02
    22d6:	90 93 8b 00 	sts	0x008B, r25
    22da:	80 93 8a 00 	sts	0x008A, r24
	}
	ADC_startConversion();
    22de:	0e 94 3d 11 	call	0x227a	; 0x227a <ADC_startConversion>
}
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	08 95       	ret

000022ec <__vector_16>:

/** ===================== ADC ISRs Implementation ========================== */
/* ADC Conversion Complete ISR */
void __vector_16(void)	__attribute__((signal, used));
void __vector_16(void)
{
    22ec:	1f 92       	push	r1
    22ee:	0f 92       	push	r0
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	0f 92       	push	r0
    22f4:	11 24       	eor	r1, r1
    22f6:	2f 93       	push	r18
    22f8:	3f 93       	push	r19
    22fa:	4f 93       	push	r20
    22fc:	5f 93       	push	r21
    22fe:	6f 93       	push	r22
    2300:	7f 93       	push	r23
    2302:	8f 93       	push	r24
    2304:	9f 93       	push	r25
    2306:	af 93       	push	r26
    2308:	bf 93       	push	r27
    230a:	ef 93       	push	r30
    230c:	ff 93       	push	r31
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
	if(ADC_callBack_ptr != NULL)
    2316:	80 91 8a 00 	lds	r24, 0x008A
    231a:	90 91 8b 00 	lds	r25, 0x008B
    231e:	00 97       	sbiw	r24, 0x00	; 0
    2320:	29 f0       	breq	.+10     	; 0x232c <__vector_16+0x40>
	{
		ADC_callBack_ptr();
    2322:	e0 91 8a 00 	lds	r30, 0x008A
    2326:	f0 91 8b 00 	lds	r31, 0x008B
    232a:	09 95       	icall
	}
}
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	ff 91       	pop	r31
    2332:	ef 91       	pop	r30
    2334:	bf 91       	pop	r27
    2336:	af 91       	pop	r26
    2338:	9f 91       	pop	r25
    233a:	8f 91       	pop	r24
    233c:	7f 91       	pop	r23
    233e:	6f 91       	pop	r22
    2340:	5f 91       	pop	r21
    2342:	4f 91       	pop	r20
    2344:	3f 91       	pop	r19
    2346:	2f 91       	pop	r18
    2348:	0f 90       	pop	r0
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	0f 90       	pop	r0
    234e:	1f 90       	pop	r1
    2350:	18 95       	reti

00002352 <LED_setUpDirection>:
 */

#include "LED.h"

void LED_setUpDirection(uint8 port_id,uint8 pin_num,GPIO_PinDirection direction)
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	00 d0       	rcall	.+0      	; 0x2358 <LED_setUpDirection+0x6>
    2358:	0f 92       	push	r0
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	89 83       	std	Y+1, r24	; 0x01
    2360:	6a 83       	std	Y+2, r22	; 0x02
    2362:	4b 83       	std	Y+3, r20	; 0x03
	GPIO_SetupPin_Direction(port_id,pin_num, direction);
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	6a 81       	ldd	r22, Y+2	; 0x02
    2368:	4b 81       	ldd	r20, Y+3	; 0x03
    236a:	0e 94 31 0b 	call	0x1662	; 0x1662 <GPIO_SetupPin_Direction>


}
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	08 95       	ret

0000237a <LED_ON>:

void LED_ON(uint8 port_id,uint8 pin_num)
{
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	00 d0       	rcall	.+0      	; 0x2380 <LED_ON+0x6>
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
    2384:	89 83       	std	Y+1, r24	; 0x01
    2386:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_SetupPin_Value(port_id,pin_num,LOGIC_HIGH);
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	6a 81       	ldd	r22, Y+2	; 0x02
    238c:	41 e0       	ldi	r20, 0x01	; 1
    238e:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
}
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <LED_OFF>:
void LED_OFF(uint8 port_id,uint8 pin_num)
{
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <LED_OFF+0x6>
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_SetupPin_Value(port_id,pin_num,LOGIC_LOW);
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	6a 81       	ldd	r22, Y+2	; 0x02
    23ae:	40 e0       	ldi	r20, 0x00	; 0
    23b0:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
}
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	08 95       	ret

000023be <LED_Toggle>:

void LED_Toggle(uint8 port_id, uint8 pin_num)
{
    23be:	df 93       	push	r29
    23c0:	cf 93       	push	r28
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <LED_Toggle+0x6>
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	89 83       	std	Y+1, r24	; 0x01
    23ca:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_TogglePin_Value(port_id, pin_num);
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	6a 81       	ldd	r22, Y+2	; 0x02
    23d0:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <GPIO_TogglePin_Value>
}
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	cf 91       	pop	r28
    23da:	df 91       	pop	r29
    23dc:	08 95       	ret

000023de <LCD_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
static uint8 InitFinished = 0;

void LCD_init(void)
{
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	e8 97       	sbiw	r28, 0x38	; 56
    23e8:	0f b6       	in	r0, 0x3f	; 63
    23ea:	f8 94       	cli
    23ec:	de bf       	out	0x3e, r29	; 62
    23ee:	0f be       	out	0x3f, r0	; 63
    23f0:	cd bf       	out	0x3d, r28	; 61
	GPIO_SetupPin_Direction(PORTB_ID,LCD_PIN1,PIN_OUTPUT);/*D4*/
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	60 e0       	ldi	r22, 0x00	; 0
    23f6:	41 e0       	ldi	r20, 0x01	; 1
    23f8:	0e 94 31 0b 	call	0x1662	; 0x1662 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(PORTB_ID,LCD_PIN2,PIN_OUTPUT);/*D5*/
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	61 e0       	ldi	r22, 0x01	; 1
    2400:	41 e0       	ldi	r20, 0x01	; 1
    2402:	0e 94 31 0b 	call	0x1662	; 0x1662 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(PORTB_ID,LCD_PIN3,PIN_OUTPUT);/*D6*/
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	62 e0       	ldi	r22, 0x02	; 2
    240a:	41 e0       	ldi	r20, 0x01	; 1
    240c:	0e 94 31 0b 	call	0x1662	; 0x1662 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(PORTB_ID,LCD_PIN4,PIN_OUTPUT);/*D7*/
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	64 e0       	ldi	r22, 0x04	; 4
    2414:	41 e0       	ldi	r20, 0x01	; 1
    2416:	0e 94 31 0b 	call	0x1662	; 0x1662 <GPIO_SetupPin_Direction>

	GPIO_SetupPin_Direction(PORTA_ID,LCD_RS_PIN,PIN_OUTPUT);/*RS*/
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	63 e0       	ldi	r22, 0x03	; 3
    241e:	41 e0       	ldi	r20, 0x01	; 1
    2420:	0e 94 31 0b 	call	0x1662	; 0x1662 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(PORTA_ID,LCD_EN_PIN,PIN_OUTPUT); /*EN*/
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	62 e0       	ldi	r22, 0x02	; 2
    2428:	41 e0       	ldi	r20, 0x01	; 1
    242a:	0e 94 31 0b 	call	0x1662	; 0x1662 <GPIO_SetupPin_Direction>
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	a0 e2       	ldi	r26, 0x20	; 32
    2434:	b2 e4       	ldi	r27, 0x42	; 66
    2436:	8d ab       	std	Y+53, r24	; 0x35
    2438:	9e ab       	std	Y+54, r25	; 0x36
    243a:	af ab       	std	Y+55, r26	; 0x37
    243c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243e:	6d a9       	ldd	r22, Y+53	; 0x35
    2440:	7e a9       	ldd	r23, Y+54	; 0x36
    2442:	8f a9       	ldd	r24, Y+55	; 0x37
    2444:	98 ad       	ldd	r25, Y+56	; 0x38
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	4a e7       	ldi	r20, 0x7A	; 122
    244c:	55 e4       	ldi	r21, 0x45	; 69
    244e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	89 ab       	std	Y+49, r24	; 0x31
    2458:	9a ab       	std	Y+50, r25	; 0x32
    245a:	ab ab       	std	Y+51, r26	; 0x33
    245c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    245e:	69 a9       	ldd	r22, Y+49	; 0x31
    2460:	7a a9       	ldd	r23, Y+50	; 0x32
    2462:	8b a9       	ldd	r24, Y+51	; 0x33
    2464:	9c a9       	ldd	r25, Y+52	; 0x34
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e8       	ldi	r20, 0x80	; 128
    246c:	5f e3       	ldi	r21, 0x3F	; 63
    246e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2472:	88 23       	and	r24, r24
    2474:	2c f4       	brge	.+10     	; 0x2480 <LCD_init+0xa2>
		__ticks = 1;
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	98 ab       	std	Y+48, r25	; 0x30
    247c:	8f a7       	std	Y+47, r24	; 0x2f
    247e:	3f c0       	rjmp	.+126    	; 0x24fe <LCD_init+0x120>
	else if (__tmp > 65535)
    2480:	69 a9       	ldd	r22, Y+49	; 0x31
    2482:	7a a9       	ldd	r23, Y+50	; 0x32
    2484:	8b a9       	ldd	r24, Y+51	; 0x33
    2486:	9c a9       	ldd	r25, Y+52	; 0x34
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	3f ef       	ldi	r19, 0xFF	; 255
    248c:	4f e7       	ldi	r20, 0x7F	; 127
    248e:	57 e4       	ldi	r21, 0x47	; 71
    2490:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2494:	18 16       	cp	r1, r24
    2496:	4c f5       	brge	.+82     	; 0x24ea <LCD_init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2498:	6d a9       	ldd	r22, Y+53	; 0x35
    249a:	7e a9       	ldd	r23, Y+54	; 0x36
    249c:	8f a9       	ldd	r24, Y+55	; 0x37
    249e:	98 ad       	ldd	r25, Y+56	; 0x38
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e2       	ldi	r20, 0x20	; 32
    24a6:	51 e4       	ldi	r21, 0x41	; 65
    24a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	bc 01       	movw	r22, r24
    24b2:	cd 01       	movw	r24, r26
    24b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	98 ab       	std	Y+48, r25	; 0x30
    24be:	8f a7       	std	Y+47, r24	; 0x2f
    24c0:	0f c0       	rjmp	.+30     	; 0x24e0 <LCD_init+0x102>
    24c2:	80 e9       	ldi	r24, 0x90	; 144
    24c4:	91 e0       	ldi	r25, 0x01	; 1
    24c6:	9e a7       	std	Y+46, r25	; 0x2e
    24c8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    24cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <LCD_init+0xf0>
    24d2:	9e a7       	std	Y+46, r25	; 0x2e
    24d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24d8:	98 a9       	ldd	r25, Y+48	; 0x30
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	98 ab       	std	Y+48, r25	; 0x30
    24de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24e2:	98 a9       	ldd	r25, Y+48	; 0x30
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	69 f7       	brne	.-38     	; 0x24c2 <LCD_init+0xe4>
    24e8:	14 c0       	rjmp	.+40     	; 0x2512 <LCD_init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ea:	69 a9       	ldd	r22, Y+49	; 0x31
    24ec:	7a a9       	ldd	r23, Y+50	; 0x32
    24ee:	8b a9       	ldd	r24, Y+51	; 0x33
    24f0:	9c a9       	ldd	r25, Y+52	; 0x34
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	98 ab       	std	Y+48, r25	; 0x30
    24fc:	8f a7       	std	Y+47, r24	; 0x2f
    24fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2500:	98 a9       	ldd	r25, Y+48	; 0x30
    2502:	9c a7       	std	Y+44, r25	; 0x2c
    2504:	8b a7       	std	Y+43, r24	; 0x2b
    2506:	8b a5       	ldd	r24, Y+43	; 0x2b
    2508:	9c a5       	ldd	r25, Y+44	; 0x2c
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	f1 f7       	brne	.-4      	; 0x250a <LCD_init+0x12c>
    250e:	9c a7       	std	Y+44, r25	; 0x2c
    2510:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);

	LCD_writeCommand(0x20);
    2512:	80 e2       	ldi	r24, 0x20	; 32
    2514:	0e 94 00 14 	call	0x2800	; 0x2800 <LCD_writeCommand>
	LCD_writeCommand(0x20);
    2518:	80 e2       	ldi	r24, 0x20	; 32
    251a:	0e 94 00 14 	call	0x2800	; 0x2800 <LCD_writeCommand>
	LCD_writeCommand(0x80);
    251e:	80 e8       	ldi	r24, 0x80	; 128
    2520:	0e 94 00 14 	call	0x2800	; 0x2800 <LCD_writeCommand>
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	a0 e2       	ldi	r26, 0x20	; 32
    252a:	b2 e4       	ldi	r27, 0x42	; 66
    252c:	8f a3       	std	Y+39, r24	; 0x27
    252e:	98 a7       	std	Y+40, r25	; 0x28
    2530:	a9 a7       	std	Y+41, r26	; 0x29
    2532:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2534:	6f a1       	ldd	r22, Y+39	; 0x27
    2536:	78 a5       	ldd	r23, Y+40	; 0x28
    2538:	89 a5       	ldd	r24, Y+41	; 0x29
    253a:	9a a5       	ldd	r25, Y+42	; 0x2a
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	4a e7       	ldi	r20, 0x7A	; 122
    2542:	55 e4       	ldi	r21, 0x45	; 69
    2544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	8b a3       	std	Y+35, r24	; 0x23
    254e:	9c a3       	std	Y+36, r25	; 0x24
    2550:	ad a3       	std	Y+37, r26	; 0x25
    2552:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2554:	6b a1       	ldd	r22, Y+35	; 0x23
    2556:	7c a1       	ldd	r23, Y+36	; 0x24
    2558:	8d a1       	ldd	r24, Y+37	; 0x25
    255a:	9e a1       	ldd	r25, Y+38	; 0x26
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e8       	ldi	r20, 0x80	; 128
    2562:	5f e3       	ldi	r21, 0x3F	; 63
    2564:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2568:	88 23       	and	r24, r24
    256a:	2c f4       	brge	.+10     	; 0x2576 <LCD_init+0x198>
		__ticks = 1;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	9a a3       	std	Y+34, r25	; 0x22
    2572:	89 a3       	std	Y+33, r24	; 0x21
    2574:	3f c0       	rjmp	.+126    	; 0x25f4 <LCD_init+0x216>
	else if (__tmp > 65535)
    2576:	6b a1       	ldd	r22, Y+35	; 0x23
    2578:	7c a1       	ldd	r23, Y+36	; 0x24
    257a:	8d a1       	ldd	r24, Y+37	; 0x25
    257c:	9e a1       	ldd	r25, Y+38	; 0x26
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	3f ef       	ldi	r19, 0xFF	; 255
    2582:	4f e7       	ldi	r20, 0x7F	; 127
    2584:	57 e4       	ldi	r21, 0x47	; 71
    2586:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    258a:	18 16       	cp	r1, r24
    258c:	4c f5       	brge	.+82     	; 0x25e0 <LCD_init+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258e:	6f a1       	ldd	r22, Y+39	; 0x27
    2590:	78 a5       	ldd	r23, Y+40	; 0x28
    2592:	89 a5       	ldd	r24, Y+41	; 0x29
    2594:	9a a5       	ldd	r25, Y+42	; 0x2a
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e2       	ldi	r20, 0x20	; 32
    259c:	51 e4       	ldi	r21, 0x41	; 65
    259e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	9a a3       	std	Y+34, r25	; 0x22
    25b4:	89 a3       	std	Y+33, r24	; 0x21
    25b6:	0f c0       	rjmp	.+30     	; 0x25d6 <LCD_init+0x1f8>
    25b8:	80 e9       	ldi	r24, 0x90	; 144
    25ba:	91 e0       	ldi	r25, 0x01	; 1
    25bc:	98 a3       	std	Y+32, r25	; 0x20
    25be:	8f 8f       	std	Y+31, r24	; 0x1f
    25c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25c2:	98 a1       	ldd	r25, Y+32	; 0x20
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <LCD_init+0x1e6>
    25c8:	98 a3       	std	Y+32, r25	; 0x20
    25ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25cc:	89 a1       	ldd	r24, Y+33	; 0x21
    25ce:	9a a1       	ldd	r25, Y+34	; 0x22
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	9a a3       	std	Y+34, r25	; 0x22
    25d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d6:	89 a1       	ldd	r24, Y+33	; 0x21
    25d8:	9a a1       	ldd	r25, Y+34	; 0x22
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	69 f7       	brne	.-38     	; 0x25b8 <LCD_init+0x1da>
    25de:	14 c0       	rjmp	.+40     	; 0x2608 <LCD_init+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e0:	6b a1       	ldd	r22, Y+35	; 0x23
    25e2:	7c a1       	ldd	r23, Y+36	; 0x24
    25e4:	8d a1       	ldd	r24, Y+37	; 0x25
    25e6:	9e a1       	ldd	r25, Y+38	; 0x26
    25e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9a a3       	std	Y+34, r25	; 0x22
    25f2:	89 a3       	std	Y+33, r24	; 0x21
    25f4:	89 a1       	ldd	r24, Y+33	; 0x21
    25f6:	9a a1       	ldd	r25, Y+34	; 0x22
    25f8:	9e 8f       	std	Y+30, r25	; 0x1e
    25fa:	8d 8f       	std	Y+29, r24	; 0x1d
    25fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <LCD_init+0x222>
    2604:	9e 8f       	std	Y+30, r25	; 0x1e
    2606:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(40);

	LCD_writeCommand(0x00);
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	0e 94 00 14 	call	0x2800	; 0x2800 <LCD_writeCommand>
	LCD_writeCommand(0xc0);
    260e:	80 ec       	ldi	r24, 0xC0	; 192
    2610:	0e 94 00 14 	call	0x2800	; 0x2800 <LCD_writeCommand>
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	a0 e2       	ldi	r26, 0x20	; 32
    261a:	b2 e4       	ldi	r27, 0x42	; 66
    261c:	89 8f       	std	Y+25, r24	; 0x19
    261e:	9a 8f       	std	Y+26, r25	; 0x1a
    2620:	ab 8f       	std	Y+27, r26	; 0x1b
    2622:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2624:	69 8d       	ldd	r22, Y+25	; 0x19
    2626:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2628:	8b 8d       	ldd	r24, Y+27	; 0x1b
    262a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	4a e7       	ldi	r20, 0x7A	; 122
    2632:	55 e4       	ldi	r21, 0x45	; 69
    2634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	8d 8b       	std	Y+21, r24	; 0x15
    263e:	9e 8b       	std	Y+22, r25	; 0x16
    2640:	af 8b       	std	Y+23, r26	; 0x17
    2642:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2644:	6d 89       	ldd	r22, Y+21	; 0x15
    2646:	7e 89       	ldd	r23, Y+22	; 0x16
    2648:	8f 89       	ldd	r24, Y+23	; 0x17
    264a:	98 8d       	ldd	r25, Y+24	; 0x18
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	40 e8       	ldi	r20, 0x80	; 128
    2652:	5f e3       	ldi	r21, 0x3F	; 63
    2654:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2658:	88 23       	and	r24, r24
    265a:	2c f4       	brge	.+10     	; 0x2666 <LCD_init+0x288>
		__ticks = 1;
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	9c 8b       	std	Y+20, r25	; 0x14
    2662:	8b 8b       	std	Y+19, r24	; 0x13
    2664:	3f c0       	rjmp	.+126    	; 0x26e4 <LCD_init+0x306>
	else if (__tmp > 65535)
    2666:	6d 89       	ldd	r22, Y+21	; 0x15
    2668:	7e 89       	ldd	r23, Y+22	; 0x16
    266a:	8f 89       	ldd	r24, Y+23	; 0x17
    266c:	98 8d       	ldd	r25, Y+24	; 0x18
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	3f ef       	ldi	r19, 0xFF	; 255
    2672:	4f e7       	ldi	r20, 0x7F	; 127
    2674:	57 e4       	ldi	r21, 0x47	; 71
    2676:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    267a:	18 16       	cp	r1, r24
    267c:	4c f5       	brge	.+82     	; 0x26d0 <LCD_init+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267e:	69 8d       	ldd	r22, Y+25	; 0x19
    2680:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2682:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2684:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e2       	ldi	r20, 0x20	; 32
    268c:	51 e4       	ldi	r21, 0x41	; 65
    268e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	bc 01       	movw	r22, r24
    2698:	cd 01       	movw	r24, r26
    269a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	9c 8b       	std	Y+20, r25	; 0x14
    26a4:	8b 8b       	std	Y+19, r24	; 0x13
    26a6:	0f c0       	rjmp	.+30     	; 0x26c6 <LCD_init+0x2e8>
    26a8:	80 e9       	ldi	r24, 0x90	; 144
    26aa:	91 e0       	ldi	r25, 0x01	; 1
    26ac:	9a 8b       	std	Y+18, r25	; 0x12
    26ae:	89 8b       	std	Y+17, r24	; 0x11
    26b0:	89 89       	ldd	r24, Y+17	; 0x11
    26b2:	9a 89       	ldd	r25, Y+18	; 0x12
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <LCD_init+0x2d6>
    26b8:	9a 8b       	std	Y+18, r25	; 0x12
    26ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26bc:	8b 89       	ldd	r24, Y+19	; 0x13
    26be:	9c 89       	ldd	r25, Y+20	; 0x14
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	9c 8b       	std	Y+20, r25	; 0x14
    26c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c6:	8b 89       	ldd	r24, Y+19	; 0x13
    26c8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ca:	00 97       	sbiw	r24, 0x00	; 0
    26cc:	69 f7       	brne	.-38     	; 0x26a8 <LCD_init+0x2ca>
    26ce:	14 c0       	rjmp	.+40     	; 0x26f8 <LCD_init+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d0:	6d 89       	ldd	r22, Y+21	; 0x15
    26d2:	7e 89       	ldd	r23, Y+22	; 0x16
    26d4:	8f 89       	ldd	r24, Y+23	; 0x17
    26d6:	98 8d       	ldd	r25, Y+24	; 0x18
    26d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	9c 8b       	std	Y+20, r25	; 0x14
    26e2:	8b 8b       	std	Y+19, r24	; 0x13
    26e4:	8b 89       	ldd	r24, Y+19	; 0x13
    26e6:	9c 89       	ldd	r25, Y+20	; 0x14
    26e8:	98 8b       	std	Y+16, r25	; 0x10
    26ea:	8f 87       	std	Y+15, r24	; 0x0f
    26ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ee:	98 89       	ldd	r25, Y+16	; 0x10
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <LCD_init+0x312>
    26f4:	98 8b       	std	Y+16, r25	; 0x10
    26f6:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(40);

	LCD_writeCommand(0x00);
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	0e 94 00 14 	call	0x2800	; 0x2800 <LCD_writeCommand>
	LCD_writeCommand(0x10);
    26fe:	80 e1       	ldi	r24, 0x10	; 16
    2700:	0e 94 00 14 	call	0x2800	; 0x2800 <LCD_writeCommand>
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	a0 e0       	ldi	r26, 0x00	; 0
    270a:	b0 e4       	ldi	r27, 0x40	; 64
    270c:	8b 87       	std	Y+11, r24	; 0x0b
    270e:	9c 87       	std	Y+12, r25	; 0x0c
    2710:	ad 87       	std	Y+13, r26	; 0x0d
    2712:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2714:	6b 85       	ldd	r22, Y+11	; 0x0b
    2716:	7c 85       	ldd	r23, Y+12	; 0x0c
    2718:	8d 85       	ldd	r24, Y+13	; 0x0d
    271a:	9e 85       	ldd	r25, Y+14	; 0x0e
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	4a e7       	ldi	r20, 0x7A	; 122
    2722:	55 e4       	ldi	r21, 0x45	; 69
    2724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	8f 83       	std	Y+7, r24	; 0x07
    272e:	98 87       	std	Y+8, r25	; 0x08
    2730:	a9 87       	std	Y+9, r26	; 0x09
    2732:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2734:	6f 81       	ldd	r22, Y+7	; 0x07
    2736:	78 85       	ldd	r23, Y+8	; 0x08
    2738:	89 85       	ldd	r24, Y+9	; 0x09
    273a:	9a 85       	ldd	r25, Y+10	; 0x0a
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	40 e8       	ldi	r20, 0x80	; 128
    2742:	5f e3       	ldi	r21, 0x3F	; 63
    2744:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2748:	88 23       	and	r24, r24
    274a:	2c f4       	brge	.+10     	; 0x2756 <LCD_init+0x378>
		__ticks = 1;
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	9e 83       	std	Y+6, r25	; 0x06
    2752:	8d 83       	std	Y+5, r24	; 0x05
    2754:	3f c0       	rjmp	.+126    	; 0x27d4 <LCD_init+0x3f6>
	else if (__tmp > 65535)
    2756:	6f 81       	ldd	r22, Y+7	; 0x07
    2758:	78 85       	ldd	r23, Y+8	; 0x08
    275a:	89 85       	ldd	r24, Y+9	; 0x09
    275c:	9a 85       	ldd	r25, Y+10	; 0x0a
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	3f ef       	ldi	r19, 0xFF	; 255
    2762:	4f e7       	ldi	r20, 0x7F	; 127
    2764:	57 e4       	ldi	r21, 0x47	; 71
    2766:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    276a:	18 16       	cp	r1, r24
    276c:	4c f5       	brge	.+82     	; 0x27c0 <LCD_init+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2770:	7c 85       	ldd	r23, Y+12	; 0x0c
    2772:	8d 85       	ldd	r24, Y+13	; 0x0d
    2774:	9e 85       	ldd	r25, Y+14	; 0x0e
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e2       	ldi	r20, 0x20	; 32
    277c:	51 e4       	ldi	r21, 0x41	; 65
    277e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	bc 01       	movw	r22, r24
    2788:	cd 01       	movw	r24, r26
    278a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	9e 83       	std	Y+6, r25	; 0x06
    2794:	8d 83       	std	Y+5, r24	; 0x05
    2796:	0f c0       	rjmp	.+30     	; 0x27b6 <LCD_init+0x3d8>
    2798:	80 e9       	ldi	r24, 0x90	; 144
    279a:	91 e0       	ldi	r25, 0x01	; 1
    279c:	9c 83       	std	Y+4, r25	; 0x04
    279e:	8b 83       	std	Y+3, r24	; 0x03
    27a0:	8b 81       	ldd	r24, Y+3	; 0x03
    27a2:	9c 81       	ldd	r25, Y+4	; 0x04
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	f1 f7       	brne	.-4      	; 0x27a4 <LCD_init+0x3c6>
    27a8:	9c 83       	std	Y+4, r25	; 0x04
    27aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ac:	8d 81       	ldd	r24, Y+5	; 0x05
    27ae:	9e 81       	ldd	r25, Y+6	; 0x06
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	9e 83       	std	Y+6, r25	; 0x06
    27b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b6:	8d 81       	ldd	r24, Y+5	; 0x05
    27b8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ba:	00 97       	sbiw	r24, 0x00	; 0
    27bc:	69 f7       	brne	.-38     	; 0x2798 <LCD_init+0x3ba>
    27be:	14 c0       	rjmp	.+40     	; 0x27e8 <LCD_init+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c0:	6f 81       	ldd	r22, Y+7	; 0x07
    27c2:	78 85       	ldd	r23, Y+8	; 0x08
    27c4:	89 85       	ldd	r24, Y+9	; 0x09
    27c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	9e 83       	std	Y+6, r25	; 0x06
    27d2:	8d 83       	std	Y+5, r24	; 0x05
    27d4:	8d 81       	ldd	r24, Y+5	; 0x05
    27d6:	9e 81       	ldd	r25, Y+6	; 0x06
    27d8:	9a 83       	std	Y+2, r25	; 0x02
    27da:	89 83       	std	Y+1, r24	; 0x01
    27dc:	89 81       	ldd	r24, Y+1	; 0x01
    27de:	9a 81       	ldd	r25, Y+2	; 0x02
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	f1 f7       	brne	.-4      	; 0x27e0 <LCD_init+0x402>
    27e4:	9a 83       	std	Y+2, r25	; 0x02
    27e6:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	InitFinished = 1;
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	80 93 8c 00 	sts	0x008C, r24
}
    27ee:	e8 96       	adiw	r28, 0x38	; 56
    27f0:	0f b6       	in	r0, 0x3f	; 63
    27f2:	f8 94       	cli
    27f4:	de bf       	out	0x3e, r29	; 62
    27f6:	0f be       	out	0x3f, r0	; 63
    27f8:	cd bf       	out	0x3d, r28	; 61
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <LCD_writeCommand>:

void LCD_writeCommand(uint8 command)
{
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	ab 97       	sbiw	r28, 0x2b	; 43
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	f8 94       	cli
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	cd bf       	out	0x3d, r28	; 61
    2814:	8b a7       	std	Y+43, r24	; 0x2b
	GPIO_SetupPin_Value(PORTA_ID,LCD_RS_PIN,LOGIC_LOW);/*RS*/
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	63 e0       	ldi	r22, 0x03	; 3
    281a:	40 e0       	ldi	r20, 0x00	; 0
    281c:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>

	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN1,GET_BIT(command,4));
    2820:	8b a5       	ldd	r24, Y+43	; 0x2b
    2822:	82 95       	swap	r24
    2824:	8f 70       	andi	r24, 0x0F	; 15
    2826:	98 2f       	mov	r25, r24
    2828:	91 70       	andi	r25, 0x01	; 1
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	60 e0       	ldi	r22, 0x00	; 0
    282e:	49 2f       	mov	r20, r25
    2830:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN2,GET_BIT(command,5));
    2834:	8b a5       	ldd	r24, Y+43	; 0x2b
    2836:	82 95       	swap	r24
    2838:	86 95       	lsr	r24
    283a:	87 70       	andi	r24, 0x07	; 7
    283c:	98 2f       	mov	r25, r24
    283e:	91 70       	andi	r25, 0x01	; 1
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	61 e0       	ldi	r22, 0x01	; 1
    2844:	49 2f       	mov	r20, r25
    2846:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN3,GET_BIT(command,6));
    284a:	8b a5       	ldd	r24, Y+43	; 0x2b
    284c:	82 95       	swap	r24
    284e:	86 95       	lsr	r24
    2850:	86 95       	lsr	r24
    2852:	83 70       	andi	r24, 0x03	; 3
    2854:	98 2f       	mov	r25, r24
    2856:	91 70       	andi	r25, 0x01	; 1
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	62 e0       	ldi	r22, 0x02	; 2
    285c:	49 2f       	mov	r20, r25
    285e:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN4,GET_BIT(command,7));
    2862:	8b a5       	ldd	r24, Y+43	; 0x2b
    2864:	98 2f       	mov	r25, r24
    2866:	99 1f       	adc	r25, r25
    2868:	99 27       	eor	r25, r25
    286a:	99 1f       	adc	r25, r25
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	64 e0       	ldi	r22, 0x04	; 4
    2870:	49 2f       	mov	r20, r25
    2872:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>

	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_HIGH);/*EN*/
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	62 e0       	ldi	r22, 0x02	; 2
    287a:	41 e0       	ldi	r20, 0x01	; 1
    287c:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	a0 e8       	ldi	r26, 0x80	; 128
    2886:	b0 e4       	ldi	r27, 0x40	; 64
    2888:	8f a3       	std	Y+39, r24	; 0x27
    288a:	98 a7       	std	Y+40, r25	; 0x28
    288c:	a9 a7       	std	Y+41, r26	; 0x29
    288e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2890:	6f a1       	ldd	r22, Y+39	; 0x27
    2892:	78 a5       	ldd	r23, Y+40	; 0x28
    2894:	89 a5       	ldd	r24, Y+41	; 0x29
    2896:	9a a5       	ldd	r25, Y+42	; 0x2a
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	4a e7       	ldi	r20, 0x7A	; 122
    289e:	55 e4       	ldi	r21, 0x45	; 69
    28a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	8b a3       	std	Y+35, r24	; 0x23
    28aa:	9c a3       	std	Y+36, r25	; 0x24
    28ac:	ad a3       	std	Y+37, r26	; 0x25
    28ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28b0:	6b a1       	ldd	r22, Y+35	; 0x23
    28b2:	7c a1       	ldd	r23, Y+36	; 0x24
    28b4:	8d a1       	ldd	r24, Y+37	; 0x25
    28b6:	9e a1       	ldd	r25, Y+38	; 0x26
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	40 e8       	ldi	r20, 0x80	; 128
    28be:	5f e3       	ldi	r21, 0x3F	; 63
    28c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28c4:	88 23       	and	r24, r24
    28c6:	2c f4       	brge	.+10     	; 0x28d2 <LCD_writeCommand+0xd2>
		__ticks = 1;
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	9a a3       	std	Y+34, r25	; 0x22
    28ce:	89 a3       	std	Y+33, r24	; 0x21
    28d0:	3f c0       	rjmp	.+126    	; 0x2950 <LCD_writeCommand+0x150>
	else if (__tmp > 65535)
    28d2:	6b a1       	ldd	r22, Y+35	; 0x23
    28d4:	7c a1       	ldd	r23, Y+36	; 0x24
    28d6:	8d a1       	ldd	r24, Y+37	; 0x25
    28d8:	9e a1       	ldd	r25, Y+38	; 0x26
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	3f ef       	ldi	r19, 0xFF	; 255
    28de:	4f e7       	ldi	r20, 0x7F	; 127
    28e0:	57 e4       	ldi	r21, 0x47	; 71
    28e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28e6:	18 16       	cp	r1, r24
    28e8:	4c f5       	brge	.+82     	; 0x293c <LCD_writeCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ea:	6f a1       	ldd	r22, Y+39	; 0x27
    28ec:	78 a5       	ldd	r23, Y+40	; 0x28
    28ee:	89 a5       	ldd	r24, Y+41	; 0x29
    28f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	40 e2       	ldi	r20, 0x20	; 32
    28f8:	51 e4       	ldi	r21, 0x41	; 65
    28fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	bc 01       	movw	r22, r24
    2904:	cd 01       	movw	r24, r26
    2906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	9a a3       	std	Y+34, r25	; 0x22
    2910:	89 a3       	std	Y+33, r24	; 0x21
    2912:	0f c0       	rjmp	.+30     	; 0x2932 <LCD_writeCommand+0x132>
    2914:	80 e9       	ldi	r24, 0x90	; 144
    2916:	91 e0       	ldi	r25, 0x01	; 1
    2918:	98 a3       	std	Y+32, r25	; 0x20
    291a:	8f 8f       	std	Y+31, r24	; 0x1f
    291c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    291e:	98 a1       	ldd	r25, Y+32	; 0x20
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	f1 f7       	brne	.-4      	; 0x2920 <LCD_writeCommand+0x120>
    2924:	98 a3       	std	Y+32, r25	; 0x20
    2926:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2928:	89 a1       	ldd	r24, Y+33	; 0x21
    292a:	9a a1       	ldd	r25, Y+34	; 0x22
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	9a a3       	std	Y+34, r25	; 0x22
    2930:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2932:	89 a1       	ldd	r24, Y+33	; 0x21
    2934:	9a a1       	ldd	r25, Y+34	; 0x22
    2936:	00 97       	sbiw	r24, 0x00	; 0
    2938:	69 f7       	brne	.-38     	; 0x2914 <LCD_writeCommand+0x114>
    293a:	14 c0       	rjmp	.+40     	; 0x2964 <LCD_writeCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293c:	6b a1       	ldd	r22, Y+35	; 0x23
    293e:	7c a1       	ldd	r23, Y+36	; 0x24
    2940:	8d a1       	ldd	r24, Y+37	; 0x25
    2942:	9e a1       	ldd	r25, Y+38	; 0x26
    2944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	9a a3       	std	Y+34, r25	; 0x22
    294e:	89 a3       	std	Y+33, r24	; 0x21
    2950:	89 a1       	ldd	r24, Y+33	; 0x21
    2952:	9a a1       	ldd	r25, Y+34	; 0x22
    2954:	9e 8f       	std	Y+30, r25	; 0x1e
    2956:	8d 8f       	std	Y+29, r24	; 0x1d
    2958:	8d 8d       	ldd	r24, Y+29	; 0x1d
    295a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <LCD_writeCommand+0x15c>
    2960:	9e 8f       	std	Y+30, r25	; 0x1e
    2962:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(4);
	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_LOW);/*EN*/
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	62 e0       	ldi	r22, 0x02	; 2
    2968:	40 e0       	ldi	r20, 0x00	; 0
    296a:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>

	// _delay_ms(4);

	if(InitFinished)
    296e:	80 91 8c 00 	lds	r24, 0x008C
    2972:	88 23       	and	r24, r24
    2974:	09 f4       	brne	.+2      	; 0x2978 <LCD_writeCommand+0x178>
    2976:	a2 c0       	rjmp	.+324    	; 0x2abc <LCD_writeCommand+0x2bc>
	{
		GPIO_SetupPin_Value(PORTB_ID,LCD_PIN1,GET_BIT(command,0));
    2978:	8b a5       	ldd	r24, Y+43	; 0x2b
    297a:	98 2f       	mov	r25, r24
    297c:	91 70       	andi	r25, 0x01	; 1
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	60 e0       	ldi	r22, 0x00	; 0
    2982:	49 2f       	mov	r20, r25
    2984:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
		GPIO_SetupPin_Value(PORTB_ID,LCD_PIN2,GET_BIT(command,1));
    2988:	8b a5       	ldd	r24, Y+43	; 0x2b
    298a:	86 95       	lsr	r24
    298c:	98 2f       	mov	r25, r24
    298e:	91 70       	andi	r25, 0x01	; 1
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	61 e0       	ldi	r22, 0x01	; 1
    2994:	49 2f       	mov	r20, r25
    2996:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
		GPIO_SetupPin_Value(PORTB_ID,LCD_PIN3,GET_BIT(command,2));
    299a:	8b a5       	ldd	r24, Y+43	; 0x2b
    299c:	86 95       	lsr	r24
    299e:	86 95       	lsr	r24
    29a0:	98 2f       	mov	r25, r24
    29a2:	91 70       	andi	r25, 0x01	; 1
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	62 e0       	ldi	r22, 0x02	; 2
    29a8:	49 2f       	mov	r20, r25
    29aa:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
		GPIO_SetupPin_Value(PORTB_ID,LCD_PIN4,GET_BIT(command,3));
    29ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    29b0:	86 95       	lsr	r24
    29b2:	86 95       	lsr	r24
    29b4:	86 95       	lsr	r24
    29b6:	98 2f       	mov	r25, r24
    29b8:	91 70       	andi	r25, 0x01	; 1
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	64 e0       	ldi	r22, 0x04	; 4
    29be:	49 2f       	mov	r20, r25
    29c0:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>

		GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_HIGH);/*EN*/
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	62 e0       	ldi	r22, 0x02	; 2
    29c8:	41 e0       	ldi	r20, 0x01	; 1
    29ca:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	a0 e8       	ldi	r26, 0x80	; 128
    29d4:	b0 e4       	ldi	r27, 0x40	; 64
    29d6:	89 8f       	std	Y+25, r24	; 0x19
    29d8:	9a 8f       	std	Y+26, r25	; 0x1a
    29da:	ab 8f       	std	Y+27, r26	; 0x1b
    29dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29de:	69 8d       	ldd	r22, Y+25	; 0x19
    29e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	4a e7       	ldi	r20, 0x7A	; 122
    29ec:	55 e4       	ldi	r21, 0x45	; 69
    29ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	8d 8b       	std	Y+21, r24	; 0x15
    29f8:	9e 8b       	std	Y+22, r25	; 0x16
    29fa:	af 8b       	std	Y+23, r26	; 0x17
    29fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2a00:	7e 89       	ldd	r23, Y+22	; 0x16
    2a02:	8f 89       	ldd	r24, Y+23	; 0x17
    2a04:	98 8d       	ldd	r25, Y+24	; 0x18
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e8       	ldi	r20, 0x80	; 128
    2a0c:	5f e3       	ldi	r21, 0x3F	; 63
    2a0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a12:	88 23       	and	r24, r24
    2a14:	2c f4       	brge	.+10     	; 0x2a20 <LCD_writeCommand+0x220>
		__ticks = 1;
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	9c 8b       	std	Y+20, r25	; 0x14
    2a1c:	8b 8b       	std	Y+19, r24	; 0x13
    2a1e:	3f c0       	rjmp	.+126    	; 0x2a9e <LCD_writeCommand+0x29e>
	else if (__tmp > 65535)
    2a20:	6d 89       	ldd	r22, Y+21	; 0x15
    2a22:	7e 89       	ldd	r23, Y+22	; 0x16
    2a24:	8f 89       	ldd	r24, Y+23	; 0x17
    2a26:	98 8d       	ldd	r25, Y+24	; 0x18
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	3f ef       	ldi	r19, 0xFF	; 255
    2a2c:	4f e7       	ldi	r20, 0x7F	; 127
    2a2e:	57 e4       	ldi	r21, 0x47	; 71
    2a30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a34:	18 16       	cp	r1, r24
    2a36:	4c f5       	brge	.+82     	; 0x2a8a <LCD_writeCommand+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a38:	69 8d       	ldd	r22, Y+25	; 0x19
    2a3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	40 e2       	ldi	r20, 0x20	; 32
    2a46:	51 e4       	ldi	r21, 0x41	; 65
    2a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	bc 01       	movw	r22, r24
    2a52:	cd 01       	movw	r24, r26
    2a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	9c 8b       	std	Y+20, r25	; 0x14
    2a5e:	8b 8b       	std	Y+19, r24	; 0x13
    2a60:	0f c0       	rjmp	.+30     	; 0x2a80 <LCD_writeCommand+0x280>
    2a62:	80 e9       	ldi	r24, 0x90	; 144
    2a64:	91 e0       	ldi	r25, 0x01	; 1
    2a66:	9a 8b       	std	Y+18, r25	; 0x12
    2a68:	89 8b       	std	Y+17, r24	; 0x11
    2a6a:	89 89       	ldd	r24, Y+17	; 0x11
    2a6c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	f1 f7       	brne	.-4      	; 0x2a6e <LCD_writeCommand+0x26e>
    2a72:	9a 8b       	std	Y+18, r25	; 0x12
    2a74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a76:	8b 89       	ldd	r24, Y+19	; 0x13
    2a78:	9c 89       	ldd	r25, Y+20	; 0x14
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	9c 8b       	std	Y+20, r25	; 0x14
    2a7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a80:	8b 89       	ldd	r24, Y+19	; 0x13
    2a82:	9c 89       	ldd	r25, Y+20	; 0x14
    2a84:	00 97       	sbiw	r24, 0x00	; 0
    2a86:	69 f7       	brne	.-38     	; 0x2a62 <LCD_writeCommand+0x262>
    2a88:	14 c0       	rjmp	.+40     	; 0x2ab2 <LCD_writeCommand+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a90:	98 8d       	ldd	r25, Y+24	; 0x18
    2a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	9c 8b       	std	Y+20, r25	; 0x14
    2a9c:	8b 8b       	std	Y+19, r24	; 0x13
    2a9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa0:	9c 89       	ldd	r25, Y+20	; 0x14
    2aa2:	98 8b       	std	Y+16, r25	; 0x10
    2aa4:	8f 87       	std	Y+15, r24	; 0x0f
    2aa6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aa8:	98 89       	ldd	r25, Y+16	; 0x10
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	f1 f7       	brne	.-4      	; 0x2aaa <LCD_writeCommand+0x2aa>
    2aae:	98 8b       	std	Y+16, r25	; 0x10
    2ab0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(4);
		GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_LOW);/*EN*/
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	62 e0       	ldi	r22, 0x02	; 2
    2ab6:	40 e0       	ldi	r20, 0x00	; 0
    2ab8:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	a0 e8       	ldi	r26, 0x80	; 128
    2ac2:	b0 e4       	ldi	r27, 0x40	; 64
    2ac4:	8b 87       	std	Y+11, r24	; 0x0b
    2ac6:	9c 87       	std	Y+12, r25	; 0x0c
    2ac8:	ad 87       	std	Y+13, r26	; 0x0d
    2aca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2acc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ace:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	4a e7       	ldi	r20, 0x7A	; 122
    2ada:	55 e4       	ldi	r21, 0x45	; 69
    2adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	8f 83       	std	Y+7, r24	; 0x07
    2ae6:	98 87       	std	Y+8, r25	; 0x08
    2ae8:	a9 87       	std	Y+9, r26	; 0x09
    2aea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aec:	6f 81       	ldd	r22, Y+7	; 0x07
    2aee:	78 85       	ldd	r23, Y+8	; 0x08
    2af0:	89 85       	ldd	r24, Y+9	; 0x09
    2af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	40 e8       	ldi	r20, 0x80	; 128
    2afa:	5f e3       	ldi	r21, 0x3F	; 63
    2afc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b00:	88 23       	and	r24, r24
    2b02:	2c f4       	brge	.+10     	; 0x2b0e <LCD_writeCommand+0x30e>
		__ticks = 1;
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	9e 83       	std	Y+6, r25	; 0x06
    2b0a:	8d 83       	std	Y+5, r24	; 0x05
    2b0c:	3f c0       	rjmp	.+126    	; 0x2b8c <LCD_writeCommand+0x38c>
	else if (__tmp > 65535)
    2b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b10:	78 85       	ldd	r23, Y+8	; 0x08
    2b12:	89 85       	ldd	r24, Y+9	; 0x09
    2b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	3f ef       	ldi	r19, 0xFF	; 255
    2b1a:	4f e7       	ldi	r20, 0x7F	; 127
    2b1c:	57 e4       	ldi	r21, 0x47	; 71
    2b1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b22:	18 16       	cp	r1, r24
    2b24:	4c f5       	brge	.+82     	; 0x2b78 <LCD_writeCommand+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b26:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b28:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	40 e2       	ldi	r20, 0x20	; 32
    2b34:	51 e4       	ldi	r21, 0x41	; 65
    2b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	bc 01       	movw	r22, r24
    2b40:	cd 01       	movw	r24, r26
    2b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	9e 83       	std	Y+6, r25	; 0x06
    2b4c:	8d 83       	std	Y+5, r24	; 0x05
    2b4e:	0f c0       	rjmp	.+30     	; 0x2b6e <LCD_writeCommand+0x36e>
    2b50:	80 e9       	ldi	r24, 0x90	; 144
    2b52:	91 e0       	ldi	r25, 0x01	; 1
    2b54:	9c 83       	std	Y+4, r25	; 0x04
    2b56:	8b 83       	std	Y+3, r24	; 0x03
    2b58:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	f1 f7       	brne	.-4      	; 0x2b5c <LCD_writeCommand+0x35c>
    2b60:	9c 83       	std	Y+4, r25	; 0x04
    2b62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b64:	8d 81       	ldd	r24, Y+5	; 0x05
    2b66:	9e 81       	ldd	r25, Y+6	; 0x06
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	9e 83       	std	Y+6, r25	; 0x06
    2b6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b70:	9e 81       	ldd	r25, Y+6	; 0x06
    2b72:	00 97       	sbiw	r24, 0x00	; 0
    2b74:	69 f7       	brne	.-38     	; 0x2b50 <LCD_writeCommand+0x350>
    2b76:	14 c0       	rjmp	.+40     	; 0x2ba0 <LCD_writeCommand+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b78:	6f 81       	ldd	r22, Y+7	; 0x07
    2b7a:	78 85       	ldd	r23, Y+8	; 0x08
    2b7c:	89 85       	ldd	r24, Y+9	; 0x09
    2b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	9e 83       	std	Y+6, r25	; 0x06
    2b8a:	8d 83       	std	Y+5, r24	; 0x05
    2b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b90:	9a 83       	std	Y+2, r25	; 0x02
    2b92:	89 83       	std	Y+1, r24	; 0x01
    2b94:	89 81       	ldd	r24, Y+1	; 0x01
    2b96:	9a 81       	ldd	r25, Y+2	; 0x02
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	f1 f7       	brne	.-4      	; 0x2b98 <LCD_writeCommand+0x398>
    2b9c:	9a 83       	std	Y+2, r25	; 0x02
    2b9e:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(4);
}
    2ba0:	ab 96       	adiw	r28, 0x2b	; 43
    2ba2:	0f b6       	in	r0, 0x3f	; 63
    2ba4:	f8 94       	cli
    2ba6:	de bf       	out	0x3e, r29	; 62
    2ba8:	0f be       	out	0x3f, r0	; 63
    2baa:	cd bf       	out	0x3d, r28	; 61
    2bac:	cf 91       	pop	r28
    2bae:	df 91       	pop	r29
    2bb0:	08 95       	ret

00002bb2 <LCD_writeData>:
void LCD_writeData(uint8 command)
{
    2bb2:	df 93       	push	r29
    2bb4:	cf 93       	push	r28
    2bb6:	cd b7       	in	r28, 0x3d	; 61
    2bb8:	de b7       	in	r29, 0x3e	; 62
    2bba:	e9 97       	sbiw	r28, 0x39	; 57
    2bbc:	0f b6       	in	r0, 0x3f	; 63
    2bbe:	f8 94       	cli
    2bc0:	de bf       	out	0x3e, r29	; 62
    2bc2:	0f be       	out	0x3f, r0	; 63
    2bc4:	cd bf       	out	0x3d, r28	; 61
    2bc6:	89 af       	std	Y+57, r24	; 0x39

	GPIO_SetupPin_Value(PORTA_ID,LCD_RS_PIN,LOGIC_HIGH);
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	63 e0       	ldi	r22, 0x03	; 3
    2bcc:	41 e0       	ldi	r20, 0x01	; 1
    2bce:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>

	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN1,GET_BIT(command,4));
    2bd2:	89 ad       	ldd	r24, Y+57	; 0x39
    2bd4:	82 95       	swap	r24
    2bd6:	8f 70       	andi	r24, 0x0F	; 15
    2bd8:	98 2f       	mov	r25, r24
    2bda:	91 70       	andi	r25, 0x01	; 1
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	60 e0       	ldi	r22, 0x00	; 0
    2be0:	49 2f       	mov	r20, r25
    2be2:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN2,GET_BIT(command,5));
    2be6:	89 ad       	ldd	r24, Y+57	; 0x39
    2be8:	82 95       	swap	r24
    2bea:	86 95       	lsr	r24
    2bec:	87 70       	andi	r24, 0x07	; 7
    2bee:	98 2f       	mov	r25, r24
    2bf0:	91 70       	andi	r25, 0x01	; 1
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	61 e0       	ldi	r22, 0x01	; 1
    2bf6:	49 2f       	mov	r20, r25
    2bf8:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN3,GET_BIT(command,6));
    2bfc:	89 ad       	ldd	r24, Y+57	; 0x39
    2bfe:	82 95       	swap	r24
    2c00:	86 95       	lsr	r24
    2c02:	86 95       	lsr	r24
    2c04:	83 70       	andi	r24, 0x03	; 3
    2c06:	98 2f       	mov	r25, r24
    2c08:	91 70       	andi	r25, 0x01	; 1
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	62 e0       	ldi	r22, 0x02	; 2
    2c0e:	49 2f       	mov	r20, r25
    2c10:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN4,GET_BIT(command,7));
    2c14:	89 ad       	ldd	r24, Y+57	; 0x39
    2c16:	98 2f       	mov	r25, r24
    2c18:	99 1f       	adc	r25, r25
    2c1a:	99 27       	eor	r25, r25
    2c1c:	99 1f       	adc	r25, r25
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	64 e0       	ldi	r22, 0x04	; 4
    2c22:	49 2f       	mov	r20, r25
    2c24:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>

	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_HIGH);/*EN*/
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	62 e0       	ldi	r22, 0x02	; 2
    2c2c:	41 e0       	ldi	r20, 0x01	; 1
    2c2e:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	a0 e0       	ldi	r26, 0x00	; 0
    2c38:	b0 e4       	ldi	r27, 0x40	; 64
    2c3a:	8d ab       	std	Y+53, r24	; 0x35
    2c3c:	9e ab       	std	Y+54, r25	; 0x36
    2c3e:	af ab       	std	Y+55, r26	; 0x37
    2c40:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c42:	6d a9       	ldd	r22, Y+53	; 0x35
    2c44:	7e a9       	ldd	r23, Y+54	; 0x36
    2c46:	8f a9       	ldd	r24, Y+55	; 0x37
    2c48:	98 ad       	ldd	r25, Y+56	; 0x38
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	4a e7       	ldi	r20, 0x7A	; 122
    2c50:	55 e4       	ldi	r21, 0x45	; 69
    2c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	89 ab       	std	Y+49, r24	; 0x31
    2c5c:	9a ab       	std	Y+50, r25	; 0x32
    2c5e:	ab ab       	std	Y+51, r26	; 0x33
    2c60:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c62:	69 a9       	ldd	r22, Y+49	; 0x31
    2c64:	7a a9       	ldd	r23, Y+50	; 0x32
    2c66:	8b a9       	ldd	r24, Y+51	; 0x33
    2c68:	9c a9       	ldd	r25, Y+52	; 0x34
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	40 e8       	ldi	r20, 0x80	; 128
    2c70:	5f e3       	ldi	r21, 0x3F	; 63
    2c72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c76:	88 23       	and	r24, r24
    2c78:	2c f4       	brge	.+10     	; 0x2c84 <LCD_writeData+0xd2>
		__ticks = 1;
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	98 ab       	std	Y+48, r25	; 0x30
    2c80:	8f a7       	std	Y+47, r24	; 0x2f
    2c82:	3f c0       	rjmp	.+126    	; 0x2d02 <LCD_writeData+0x150>
	else if (__tmp > 65535)
    2c84:	69 a9       	ldd	r22, Y+49	; 0x31
    2c86:	7a a9       	ldd	r23, Y+50	; 0x32
    2c88:	8b a9       	ldd	r24, Y+51	; 0x33
    2c8a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	3f ef       	ldi	r19, 0xFF	; 255
    2c90:	4f e7       	ldi	r20, 0x7F	; 127
    2c92:	57 e4       	ldi	r21, 0x47	; 71
    2c94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c98:	18 16       	cp	r1, r24
    2c9a:	4c f5       	brge	.+82     	; 0x2cee <LCD_writeData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c9c:	6d a9       	ldd	r22, Y+53	; 0x35
    2c9e:	7e a9       	ldd	r23, Y+54	; 0x36
    2ca0:	8f a9       	ldd	r24, Y+55	; 0x37
    2ca2:	98 ad       	ldd	r25, Y+56	; 0x38
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	40 e2       	ldi	r20, 0x20	; 32
    2caa:	51 e4       	ldi	r21, 0x41	; 65
    2cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	bc 01       	movw	r22, r24
    2cb6:	cd 01       	movw	r24, r26
    2cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	98 ab       	std	Y+48, r25	; 0x30
    2cc2:	8f a7       	std	Y+47, r24	; 0x2f
    2cc4:	0f c0       	rjmp	.+30     	; 0x2ce4 <LCD_writeData+0x132>
    2cc6:	80 e9       	ldi	r24, 0x90	; 144
    2cc8:	91 e0       	ldi	r25, 0x01	; 1
    2cca:	9e a7       	std	Y+46, r25	; 0x2e
    2ccc:	8d a7       	std	Y+45, r24	; 0x2d
    2cce:	8d a5       	ldd	r24, Y+45	; 0x2d
    2cd0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	f1 f7       	brne	.-4      	; 0x2cd2 <LCD_writeData+0x120>
    2cd6:	9e a7       	std	Y+46, r25	; 0x2e
    2cd8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cda:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cdc:	98 a9       	ldd	r25, Y+48	; 0x30
    2cde:	01 97       	sbiw	r24, 0x01	; 1
    2ce0:	98 ab       	std	Y+48, r25	; 0x30
    2ce2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ce6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ce8:	00 97       	sbiw	r24, 0x00	; 0
    2cea:	69 f7       	brne	.-38     	; 0x2cc6 <LCD_writeData+0x114>
    2cec:	14 c0       	rjmp	.+40     	; 0x2d16 <LCD_writeData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cee:	69 a9       	ldd	r22, Y+49	; 0x31
    2cf0:	7a a9       	ldd	r23, Y+50	; 0x32
    2cf2:	8b a9       	ldd	r24, Y+51	; 0x33
    2cf4:	9c a9       	ldd	r25, Y+52	; 0x34
    2cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	98 ab       	std	Y+48, r25	; 0x30
    2d00:	8f a7       	std	Y+47, r24	; 0x2f
    2d02:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d04:	98 a9       	ldd	r25, Y+48	; 0x30
    2d06:	9c a7       	std	Y+44, r25	; 0x2c
    2d08:	8b a7       	std	Y+43, r24	; 0x2b
    2d0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	f1 f7       	brne	.-4      	; 0x2d0e <LCD_writeData+0x15c>
    2d12:	9c a7       	std	Y+44, r25	; 0x2c
    2d14:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2);
	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_LOW);/*EN*/
    2d16:	80 e0       	ldi	r24, 0x00	; 0
    2d18:	62 e0       	ldi	r22, 0x02	; 2
    2d1a:	40 e0       	ldi	r20, 0x00	; 0
    2d1c:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
    2d20:	80 e0       	ldi	r24, 0x00	; 0
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	a0 e0       	ldi	r26, 0x00	; 0
    2d26:	b0 e4       	ldi	r27, 0x40	; 64
    2d28:	8f a3       	std	Y+39, r24	; 0x27
    2d2a:	98 a7       	std	Y+40, r25	; 0x28
    2d2c:	a9 a7       	std	Y+41, r26	; 0x29
    2d2e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d30:	6f a1       	ldd	r22, Y+39	; 0x27
    2d32:	78 a5       	ldd	r23, Y+40	; 0x28
    2d34:	89 a5       	ldd	r24, Y+41	; 0x29
    2d36:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	4a e7       	ldi	r20, 0x7A	; 122
    2d3e:	55 e4       	ldi	r21, 0x45	; 69
    2d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	8b a3       	std	Y+35, r24	; 0x23
    2d4a:	9c a3       	std	Y+36, r25	; 0x24
    2d4c:	ad a3       	std	Y+37, r26	; 0x25
    2d4e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d50:	6b a1       	ldd	r22, Y+35	; 0x23
    2d52:	7c a1       	ldd	r23, Y+36	; 0x24
    2d54:	8d a1       	ldd	r24, Y+37	; 0x25
    2d56:	9e a1       	ldd	r25, Y+38	; 0x26
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	40 e8       	ldi	r20, 0x80	; 128
    2d5e:	5f e3       	ldi	r21, 0x3F	; 63
    2d60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d64:	88 23       	and	r24, r24
    2d66:	2c f4       	brge	.+10     	; 0x2d72 <LCD_writeData+0x1c0>
		__ticks = 1;
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	9a a3       	std	Y+34, r25	; 0x22
    2d6e:	89 a3       	std	Y+33, r24	; 0x21
    2d70:	3f c0       	rjmp	.+126    	; 0x2df0 <LCD_writeData+0x23e>
	else if (__tmp > 65535)
    2d72:	6b a1       	ldd	r22, Y+35	; 0x23
    2d74:	7c a1       	ldd	r23, Y+36	; 0x24
    2d76:	8d a1       	ldd	r24, Y+37	; 0x25
    2d78:	9e a1       	ldd	r25, Y+38	; 0x26
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	3f ef       	ldi	r19, 0xFF	; 255
    2d7e:	4f e7       	ldi	r20, 0x7F	; 127
    2d80:	57 e4       	ldi	r21, 0x47	; 71
    2d82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d86:	18 16       	cp	r1, r24
    2d88:	4c f5       	brge	.+82     	; 0x2ddc <LCD_writeData+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d8a:	6f a1       	ldd	r22, Y+39	; 0x27
    2d8c:	78 a5       	ldd	r23, Y+40	; 0x28
    2d8e:	89 a5       	ldd	r24, Y+41	; 0x29
    2d90:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	40 e2       	ldi	r20, 0x20	; 32
    2d98:	51 e4       	ldi	r21, 0x41	; 65
    2d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	bc 01       	movw	r22, r24
    2da4:	cd 01       	movw	r24, r26
    2da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	9a a3       	std	Y+34, r25	; 0x22
    2db0:	89 a3       	std	Y+33, r24	; 0x21
    2db2:	0f c0       	rjmp	.+30     	; 0x2dd2 <LCD_writeData+0x220>
    2db4:	80 e9       	ldi	r24, 0x90	; 144
    2db6:	91 e0       	ldi	r25, 0x01	; 1
    2db8:	98 a3       	std	Y+32, r25	; 0x20
    2dba:	8f 8f       	std	Y+31, r24	; 0x1f
    2dbc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dbe:	98 a1       	ldd	r25, Y+32	; 0x20
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	f1 f7       	brne	.-4      	; 0x2dc0 <LCD_writeData+0x20e>
    2dc4:	98 a3       	std	Y+32, r25	; 0x20
    2dc6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc8:	89 a1       	ldd	r24, Y+33	; 0x21
    2dca:	9a a1       	ldd	r25, Y+34	; 0x22
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	9a a3       	std	Y+34, r25	; 0x22
    2dd0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd2:	89 a1       	ldd	r24, Y+33	; 0x21
    2dd4:	9a a1       	ldd	r25, Y+34	; 0x22
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	69 f7       	brne	.-38     	; 0x2db4 <LCD_writeData+0x202>
    2dda:	14 c0       	rjmp	.+40     	; 0x2e04 <LCD_writeData+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ddc:	6b a1       	ldd	r22, Y+35	; 0x23
    2dde:	7c a1       	ldd	r23, Y+36	; 0x24
    2de0:	8d a1       	ldd	r24, Y+37	; 0x25
    2de2:	9e a1       	ldd	r25, Y+38	; 0x26
    2de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	9a a3       	std	Y+34, r25	; 0x22
    2dee:	89 a3       	std	Y+33, r24	; 0x21
    2df0:	89 a1       	ldd	r24, Y+33	; 0x21
    2df2:	9a a1       	ldd	r25, Y+34	; 0x22
    2df4:	9e 8f       	std	Y+30, r25	; 0x1e
    2df6:	8d 8f       	std	Y+29, r24	; 0x1d
    2df8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dfa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dfc:	01 97       	sbiw	r24, 0x01	; 1
    2dfe:	f1 f7       	brne	.-4      	; 0x2dfc <LCD_writeData+0x24a>
    2e00:	9e 8f       	std	Y+30, r25	; 0x1e
    2e02:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(2);

	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN1,GET_BIT(command,0));
    2e04:	89 ad       	ldd	r24, Y+57	; 0x39
    2e06:	98 2f       	mov	r25, r24
    2e08:	91 70       	andi	r25, 0x01	; 1
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	60 e0       	ldi	r22, 0x00	; 0
    2e0e:	49 2f       	mov	r20, r25
    2e10:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN2,GET_BIT(command,1));
    2e14:	89 ad       	ldd	r24, Y+57	; 0x39
    2e16:	86 95       	lsr	r24
    2e18:	98 2f       	mov	r25, r24
    2e1a:	91 70       	andi	r25, 0x01	; 1
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	61 e0       	ldi	r22, 0x01	; 1
    2e20:	49 2f       	mov	r20, r25
    2e22:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN3,GET_BIT(command,2));
    2e26:	89 ad       	ldd	r24, Y+57	; 0x39
    2e28:	86 95       	lsr	r24
    2e2a:	86 95       	lsr	r24
    2e2c:	98 2f       	mov	r25, r24
    2e2e:	91 70       	andi	r25, 0x01	; 1
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	62 e0       	ldi	r22, 0x02	; 2
    2e34:	49 2f       	mov	r20, r25
    2e36:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(PORTB_ID,LCD_PIN4,GET_BIT(command,3));
    2e3a:	89 ad       	ldd	r24, Y+57	; 0x39
    2e3c:	86 95       	lsr	r24
    2e3e:	86 95       	lsr	r24
    2e40:	86 95       	lsr	r24
    2e42:	98 2f       	mov	r25, r24
    2e44:	91 70       	andi	r25, 0x01	; 1
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	64 e0       	ldi	r22, 0x04	; 4
    2e4a:	49 2f       	mov	r20, r25
    2e4c:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>


	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_HIGH);/*EN*/
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	62 e0       	ldi	r22, 0x02	; 2
    2e54:	41 e0       	ldi	r20, 0x01	; 1
    2e56:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	a0 e0       	ldi	r26, 0x00	; 0
    2e60:	b0 e4       	ldi	r27, 0x40	; 64
    2e62:	89 8f       	std	Y+25, r24	; 0x19
    2e64:	9a 8f       	std	Y+26, r25	; 0x1a
    2e66:	ab 8f       	std	Y+27, r26	; 0x1b
    2e68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e6a:	69 8d       	ldd	r22, Y+25	; 0x19
    2e6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	4a e7       	ldi	r20, 0x7A	; 122
    2e78:	55 e4       	ldi	r21, 0x45	; 69
    2e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	8d 8b       	std	Y+21, r24	; 0x15
    2e84:	9e 8b       	std	Y+22, r25	; 0x16
    2e86:	af 8b       	std	Y+23, r26	; 0x17
    2e88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e90:	98 8d       	ldd	r25, Y+24	; 0x18
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	40 e8       	ldi	r20, 0x80	; 128
    2e98:	5f e3       	ldi	r21, 0x3F	; 63
    2e9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e9e:	88 23       	and	r24, r24
    2ea0:	2c f4       	brge	.+10     	; 0x2eac <LCD_writeData+0x2fa>
		__ticks = 1;
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	9c 8b       	std	Y+20, r25	; 0x14
    2ea8:	8b 8b       	std	Y+19, r24	; 0x13
    2eaa:	3f c0       	rjmp	.+126    	; 0x2f2a <LCD_writeData+0x378>
	else if (__tmp > 65535)
    2eac:	6d 89       	ldd	r22, Y+21	; 0x15
    2eae:	7e 89       	ldd	r23, Y+22	; 0x16
    2eb0:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb2:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	3f ef       	ldi	r19, 0xFF	; 255
    2eb8:	4f e7       	ldi	r20, 0x7F	; 127
    2eba:	57 e4       	ldi	r21, 0x47	; 71
    2ebc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ec0:	18 16       	cp	r1, r24
    2ec2:	4c f5       	brge	.+82     	; 0x2f16 <LCD_writeData+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ec6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ec8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e2       	ldi	r20, 0x20	; 32
    2ed2:	51 e4       	ldi	r21, 0x41	; 65
    2ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	bc 01       	movw	r22, r24
    2ede:	cd 01       	movw	r24, r26
    2ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	9c 8b       	std	Y+20, r25	; 0x14
    2eea:	8b 8b       	std	Y+19, r24	; 0x13
    2eec:	0f c0       	rjmp	.+30     	; 0x2f0c <LCD_writeData+0x35a>
    2eee:	80 e9       	ldi	r24, 0x90	; 144
    2ef0:	91 e0       	ldi	r25, 0x01	; 1
    2ef2:	9a 8b       	std	Y+18, r25	; 0x12
    2ef4:	89 8b       	std	Y+17, r24	; 0x11
    2ef6:	89 89       	ldd	r24, Y+17	; 0x11
    2ef8:	9a 89       	ldd	r25, Y+18	; 0x12
    2efa:	01 97       	sbiw	r24, 0x01	; 1
    2efc:	f1 f7       	brne	.-4      	; 0x2efa <LCD_writeData+0x348>
    2efe:	9a 8b       	std	Y+18, r25	; 0x12
    2f00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f02:	8b 89       	ldd	r24, Y+19	; 0x13
    2f04:	9c 89       	ldd	r25, Y+20	; 0x14
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	9c 8b       	std	Y+20, r25	; 0x14
    2f0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f10:	00 97       	sbiw	r24, 0x00	; 0
    2f12:	69 f7       	brne	.-38     	; 0x2eee <LCD_writeData+0x33c>
    2f14:	14 c0       	rjmp	.+40     	; 0x2f3e <LCD_writeData+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f16:	6d 89       	ldd	r22, Y+21	; 0x15
    2f18:	7e 89       	ldd	r23, Y+22	; 0x16
    2f1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	9c 8b       	std	Y+20, r25	; 0x14
    2f28:	8b 8b       	std	Y+19, r24	; 0x13
    2f2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f2e:	98 8b       	std	Y+16, r25	; 0x10
    2f30:	8f 87       	std	Y+15, r24	; 0x0f
    2f32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f34:	98 89       	ldd	r25, Y+16	; 0x10
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	f1 f7       	brne	.-4      	; 0x2f36 <LCD_writeData+0x384>
    2f3a:	98 8b       	std	Y+16, r25	; 0x10
    2f3c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);
	GPIO_SetupPin_Value(PORTA_ID,LCD_EN_PIN,LOGIC_LOW);/*EN*/
    2f3e:	80 e0       	ldi	r24, 0x00	; 0
    2f40:	62 e0       	ldi	r22, 0x02	; 2
    2f42:	40 e0       	ldi	r20, 0x00	; 0
    2f44:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	a0 e0       	ldi	r26, 0x00	; 0
    2f4e:	b0 e4       	ldi	r27, 0x40	; 64
    2f50:	8b 87       	std	Y+11, r24	; 0x0b
    2f52:	9c 87       	std	Y+12, r25	; 0x0c
    2f54:	ad 87       	std	Y+13, r26	; 0x0d
    2f56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	4a e7       	ldi	r20, 0x7A	; 122
    2f66:	55 e4       	ldi	r21, 0x45	; 69
    2f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	8f 83       	std	Y+7, r24	; 0x07
    2f72:	98 87       	std	Y+8, r25	; 0x08
    2f74:	a9 87       	std	Y+9, r26	; 0x09
    2f76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f78:	6f 81       	ldd	r22, Y+7	; 0x07
    2f7a:	78 85       	ldd	r23, Y+8	; 0x08
    2f7c:	89 85       	ldd	r24, Y+9	; 0x09
    2f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e8       	ldi	r20, 0x80	; 128
    2f86:	5f e3       	ldi	r21, 0x3F	; 63
    2f88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f8c:	88 23       	and	r24, r24
    2f8e:	2c f4       	brge	.+10     	; 0x2f9a <LCD_writeData+0x3e8>
		__ticks = 1;
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	9e 83       	std	Y+6, r25	; 0x06
    2f96:	8d 83       	std	Y+5, r24	; 0x05
    2f98:	3f c0       	rjmp	.+126    	; 0x3018 <LCD_writeData+0x466>
	else if (__tmp > 65535)
    2f9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f9c:	78 85       	ldd	r23, Y+8	; 0x08
    2f9e:	89 85       	ldd	r24, Y+9	; 0x09
    2fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	3f ef       	ldi	r19, 0xFF	; 255
    2fa6:	4f e7       	ldi	r20, 0x7F	; 127
    2fa8:	57 e4       	ldi	r21, 0x47	; 71
    2faa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fae:	18 16       	cp	r1, r24
    2fb0:	4c f5       	brge	.+82     	; 0x3004 <LCD_writeData+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e2       	ldi	r20, 0x20	; 32
    2fc0:	51 e4       	ldi	r21, 0x41	; 65
    2fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	bc 01       	movw	r22, r24
    2fcc:	cd 01       	movw	r24, r26
    2fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	9e 83       	std	Y+6, r25	; 0x06
    2fd8:	8d 83       	std	Y+5, r24	; 0x05
    2fda:	0f c0       	rjmp	.+30     	; 0x2ffa <LCD_writeData+0x448>
    2fdc:	80 e9       	ldi	r24, 0x90	; 144
    2fde:	91 e0       	ldi	r25, 0x01	; 1
    2fe0:	9c 83       	std	Y+4, r25	; 0x04
    2fe2:	8b 83       	std	Y+3, r24	; 0x03
    2fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	f1 f7       	brne	.-4      	; 0x2fe8 <LCD_writeData+0x436>
    2fec:	9c 83       	std	Y+4, r25	; 0x04
    2fee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	9e 83       	std	Y+6, r25	; 0x06
    2ff8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffe:	00 97       	sbiw	r24, 0x00	; 0
    3000:	69 f7       	brne	.-38     	; 0x2fdc <LCD_writeData+0x42a>
    3002:	14 c0       	rjmp	.+40     	; 0x302c <LCD_writeData+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3004:	6f 81       	ldd	r22, Y+7	; 0x07
    3006:	78 85       	ldd	r23, Y+8	; 0x08
    3008:	89 85       	ldd	r24, Y+9	; 0x09
    300a:	9a 85       	ldd	r25, Y+10	; 0x0a
    300c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	9e 83       	std	Y+6, r25	; 0x06
    3016:	8d 83       	std	Y+5, r24	; 0x05
    3018:	8d 81       	ldd	r24, Y+5	; 0x05
    301a:	9e 81       	ldd	r25, Y+6	; 0x06
    301c:	9a 83       	std	Y+2, r25	; 0x02
    301e:	89 83       	std	Y+1, r24	; 0x01
    3020:	89 81       	ldd	r24, Y+1	; 0x01
    3022:	9a 81       	ldd	r25, Y+2	; 0x02
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	f1 f7       	brne	.-4      	; 0x3024 <LCD_writeData+0x472>
    3028:	9a 83       	std	Y+2, r25	; 0x02
    302a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    302c:	e9 96       	adiw	r28, 0x39	; 57
    302e:	0f b6       	in	r0, 0x3f	; 63
    3030:	f8 94       	cli
    3032:	de bf       	out	0x3e, r29	; 62
    3034:	0f be       	out	0x3f, r0	; 63
    3036:	cd bf       	out	0x3d, r28	; 61
    3038:	cf 91       	pop	r28
    303a:	df 91       	pop	r29
    303c:	08 95       	ret

0000303e <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{
    303e:	df 93       	push	r29
    3040:	cf 93       	push	r28
    3042:	00 d0       	rcall	.+0      	; 0x3044 <LCD_goToRowColumn+0x6>
    3044:	00 d0       	rcall	.+0      	; 0x3046 <LCD_goToRowColumn+0x8>
    3046:	0f 92       	push	r0
    3048:	cd b7       	in	r28, 0x3d	; 61
    304a:	de b7       	in	r29, 0x3e	; 62
    304c:	8a 83       	std	Y+2, r24	; 0x02
    304e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    3050:	8a 81       	ldd	r24, Y+2	; 0x02
    3052:	28 2f       	mov	r18, r24
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	3d 83       	std	Y+5, r19	; 0x05
    3058:	2c 83       	std	Y+4, r18	; 0x04
    305a:	8c 81       	ldd	r24, Y+4	; 0x04
    305c:	9d 81       	ldd	r25, Y+5	; 0x05
    305e:	81 30       	cpi	r24, 0x01	; 1
    3060:	91 05       	cpc	r25, r1
    3062:	c9 f0       	breq	.+50     	; 0x3096 <LCD_goToRowColumn+0x58>
    3064:	2c 81       	ldd	r18, Y+4	; 0x04
    3066:	3d 81       	ldd	r19, Y+5	; 0x05
    3068:	22 30       	cpi	r18, 0x02	; 2
    306a:	31 05       	cpc	r19, r1
    306c:	2c f4       	brge	.+10     	; 0x3078 <LCD_goToRowColumn+0x3a>
    306e:	8c 81       	ldd	r24, Y+4	; 0x04
    3070:	9d 81       	ldd	r25, Y+5	; 0x05
    3072:	00 97       	sbiw	r24, 0x00	; 0
    3074:	61 f0       	breq	.+24     	; 0x308e <LCD_goToRowColumn+0x50>
    3076:	1a c0       	rjmp	.+52     	; 0x30ac <LCD_goToRowColumn+0x6e>
    3078:	2c 81       	ldd	r18, Y+4	; 0x04
    307a:	3d 81       	ldd	r19, Y+5	; 0x05
    307c:	22 30       	cpi	r18, 0x02	; 2
    307e:	31 05       	cpc	r19, r1
    3080:	71 f0       	breq	.+28     	; 0x309e <LCD_goToRowColumn+0x60>
    3082:	8c 81       	ldd	r24, Y+4	; 0x04
    3084:	9d 81       	ldd	r25, Y+5	; 0x05
    3086:	83 30       	cpi	r24, 0x03	; 3
    3088:	91 05       	cpc	r25, r1
    308a:	69 f0       	breq	.+26     	; 0x30a6 <LCD_goToRowColumn+0x68>
    308c:	0f c0       	rjmp	.+30     	; 0x30ac <LCD_goToRowColumn+0x6e>
	{
		case 0:
				Address=0x80+col;
    308e:	8b 81       	ldd	r24, Y+3	; 0x03
    3090:	80 58       	subi	r24, 0x80	; 128
    3092:	89 83       	std	Y+1, r24	; 0x01
    3094:	0b c0       	rjmp	.+22     	; 0x30ac <LCD_goToRowColumn+0x6e>
				break;
		case 1:
				Address=0xC0+col;
    3096:	8b 81       	ldd	r24, Y+3	; 0x03
    3098:	80 54       	subi	r24, 0x40	; 64
    309a:	89 83       	std	Y+1, r24	; 0x01
    309c:	07 c0       	rjmp	.+14     	; 0x30ac <LCD_goToRowColumn+0x6e>
				break;
		case 2:
				Address=0x94+col;
    309e:	8b 81       	ldd	r24, Y+3	; 0x03
    30a0:	8c 56       	subi	r24, 0x6C	; 108
    30a2:	89 83       	std	Y+1, r24	; 0x01
    30a4:	03 c0       	rjmp	.+6      	; 0x30ac <LCD_goToRowColumn+0x6e>
				break;
		case 3:
				Address=0xD4+col;
    30a6:	8b 81       	ldd	r24, Y+3	; 0x03
    30a8:	8c 52       	subi	r24, 0x2C	; 44
    30aa:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_writeCommand(Address);
    30ac:	89 81       	ldd	r24, Y+1	; 0x01
    30ae:	0e 94 00 14 	call	0x2800	; 0x2800 <LCD_writeCommand>
}
    30b2:	0f 90       	pop	r0
    30b4:	0f 90       	pop	r0
    30b6:	0f 90       	pop	r0
    30b8:	0f 90       	pop	r0
    30ba:	0f 90       	pop	r0
    30bc:	cf 91       	pop	r28
    30be:	df 91       	pop	r29
    30c0:	08 95       	ret

000030c2 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    30c2:	df 93       	push	r29
    30c4:	cf 93       	push	r28
    30c6:	00 d0       	rcall	.+0      	; 0x30c8 <LCD_displayString+0x6>
    30c8:	0f 92       	push	r0
    30ca:	cd b7       	in	r28, 0x3d	; 61
    30cc:	de b7       	in	r29, 0x3e	; 62
    30ce:	9b 83       	std	Y+3, r25	; 0x03
    30d0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    30d2:	19 82       	std	Y+1, r1	; 0x01
    30d4:	0e c0       	rjmp	.+28     	; 0x30f2 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_writeData(Str[i]);
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
    30d8:	28 2f       	mov	r18, r24
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	8a 81       	ldd	r24, Y+2	; 0x02
    30de:	9b 81       	ldd	r25, Y+3	; 0x03
    30e0:	fc 01       	movw	r30, r24
    30e2:	e2 0f       	add	r30, r18
    30e4:	f3 1f       	adc	r31, r19
    30e6:	80 81       	ld	r24, Z
    30e8:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <LCD_writeData>
		i++;
    30ec:	89 81       	ldd	r24, Y+1	; 0x01
    30ee:	8f 5f       	subi	r24, 0xFF	; 255
    30f0:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    30f2:	89 81       	ldd	r24, Y+1	; 0x01
    30f4:	28 2f       	mov	r18, r24
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	8a 81       	ldd	r24, Y+2	; 0x02
    30fa:	9b 81       	ldd	r25, Y+3	; 0x03
    30fc:	fc 01       	movw	r30, r24
    30fe:	e2 0f       	add	r30, r18
    3100:	f3 1f       	adc	r31, r19
    3102:	80 81       	ld	r24, Z
    3104:	88 23       	and	r24, r24
    3106:	39 f7       	brne	.-50     	; 0x30d6 <LCD_displayString+0x14>
	{
		LCD_writeData(Str[i]);
		i++;
	}
}
    3108:	0f 90       	pop	r0
    310a:	0f 90       	pop	r0
    310c:	0f 90       	pop	r0
    310e:	cf 91       	pop	r28
    3110:	df 91       	pop	r29
    3112:	08 95       	ret

00003114 <LCD_clearScreen>:
void LCD_clearScreen(void)
{
    3114:	df 93       	push	r29
    3116:	cf 93       	push	r28
    3118:	cd b7       	in	r28, 0x3d	; 61
    311a:	de b7       	in	r29, 0x3e	; 62
	LCD_writeCommand(CLEAR_COMMAND); //clear display
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	0e 94 00 14 	call	0x2800	; 0x2800 <LCD_writeCommand>
}
    3122:	cf 91       	pop	r28
    3124:	df 91       	pop	r29
    3126:	08 95       	ret

00003128 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    3128:	df 93       	push	r29
    312a:	cf 93       	push	r28
    312c:	cd b7       	in	r28, 0x3d	; 61
    312e:	de b7       	in	r29, 0x3e	; 62
    3130:	62 97       	sbiw	r28, 0x12	; 18
    3132:	0f b6       	in	r0, 0x3f	; 63
    3134:	f8 94       	cli
    3136:	de bf       	out	0x3e, r29	; 62
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	cd bf       	out	0x3d, r28	; 61
    313c:	9a 8b       	std	Y+18, r25	; 0x12
    313e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    3140:	89 89       	ldd	r24, Y+17	; 0x11
    3142:	9a 89       	ldd	r25, Y+18	; 0x12
    3144:	9e 01       	movw	r18, r28
    3146:	2f 5f       	subi	r18, 0xFF	; 255
    3148:	3f 4f       	sbci	r19, 0xFF	; 255
    314a:	b9 01       	movw	r22, r18
    314c:	4a e0       	ldi	r20, 0x0A	; 10
    314e:	50 e0       	ldi	r21, 0x00	; 0
    3150:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <itoa>
   LCD_displayString(buff);
    3154:	ce 01       	movw	r24, r28
    3156:	01 96       	adiw	r24, 0x01	; 1
    3158:	0e 94 61 18 	call	0x30c2	; 0x30c2 <LCD_displayString>
}
    315c:	62 96       	adiw	r28, 0x12	; 18
    315e:	0f b6       	in	r0, 0x3f	; 63
    3160:	f8 94       	cli
    3162:	de bf       	out	0x3e, r29	; 62
    3164:	0f be       	out	0x3f, r0	; 63
    3166:	cd bf       	out	0x3d, r28	; 61
    3168:	cf 91       	pop	r28
    316a:	df 91       	pop	r29
    316c:	08 95       	ret

0000316e <KeyPad_init>:

#include "KeyPad.h"


void KeyPad_init()
{
    316e:	df 93       	push	r29
    3170:	cf 93       	push	r28
    3172:	cd b7       	in	r28, 0x3d	; 61
    3174:	de b7       	in	r29, 0x3e	; 62
	/*Configure Direction of Rows*/
	GPIO_SetupPin_Direction(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW1,PIN_OUTPUT);
    3176:	82 e0       	ldi	r24, 0x02	; 2
    3178:	62 e0       	ldi	r22, 0x02	; 2
    317a:	41 e0       	ldi	r20, 0x01	; 1
    317c:	0e 94 31 0b 	call	0x1662	; 0x1662 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW2,PIN_OUTPUT);
    3180:	82 e0       	ldi	r24, 0x02	; 2
    3182:	63 e0       	ldi	r22, 0x03	; 3
    3184:	41 e0       	ldi	r20, 0x01	; 1
    3186:	0e 94 31 0b 	call	0x1662	; 0x1662 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW3,PIN_OUTPUT);
    318a:	82 e0       	ldi	r24, 0x02	; 2
    318c:	64 e0       	ldi	r22, 0x04	; 4
    318e:	41 e0       	ldi	r20, 0x01	; 1
    3190:	0e 94 31 0b 	call	0x1662	; 0x1662 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW4,PIN_OUTPUT);
    3194:	82 e0       	ldi	r24, 0x02	; 2
    3196:	65 e0       	ldi	r22, 0x05	; 5
    3198:	41 e0       	ldi	r20, 0x01	; 1
    319a:	0e 94 31 0b 	call	0x1662	; 0x1662 <GPIO_SetupPin_Direction>

	GPIO_SetupPin_Direction(KEYPAD_COLS_PORT_ID,KEYPAD_COL1,PIN_INPUT);
    319e:	83 e0       	ldi	r24, 0x03	; 3
    31a0:	63 e0       	ldi	r22, 0x03	; 3
    31a2:	40 e0       	ldi	r20, 0x00	; 0
    31a4:	0e 94 31 0b 	call	0x1662	; 0x1662 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_COLS_PORT_ID,KEYPAD_COL2,PIN_INPUT);
    31a8:	83 e0       	ldi	r24, 0x03	; 3
    31aa:	65 e0       	ldi	r22, 0x05	; 5
    31ac:	40 e0       	ldi	r20, 0x00	; 0
    31ae:	0e 94 31 0b 	call	0x1662	; 0x1662 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_COLS_PORT_ID,KEYPAD_COL3,PIN_INPUT);
    31b2:	83 e0       	ldi	r24, 0x03	; 3
    31b4:	66 e0       	ldi	r22, 0x06	; 6
    31b6:	40 e0       	ldi	r20, 0x00	; 0
    31b8:	0e 94 31 0b 	call	0x1662	; 0x1662 <GPIO_SetupPin_Direction>
	GPIO_SetupPin_Direction(KEYPAD_COLS_PORT_ID,KEYPAD_COL4,PIN_INPUT);
    31bc:	83 e0       	ldi	r24, 0x03	; 3
    31be:	67 e0       	ldi	r22, 0x07	; 7
    31c0:	40 e0       	ldi	r20, 0x00	; 0
    31c2:	0e 94 31 0b 	call	0x1662	; 0x1662 <GPIO_SetupPin_Direction>

	GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW1,LOGIC_HIGH);
    31c6:	82 e0       	ldi	r24, 0x02	; 2
    31c8:	62 e0       	ldi	r22, 0x02	; 2
    31ca:	41 e0       	ldi	r20, 0x01	; 1
    31cc:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW2,LOGIC_HIGH);
    31d0:	82 e0       	ldi	r24, 0x02	; 2
    31d2:	63 e0       	ldi	r22, 0x03	; 3
    31d4:	41 e0       	ldi	r20, 0x01	; 1
    31d6:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW3,LOGIC_HIGH);
    31da:	82 e0       	ldi	r24, 0x02	; 2
    31dc:	64 e0       	ldi	r22, 0x04	; 4
    31de:	41 e0       	ldi	r20, 0x01	; 1
    31e0:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KEYPAD_ROW4,LOGIC_HIGH);
    31e4:	82 e0       	ldi	r24, 0x02	; 2
    31e6:	65 e0       	ldi	r22, 0x05	; 5
    31e8:	41 e0       	ldi	r20, 0x01	; 1
    31ea:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>

	GPIO_SetupPin_Value(KEYPAD_COLS_PORT_ID,KEYPAD_ROW1,LOGIC_LOW);
    31ee:	83 e0       	ldi	r24, 0x03	; 3
    31f0:	62 e0       	ldi	r22, 0x02	; 2
    31f2:	40 e0       	ldi	r20, 0x00	; 0
    31f4:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_COLS_PORT_ID,KEYPAD_ROW2,LOGIC_LOW);
    31f8:	83 e0       	ldi	r24, 0x03	; 3
    31fa:	63 e0       	ldi	r22, 0x03	; 3
    31fc:	40 e0       	ldi	r20, 0x00	; 0
    31fe:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_COLS_PORT_ID,KEYPAD_ROW3,LOGIC_LOW);
    3202:	83 e0       	ldi	r24, 0x03	; 3
    3204:	64 e0       	ldi	r22, 0x04	; 4
    3206:	40 e0       	ldi	r20, 0x00	; 0
    3208:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
	GPIO_SetupPin_Value(KEYPAD_COLS_PORT_ID,KEYPAD_ROW4,LOGIC_LOW);
    320c:	83 e0       	ldi	r24, 0x03	; 3
    320e:	65 e0       	ldi	r22, 0x05	; 5
    3210:	40 e0       	ldi	r20, 0x00	; 0
    3212:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>

}
    3216:	cf 91       	pop	r28
    3218:	df 91       	pop	r29
    321a:	08 95       	ret

0000321c <KeyPad_getPressedKey>:

uint8 KeyPad_getPressedKey()
{
    321c:	df 93       	push	r29
    321e:	cf 93       	push	r28
    3220:	cd b7       	in	r28, 0x3d	; 61
    3222:	de b7       	in	r29, 0x3e	; 62
    3224:	a0 97       	sbiw	r28, 0x20	; 32
    3226:	0f b6       	in	r0, 0x3f	; 63
    3228:	f8 94       	cli
    322a:	de bf       	out	0x3e, r29	; 62
    322c:	0f be       	out	0x3f, r0	; 63
    322e:	cd bf       	out	0x3d, r28	; 61
	uint8 KeyPad_data[NUMBER_OF_ROWS][NUMBER_OF_COLS]=KEYPAD_DATA;
    3230:	9e 01       	movw	r18, r28
    3232:	2c 5f       	subi	r18, 0xFC	; 252
    3234:	3f 4f       	sbci	r19, 0xFF	; 255
    3236:	3d 8f       	std	Y+29, r19	; 0x1d
    3238:	2c 8f       	std	Y+28, r18	; 0x1c
    323a:	88 e6       	ldi	r24, 0x68	; 104
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	9f 8f       	std	Y+31, r25	; 0x1f
    3240:	8e 8f       	std	Y+30, r24	; 0x1e
    3242:	90 e1       	ldi	r25, 0x10	; 16
    3244:	98 a3       	std	Y+32, r25	; 0x20
    3246:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3248:	ff 8d       	ldd	r31, Y+31	; 0x1f
    324a:	00 80       	ld	r0, Z
    324c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    324e:	3f 8d       	ldd	r19, Y+31	; 0x1f
    3250:	2f 5f       	subi	r18, 0xFF	; 255
    3252:	3f 4f       	sbci	r19, 0xFF	; 255
    3254:	3f 8f       	std	Y+31, r19	; 0x1f
    3256:	2e 8f       	std	Y+30, r18	; 0x1e
    3258:	ec 8d       	ldd	r30, Y+28	; 0x1c
    325a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    325c:	00 82       	st	Z, r0
    325e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3260:	3d 8d       	ldd	r19, Y+29	; 0x1d
    3262:	2f 5f       	subi	r18, 0xFF	; 255
    3264:	3f 4f       	sbci	r19, 0xFF	; 255
    3266:	3d 8f       	std	Y+29, r19	; 0x1d
    3268:	2c 8f       	std	Y+28, r18	; 0x1c
    326a:	38 a1       	ldd	r19, Y+32	; 0x20
    326c:	31 50       	subi	r19, 0x01	; 1
    326e:	38 a3       	std	Y+32, r19	; 0x20
    3270:	88 a1       	ldd	r24, Y+32	; 0x20
    3272:	88 23       	and	r24, r24
    3274:	41 f7       	brne	.-48     	; 0x3246 <KeyPad_getPressedKey+0x2a>

	uint8 KeyPad_col_Pins[NUMBER_OF_COLS]=KEYPAD_COL_PINS;
    3276:	83 e0       	ldi	r24, 0x03	; 3
    3278:	8c 8b       	std	Y+20, r24	; 0x14
    327a:	85 e0       	ldi	r24, 0x05	; 5
    327c:	8d 8b       	std	Y+21, r24	; 0x15
    327e:	86 e0       	ldi	r24, 0x06	; 6
    3280:	8e 8b       	std	Y+22, r24	; 0x16
    3282:	87 e0       	ldi	r24, 0x07	; 7
    3284:	8f 8b       	std	Y+23, r24	; 0x17

	uint8 KeyPad_row_Pins[NUMBER_OF_ROWS]=KEYPAD_ROW_PINS;
    3286:	82 e0       	ldi	r24, 0x02	; 2
    3288:	88 8f       	std	Y+24, r24	; 0x18
    328a:	83 e0       	ldi	r24, 0x03	; 3
    328c:	89 8f       	std	Y+25, r24	; 0x19
    328e:	84 e0       	ldi	r24, 0x04	; 4
    3290:	8a 8f       	std	Y+26, r24	; 0x1a
    3292:	85 e0       	ldi	r24, 0x05	; 5
    3294:	8b 8f       	std	Y+27, r24	; 0x1b

	uint8 Data=0XFF;
    3296:	8f ef       	ldi	r24, 0xFF	; 255
    3298:	8b 83       	std	Y+3, r24	; 0x03

	for(uint8 row=0;row<NUMBER_OF_ROWS;row++)
    329a:	1a 82       	std	Y+2, r1	; 0x02
    329c:	56 c0       	rjmp	.+172    	; 0x334a <KeyPad_getPressedKey+0x12e>
	{
		GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KeyPad_row_Pins[row],LOGIC_LOW);
    329e:	8a 81       	ldd	r24, Y+2	; 0x02
    32a0:	28 2f       	mov	r18, r24
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	ce 01       	movw	r24, r28
    32a6:	48 96       	adiw	r24, 0x18	; 24
    32a8:	fc 01       	movw	r30, r24
    32aa:	e2 0f       	add	r30, r18
    32ac:	f3 1f       	adc	r31, r19
    32ae:	90 81       	ld	r25, Z
    32b0:	82 e0       	ldi	r24, 0x02	; 2
    32b2:	69 2f       	mov	r22, r25
    32b4:	40 e0       	ldi	r20, 0x00	; 0
    32b6:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>
		for(uint8 col=0;col<NUMBER_OF_COLS;col++)
    32ba:	19 82       	std	Y+1, r1	; 0x01
    32bc:	32 c0       	rjmp	.+100    	; 0x3322 <KeyPad_getPressedKey+0x106>
		{


			while(GET_BIT(KEYPAD_COLS_PORT,KeyPad_col_Pins[col])==LOGIC_LOW)
			{
				Data=KeyPad_data[row][col];
    32be:	8a 81       	ldd	r24, Y+2	; 0x02
    32c0:	28 2f       	mov	r18, r24
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	89 81       	ldd	r24, Y+1	; 0x01
    32c6:	48 2f       	mov	r20, r24
    32c8:	50 e0       	ldi	r21, 0x00	; 0
    32ca:	22 0f       	add	r18, r18
    32cc:	33 1f       	adc	r19, r19
    32ce:	22 0f       	add	r18, r18
    32d0:	33 1f       	adc	r19, r19
    32d2:	ce 01       	movw	r24, r28
    32d4:	01 96       	adiw	r24, 0x01	; 1
    32d6:	82 0f       	add	r24, r18
    32d8:	93 1f       	adc	r25, r19
    32da:	84 0f       	add	r24, r20
    32dc:	95 1f       	adc	r25, r21
    32de:	fc 01       	movw	r30, r24
    32e0:	33 96       	adiw	r30, 0x03	; 3
    32e2:	80 81       	ld	r24, Z
    32e4:	8b 83       	std	Y+3, r24	; 0x03
		GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KeyPad_row_Pins[row],LOGIC_LOW);
		for(uint8 col=0;col<NUMBER_OF_COLS;col++)
		{


			while(GET_BIT(KEYPAD_COLS_PORT,KeyPad_col_Pins[col])==LOGIC_LOW)
    32e6:	e0 e3       	ldi	r30, 0x30	; 48
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	80 81       	ld	r24, Z
    32ec:	48 2f       	mov	r20, r24
    32ee:	50 e0       	ldi	r21, 0x00	; 0
    32f0:	89 81       	ldd	r24, Y+1	; 0x01
    32f2:	28 2f       	mov	r18, r24
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	ce 01       	movw	r24, r28
    32f8:	44 96       	adiw	r24, 0x14	; 20
    32fa:	fc 01       	movw	r30, r24
    32fc:	e2 0f       	add	r30, r18
    32fe:	f3 1f       	adc	r31, r19
    3300:	80 81       	ld	r24, Z
    3302:	88 2f       	mov	r24, r24
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	fa 01       	movw	r30, r20
    3308:	02 c0       	rjmp	.+4      	; 0x330e <KeyPad_getPressedKey+0xf2>
    330a:	f5 95       	asr	r31
    330c:	e7 95       	ror	r30
    330e:	8a 95       	dec	r24
    3310:	e2 f7       	brpl	.-8      	; 0x330a <KeyPad_getPressedKey+0xee>
    3312:	cf 01       	movw	r24, r30
    3314:	81 70       	andi	r24, 0x01	; 1
    3316:	90 70       	andi	r25, 0x00	; 0
    3318:	00 97       	sbiw	r24, 0x00	; 0
    331a:	89 f2       	breq	.-94     	; 0x32be <KeyPad_getPressedKey+0xa2>
	uint8 Data=0XFF;

	for(uint8 row=0;row<NUMBER_OF_ROWS;row++)
	{
		GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KeyPad_row_Pins[row],LOGIC_LOW);
		for(uint8 col=0;col<NUMBER_OF_COLS;col++)
    331c:	89 81       	ldd	r24, Y+1	; 0x01
    331e:	8f 5f       	subi	r24, 0xFF	; 255
    3320:	89 83       	std	Y+1, r24	; 0x01
    3322:	89 81       	ldd	r24, Y+1	; 0x01
    3324:	84 30       	cpi	r24, 0x04	; 4
    3326:	f8 f2       	brcs	.-66     	; 0x32e6 <KeyPad_getPressedKey+0xca>
				Data=KeyPad_data[row][col];
			}


		}
		GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KeyPad_row_Pins[row],LOGIC_HIGH);
    3328:	8a 81       	ldd	r24, Y+2	; 0x02
    332a:	28 2f       	mov	r18, r24
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	ce 01       	movw	r24, r28
    3330:	48 96       	adiw	r24, 0x18	; 24
    3332:	fc 01       	movw	r30, r24
    3334:	e2 0f       	add	r30, r18
    3336:	f3 1f       	adc	r31, r19
    3338:	90 81       	ld	r25, Z
    333a:	82 e0       	ldi	r24, 0x02	; 2
    333c:	69 2f       	mov	r22, r25
    333e:	41 e0       	ldi	r20, 0x01	; 1
    3340:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_SetupPin_Value>

	uint8 KeyPad_row_Pins[NUMBER_OF_ROWS]=KEYPAD_ROW_PINS;

	uint8 Data=0XFF;

	for(uint8 row=0;row<NUMBER_OF_ROWS;row++)
    3344:	8a 81       	ldd	r24, Y+2	; 0x02
    3346:	8f 5f       	subi	r24, 0xFF	; 255
    3348:	8a 83       	std	Y+2, r24	; 0x02
    334a:	8a 81       	ldd	r24, Y+2	; 0x02
    334c:	84 30       	cpi	r24, 0x04	; 4
    334e:	08 f4       	brcc	.+2      	; 0x3352 <KeyPad_getPressedKey+0x136>
    3350:	a6 cf       	rjmp	.-180    	; 0x329e <KeyPad_getPressedKey+0x82>


		}
		GPIO_SetupPin_Value(KEYPAD_ROWS_PORT_ID,KeyPad_row_Pins[row],LOGIC_HIGH);
	}
	return Data;
    3352:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3354:	a0 96       	adiw	r28, 0x20	; 32
    3356:	0f b6       	in	r0, 0x3f	; 63
    3358:	f8 94       	cli
    335a:	de bf       	out	0x3e, r29	; 62
    335c:	0f be       	out	0x3f, r0	; 63
    335e:	cd bf       	out	0x3d, r28	; 61
    3360:	cf 91       	pop	r28
    3362:	df 91       	pop	r29
    3364:	08 95       	ret

00003366 <main>:
#undef F_CPU
#define F_CPU 16000000U


int  main(void)
{
    3366:	df 93       	push	r29
    3368:	cf 93       	push	r28
    336a:	cd b7       	in	r28, 0x3d	; 61
    336c:	de b7       	in	r29, 0x3e	; 62
    336e:	60 97       	sbiw	r28, 0x10	; 16
    3370:	0f b6       	in	r0, 0x3f	; 63
    3372:	f8 94       	cli
    3374:	de bf       	out	0x3e, r29	; 62
    3376:	0f be       	out	0x3f, r0	; 63
    3378:	cd bf       	out	0x3d, r28	; 61
	TIM1_init();
    337a:	0e 94 44 08 	call	0x1088	; 0x1088 <TIM1_init>
	TIM1_setICR(5000);
    337e:	88 e8       	ldi	r24, 0x88	; 136
    3380:	93 e1       	ldi	r25, 0x13	; 19
    3382:	0e 94 9b 08 	call	0x1136	; 0x1136 <TIM1_setICR>
	GPIO_SetupPin_Direction(PORTD_ID,5, PIN_OUTPUT);
    3386:	83 e0       	ldi	r24, 0x03	; 3
    3388:	65 e0       	ldi	r22, 0x05	; 5
    338a:	41 e0       	ldi	r20, 0x01	; 1
    338c:	0e 94 31 0b 	call	0x1662	; 0x1662 <GPIO_SetupPin_Direction>
	TIM1_start();
    3390:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TIM1_start>
	//TIM1_setPreload(0);

	uint16 angle=0;
    3394:	18 8a       	std	Y+16, r1	; 0x10
    3396:	1f 86       	std	Y+15, r1	; 0x0f
	while(1)
	{

			TIM1_dutyCycle_OCRA(1500);
    3398:	8c ed       	ldi	r24, 0xDC	; 220
    339a:	95 e0       	ldi	r25, 0x05	; 5
    339c:	0e 94 ad 08 	call	0x115a	; 0x115a <TIM1_dutyCycle_OCRA>
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	aa e7       	ldi	r26, 0x7A	; 122
    33a6:	b4 e4       	ldi	r27, 0x44	; 68
    33a8:	8b 87       	std	Y+11, r24	; 0x0b
    33aa:	9c 87       	std	Y+12, r25	; 0x0c
    33ac:	ad 87       	std	Y+13, r26	; 0x0d
    33ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	4a e7       	ldi	r20, 0x7A	; 122
    33be:	55 e4       	ldi	r21, 0x45	; 69
    33c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c4:	dc 01       	movw	r26, r24
    33c6:	cb 01       	movw	r24, r22
    33c8:	8f 83       	std	Y+7, r24	; 0x07
    33ca:	98 87       	std	Y+8, r25	; 0x08
    33cc:	a9 87       	std	Y+9, r26	; 0x09
    33ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33d0:	6f 81       	ldd	r22, Y+7	; 0x07
    33d2:	78 85       	ldd	r23, Y+8	; 0x08
    33d4:	89 85       	ldd	r24, Y+9	; 0x09
    33d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	40 e8       	ldi	r20, 0x80	; 128
    33de:	5f e3       	ldi	r21, 0x3F	; 63
    33e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33e4:	88 23       	and	r24, r24
    33e6:	2c f4       	brge	.+10     	; 0x33f2 <main+0x8c>
		__ticks = 1;
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	9e 83       	std	Y+6, r25	; 0x06
    33ee:	8d 83       	std	Y+5, r24	; 0x05
    33f0:	3f c0       	rjmp	.+126    	; 0x3470 <main+0x10a>
	else if (__tmp > 65535)
    33f2:	6f 81       	ldd	r22, Y+7	; 0x07
    33f4:	78 85       	ldd	r23, Y+8	; 0x08
    33f6:	89 85       	ldd	r24, Y+9	; 0x09
    33f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	3f ef       	ldi	r19, 0xFF	; 255
    33fe:	4f e7       	ldi	r20, 0x7F	; 127
    3400:	57 e4       	ldi	r21, 0x47	; 71
    3402:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3406:	18 16       	cp	r1, r24
    3408:	4c f5       	brge	.+82     	; 0x345c <main+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340a:	6b 85       	ldd	r22, Y+11	; 0x0b
    340c:	7c 85       	ldd	r23, Y+12	; 0x0c
    340e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3410:	9e 85       	ldd	r25, Y+14	; 0x0e
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	40 e2       	ldi	r20, 0x20	; 32
    3418:	51 e4       	ldi	r21, 0x41	; 65
    341a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	bc 01       	movw	r22, r24
    3424:	cd 01       	movw	r24, r26
    3426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342a:	dc 01       	movw	r26, r24
    342c:	cb 01       	movw	r24, r22
    342e:	9e 83       	std	Y+6, r25	; 0x06
    3430:	8d 83       	std	Y+5, r24	; 0x05
    3432:	0f c0       	rjmp	.+30     	; 0x3452 <main+0xec>
    3434:	80 e9       	ldi	r24, 0x90	; 144
    3436:	91 e0       	ldi	r25, 0x01	; 1
    3438:	9c 83       	std	Y+4, r25	; 0x04
    343a:	8b 83       	std	Y+3, r24	; 0x03
    343c:	8b 81       	ldd	r24, Y+3	; 0x03
    343e:	9c 81       	ldd	r25, Y+4	; 0x04
    3440:	01 97       	sbiw	r24, 0x01	; 1
    3442:	f1 f7       	brne	.-4      	; 0x3440 <main+0xda>
    3444:	9c 83       	std	Y+4, r25	; 0x04
    3446:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3448:	8d 81       	ldd	r24, Y+5	; 0x05
    344a:	9e 81       	ldd	r25, Y+6	; 0x06
    344c:	01 97       	sbiw	r24, 0x01	; 1
    344e:	9e 83       	std	Y+6, r25	; 0x06
    3450:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3452:	8d 81       	ldd	r24, Y+5	; 0x05
    3454:	9e 81       	ldd	r25, Y+6	; 0x06
    3456:	00 97       	sbiw	r24, 0x00	; 0
    3458:	69 f7       	brne	.-38     	; 0x3434 <main+0xce>
    345a:	9e cf       	rjmp	.-196    	; 0x3398 <main+0x32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    345c:	6f 81       	ldd	r22, Y+7	; 0x07
    345e:	78 85       	ldd	r23, Y+8	; 0x08
    3460:	89 85       	ldd	r24, Y+9	; 0x09
    3462:	9a 85       	ldd	r25, Y+10	; 0x0a
    3464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3468:	dc 01       	movw	r26, r24
    346a:	cb 01       	movw	r24, r22
    346c:	9e 83       	std	Y+6, r25	; 0x06
    346e:	8d 83       	std	Y+5, r24	; 0x05
    3470:	8d 81       	ldd	r24, Y+5	; 0x05
    3472:	9e 81       	ldd	r25, Y+6	; 0x06
    3474:	9a 83       	std	Y+2, r25	; 0x02
    3476:	89 83       	std	Y+1, r24	; 0x01
    3478:	89 81       	ldd	r24, Y+1	; 0x01
    347a:	9a 81       	ldd	r25, Y+2	; 0x02
    347c:	01 97       	sbiw	r24, 0x01	; 1
    347e:	f1 f7       	brne	.-4      	; 0x347c <main+0x116>
    3480:	9a 83       	std	Y+2, r25	; 0x02
    3482:	89 83       	std	Y+1, r24	; 0x01
    3484:	89 cf       	rjmp	.-238    	; 0x3398 <main+0x32>

00003486 <__prologue_saves__>:
    3486:	2f 92       	push	r2
    3488:	3f 92       	push	r3
    348a:	4f 92       	push	r4
    348c:	5f 92       	push	r5
    348e:	6f 92       	push	r6
    3490:	7f 92       	push	r7
    3492:	8f 92       	push	r8
    3494:	9f 92       	push	r9
    3496:	af 92       	push	r10
    3498:	bf 92       	push	r11
    349a:	cf 92       	push	r12
    349c:	df 92       	push	r13
    349e:	ef 92       	push	r14
    34a0:	ff 92       	push	r15
    34a2:	0f 93       	push	r16
    34a4:	1f 93       	push	r17
    34a6:	cf 93       	push	r28
    34a8:	df 93       	push	r29
    34aa:	cd b7       	in	r28, 0x3d	; 61
    34ac:	de b7       	in	r29, 0x3e	; 62
    34ae:	ca 1b       	sub	r28, r26
    34b0:	db 0b       	sbc	r29, r27
    34b2:	0f b6       	in	r0, 0x3f	; 63
    34b4:	f8 94       	cli
    34b6:	de bf       	out	0x3e, r29	; 62
    34b8:	0f be       	out	0x3f, r0	; 63
    34ba:	cd bf       	out	0x3d, r28	; 61
    34bc:	09 94       	ijmp

000034be <__epilogue_restores__>:
    34be:	2a 88       	ldd	r2, Y+18	; 0x12
    34c0:	39 88       	ldd	r3, Y+17	; 0x11
    34c2:	48 88       	ldd	r4, Y+16	; 0x10
    34c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    34c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    34c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    34ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    34cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    34ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    34d0:	b9 84       	ldd	r11, Y+9	; 0x09
    34d2:	c8 84       	ldd	r12, Y+8	; 0x08
    34d4:	df 80       	ldd	r13, Y+7	; 0x07
    34d6:	ee 80       	ldd	r14, Y+6	; 0x06
    34d8:	fd 80       	ldd	r15, Y+5	; 0x05
    34da:	0c 81       	ldd	r16, Y+4	; 0x04
    34dc:	1b 81       	ldd	r17, Y+3	; 0x03
    34de:	aa 81       	ldd	r26, Y+2	; 0x02
    34e0:	b9 81       	ldd	r27, Y+1	; 0x01
    34e2:	ce 0f       	add	r28, r30
    34e4:	d1 1d       	adc	r29, r1
    34e6:	0f b6       	in	r0, 0x3f	; 63
    34e8:	f8 94       	cli
    34ea:	de bf       	out	0x3e, r29	; 62
    34ec:	0f be       	out	0x3f, r0	; 63
    34ee:	cd bf       	out	0x3d, r28	; 61
    34f0:	ed 01       	movw	r28, r26
    34f2:	08 95       	ret

000034f4 <itoa>:
    34f4:	fb 01       	movw	r30, r22
    34f6:	9f 01       	movw	r18, r30
    34f8:	e8 94       	clt
    34fa:	42 30       	cpi	r20, 0x02	; 2
    34fc:	c4 f0       	brlt	.+48     	; 0x352e <itoa+0x3a>
    34fe:	45 32       	cpi	r20, 0x25	; 37
    3500:	b4 f4       	brge	.+44     	; 0x352e <itoa+0x3a>
    3502:	4a 30       	cpi	r20, 0x0A	; 10
    3504:	29 f4       	brne	.+10     	; 0x3510 <itoa+0x1c>
    3506:	97 fb       	bst	r25, 7
    3508:	1e f4       	brtc	.+6      	; 0x3510 <itoa+0x1c>
    350a:	90 95       	com	r25
    350c:	81 95       	neg	r24
    350e:	9f 4f       	sbci	r25, 0xFF	; 255
    3510:	64 2f       	mov	r22, r20
    3512:	77 27       	eor	r23, r23
    3514:	0e 94 ab 1a 	call	0x3556	; 0x3556 <__udivmodhi4>
    3518:	80 5d       	subi	r24, 0xD0	; 208
    351a:	8a 33       	cpi	r24, 0x3A	; 58
    351c:	0c f0       	brlt	.+2      	; 0x3520 <itoa+0x2c>
    351e:	89 5d       	subi	r24, 0xD9	; 217
    3520:	81 93       	st	Z+, r24
    3522:	cb 01       	movw	r24, r22
    3524:	00 97       	sbiw	r24, 0x00	; 0
    3526:	a1 f7       	brne	.-24     	; 0x3510 <itoa+0x1c>
    3528:	16 f4       	brtc	.+4      	; 0x352e <itoa+0x3a>
    352a:	5d e2       	ldi	r21, 0x2D	; 45
    352c:	51 93       	st	Z+, r21
    352e:	10 82       	st	Z, r1
    3530:	c9 01       	movw	r24, r18
    3532:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <strrev>

00003536 <strrev>:
    3536:	dc 01       	movw	r26, r24
    3538:	fc 01       	movw	r30, r24
    353a:	67 2f       	mov	r22, r23
    353c:	71 91       	ld	r23, Z+
    353e:	77 23       	and	r23, r23
    3540:	e1 f7       	brne	.-8      	; 0x353a <strrev+0x4>
    3542:	32 97       	sbiw	r30, 0x02	; 2
    3544:	04 c0       	rjmp	.+8      	; 0x354e <strrev+0x18>
    3546:	7c 91       	ld	r23, X
    3548:	6d 93       	st	X+, r22
    354a:	70 83       	st	Z, r23
    354c:	62 91       	ld	r22, -Z
    354e:	ae 17       	cp	r26, r30
    3550:	bf 07       	cpc	r27, r31
    3552:	c8 f3       	brcs	.-14     	; 0x3546 <strrev+0x10>
    3554:	08 95       	ret

00003556 <__udivmodhi4>:
    3556:	aa 1b       	sub	r26, r26
    3558:	bb 1b       	sub	r27, r27
    355a:	51 e1       	ldi	r21, 0x11	; 17
    355c:	07 c0       	rjmp	.+14     	; 0x356c <__udivmodhi4_ep>

0000355e <__udivmodhi4_loop>:
    355e:	aa 1f       	adc	r26, r26
    3560:	bb 1f       	adc	r27, r27
    3562:	a6 17       	cp	r26, r22
    3564:	b7 07       	cpc	r27, r23
    3566:	10 f0       	brcs	.+4      	; 0x356c <__udivmodhi4_ep>
    3568:	a6 1b       	sub	r26, r22
    356a:	b7 0b       	sbc	r27, r23

0000356c <__udivmodhi4_ep>:
    356c:	88 1f       	adc	r24, r24
    356e:	99 1f       	adc	r25, r25
    3570:	5a 95       	dec	r21
    3572:	a9 f7       	brne	.-22     	; 0x355e <__udivmodhi4_loop>
    3574:	80 95       	com	r24
    3576:	90 95       	com	r25
    3578:	bc 01       	movw	r22, r24
    357a:	cd 01       	movw	r24, r26
    357c:	08 95       	ret

0000357e <_exit>:
    357e:	f8 94       	cli

00003580 <__stop_program>:
    3580:	ff cf       	rjmp	.-2      	; 0x3580 <__stop_program>
